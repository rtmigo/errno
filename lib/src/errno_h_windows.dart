
// SPDX-FileCopyrightText: (c) 2021 Art Galkin <github.com/rtmigo>
// SPDX-License-Identifier: MIT

// In the case of Windows, there is no clear division between kernel 
// errors and other errors. There is not even a division into errors 
// and their absence. When the system is working properly, it is
// actually a problem officially named ERROR_SUCCESS.
//
// This is a partial list of System Error Codes. For spring 2021, it
// contains all error codes up to 1299.
//
// The full list is huge, with error numbers reaching 11,000.
// For exotic error codes, it is better to refer to the primary
// sources from Microsoft.

/// These numbers can usually be found in the [OSError.errorCode]
/// property value, when the Dart/Flutter app runs on Windows platform. 
class WindowsErrors {

	static const success = 0; // ERROR_SUCCESS
	static const invalidFunction = 1; // ERROR_INVALID_FUNCTION
	static const fileNotFound = 2; // ERROR_FILE_NOT_FOUND
	static const pathNotFound = 3; // ERROR_PATH_NOT_FOUND
	static const tooManyOpenFiles = 4; // ERROR_TOO_MANY_OPEN_FILES
	static const accessDenied = 5; // ERROR_ACCESS_DENIED
	static const invalidHandle = 6; // ERROR_INVALID_HANDLE
	static const arenaTrashed = 7; // ERROR_ARENA_TRASHED
	static const notEnoughMemory = 8; // ERROR_NOT_ENOUGH_MEMORY
	static const invalidBlock = 9; // ERROR_INVALID_BLOCK
	static const badEnvironment = 10; // ERROR_BAD_ENVIRONMENT
	static const badFormat = 11; // ERROR_BAD_FORMAT
	static const invalidAccess = 12; // ERROR_INVALID_ACCESS
	static const invalidData = 13; // ERROR_INVALID_DATA
	static const outofmemory = 14; // ERROR_OUTOFMEMORY
	static const invalidDrive = 15; // ERROR_INVALID_DRIVE
	static const currentDirectory = 16; // ERROR_CURRENT_DIRECTORY
	static const notSameDevice = 17; // ERROR_NOT_SAME_DEVICE
	static const noMoreFiles = 18; // ERROR_NO_MORE_FILES
	static const writeProtect = 19; // ERROR_WRITE_PROTECT
	static const badUnit = 20; // ERROR_BAD_UNIT
	static const notReady = 21; // ERROR_NOT_READY
	static const badCommand = 22; // ERROR_BAD_COMMAND
	static const crc = 23; // ERROR_CRC
	static const badLength = 24; // ERROR_BAD_LENGTH
	static const seek = 25; // ERROR_SEEK
	static const notDosDisk = 26; // ERROR_NOT_DOS_DISK
	static const sectorNotFound = 27; // ERROR_SECTOR_NOT_FOUND
	static const outOfPaper = 28; // ERROR_OUT_OF_PAPER
	static const writeFault = 29; // ERROR_WRITE_FAULT
	static const readFault = 30; // ERROR_READ_FAULT
	static const genFailure = 31; // ERROR_GEN_FAILURE
	static const sharingViolation = 32; // ERROR_SHARING_VIOLATION
	static const lockViolation = 33; // ERROR_LOCK_VIOLATION
	static const wrongDisk = 34; // ERROR_WRONG_DISK
	static const sharingBufferExceeded = 36; // ERROR_SHARING_BUFFER_EXCEEDED
	static const handleEof = 38; // ERROR_HANDLE_EOF
	static const handleDiskFull = 39; // ERROR_HANDLE_DISK_FULL
	static const notSupported = 50; // ERROR_NOT_SUPPORTED
	static const remNotList = 51; // ERROR_REM_NOT_LIST
	static const dupName = 52; // ERROR_DUP_NAME
	static const badNetpath = 53; // ERROR_BAD_NETPATH
	static const networkBusy = 54; // ERROR_NETWORK_BUSY
	static const devNotExist = 55; // ERROR_DEV_NOT_EXIST
	static const tooManyCmds = 56; // ERROR_TOO_MANY_CMDS
	static const adapHdwErr = 57; // ERROR_ADAP_HDW_ERR
	static const badNetResp = 58; // ERROR_BAD_NET_RESP
	static const unexpNetErr = 59; // ERROR_UNEXP_NET_ERR
	static const badRemAdap = 60; // ERROR_BAD_REM_ADAP
	static const printqFull = 61; // ERROR_PRINTQ_FULL
	static const noSpoolSpace = 62; // ERROR_NO_SPOOL_SPACE
	static const printCancelled = 63; // ERROR_PRINT_CANCELLED
	static const netnameDeleted = 64; // ERROR_NETNAME_DELETED
	static const networkAccessDenied = 65; // ERROR_NETWORK_ACCESS_DENIED
	static const badDevType = 66; // ERROR_BAD_DEV_TYPE
	static const badNetName = 67; // ERROR_BAD_NET_NAME
	static const tooManyNames = 68; // ERROR_TOO_MANY_NAMES
	static const tooManySess = 69; // ERROR_TOO_MANY_SESS
	static const sharingPaused = 70; // ERROR_SHARING_PAUSED
	static const reqNotAccep = 71; // ERROR_REQ_NOT_ACCEP
	static const redirPaused = 72; // ERROR_REDIR_PAUSED
	static const fileExists = 80; // ERROR_FILE_EXISTS
	static const cannotMake = 82; // ERROR_CANNOT_MAKE
	static const failI24 = 83; // ERROR_FAIL_I24
	static const outOfStructures = 84; // ERROR_OUT_OF_STRUCTURES
	static const alreadyAssigned = 85; // ERROR_ALREADY_ASSIGNED
	static const invalidPassword = 86; // ERROR_INVALID_PASSWORD
	static const invalidParameter = 87; // ERROR_INVALID_PARAMETER
	static const netWriteFault = 88; // ERROR_NET_WRITE_FAULT
	static const noProcSlots = 89; // ERROR_NO_PROC_SLOTS
	static const tooManySemaphores = 100; // ERROR_TOO_MANY_SEMAPHORES
	static const exclSemAlreadyOwned = 101; // ERROR_EXCL_SEM_ALREADY_OWNED
	static const semIsSet = 102; // ERROR_SEM_IS_SET
	static const tooManySemRequests = 103; // ERROR_TOO_MANY_SEM_REQUESTS
	static const invalidAtInterruptTime = 104; // ERROR_INVALID_AT_INTERRUPT_TIME
	static const semOwnerDied = 105; // ERROR_SEM_OWNER_DIED
	static const semUserLimit = 106; // ERROR_SEM_USER_LIMIT
	static const diskChange = 107; // ERROR_DISK_CHANGE
	static const driveLocked = 108; // ERROR_DRIVE_LOCKED
	static const brokenPipe = 109; // ERROR_BROKEN_PIPE
	static const openFailed = 110; // ERROR_OPEN_FAILED
	static const bufferOverflow = 111; // ERROR_BUFFER_OVERFLOW
	static const diskFull = 112; // ERROR_DISK_FULL
	static const noMoreSearchHandles = 113; // ERROR_NO_MORE_SEARCH_HANDLES
	static const invalidTargetHandle = 114; // ERROR_INVALID_TARGET_HANDLE
	static const invalidCategory = 117; // ERROR_INVALID_CATEGORY
	static const invalidVerifySwitch = 118; // ERROR_INVALID_VERIFY_SWITCH
	static const badDriverLevel = 119; // ERROR_BAD_DRIVER_LEVEL
	static const callNotImplemented = 120; // ERROR_CALL_NOT_IMPLEMENTED
	static const semTimeout = 121; // ERROR_SEM_TIMEOUT
	static const insufficientBuffer = 122; // ERROR_INSUFFICIENT_BUFFER
	static const invalidName = 123; // ERROR_INVALID_NAME
	static const invalidLevel = 124; // ERROR_INVALID_LEVEL
	static const noVolumeLabel = 125; // ERROR_NO_VOLUME_LABEL
	static const modNotFound = 126; // ERROR_MOD_NOT_FOUND
	static const procNotFound = 127; // ERROR_PROC_NOT_FOUND
	static const waitNoChildren = 128; // ERROR_WAIT_NO_CHILDREN
	static const childNotComplete = 129; // ERROR_CHILD_NOT_COMPLETE
	static const directAccessHandle = 130; // ERROR_DIRECT_ACCESS_HANDLE
	static const negativeSeek = 131; // ERROR_NEGATIVE_SEEK
	static const seekOnDevice = 132; // ERROR_SEEK_ON_DEVICE
	static const isJoinTarget = 133; // ERROR_IS_JOIN_TARGET
	static const isJoined = 134; // ERROR_IS_JOINED
	static const isSubsted = 135; // ERROR_IS_SUBSTED
	static const notJoined = 136; // ERROR_NOT_JOINED
	static const notSubsted = 137; // ERROR_NOT_SUBSTED
	static const joinToJoin = 138; // ERROR_JOIN_TO_JOIN
	static const substToSubst = 139; // ERROR_SUBST_TO_SUBST
	static const joinToSubst = 140; // ERROR_JOIN_TO_SUBST
	static const substToJoin = 141; // ERROR_SUBST_TO_JOIN
	static const busyDrive = 142; // ERROR_BUSY_DRIVE
	static const sameDrive = 143; // ERROR_SAME_DRIVE
	static const dirNotRoot = 144; // ERROR_DIR_NOT_ROOT
	static const dirNotEmpty = 145; // ERROR_DIR_NOT_EMPTY
	static const isSubstPath = 146; // ERROR_IS_SUBST_PATH
	static const isJoinPath = 147; // ERROR_IS_JOIN_PATH
	static const pathBusy = 148; // ERROR_PATH_BUSY
	static const isSubstTarget = 149; // ERROR_IS_SUBST_TARGET
	static const systemTrace = 150; // ERROR_SYSTEM_TRACE
	static const invalidEventCount = 151; // ERROR_INVALID_EVENT_COUNT
	static const tooManyMuxwaiters = 152; // ERROR_TOO_MANY_MUXWAITERS
	static const invalidListFormat = 153; // ERROR_INVALID_LIST_FORMAT
	static const labelTooLong = 154; // ERROR_LABEL_TOO_LONG
	static const tooManyTcbs = 155; // ERROR_TOO_MANY_TCBS
	static const signalRefused = 156; // ERROR_SIGNAL_REFUSED
	static const discarded = 157; // ERROR_DISCARDED
	static const notLocked = 158; // ERROR_NOT_LOCKED
	static const badThreadidAddr = 159; // ERROR_BAD_THREADID_ADDR
	static const badArguments = 160; // ERROR_BAD_ARGUMENTS
	static const badPathname = 161; // ERROR_BAD_PATHNAME
	static const signalPending = 162; // ERROR_SIGNAL_PENDING
	static const maxThrdsReached = 164; // ERROR_MAX_THRDS_REACHED
	static const lockFailed = 167; // ERROR_LOCK_FAILED
	static const busy = 170; // ERROR_BUSY
	static const deviceSupportInProgress = 171; // ERROR_DEVICE_SUPPORT_IN_PROGRESS
	static const cancelViolation = 173; // ERROR_CANCEL_VIOLATION
	static const atomicLocksNotSupported = 174; // ERROR_ATOMIC_LOCKS_NOT_SUPPORTED
	static const invalidSegmentNumber = 180; // ERROR_INVALID_SEGMENT_NUMBER
	static const invalidOrdinal = 182; // ERROR_INVALID_ORDINAL
	static const alreadyExists = 183; // ERROR_ALREADY_EXISTS
	static const invalidFlagNumber = 186; // ERROR_INVALID_FLAG_NUMBER
	static const semNotFound = 187; // ERROR_SEM_NOT_FOUND
	static const invalidStartingCodeseg = 188; // ERROR_INVALID_STARTING_CODESEG
	static const invalidStackseg = 189; // ERROR_INVALID_STACKSEG
	static const invalidModuletype = 190; // ERROR_INVALID_MODULETYPE
	static const invalidExeSignature = 191; // ERROR_INVALID_EXE_SIGNATURE
	static const exeMarkedInvalid = 192; // ERROR_EXE_MARKED_INVALID
	static const badExeFormat = 193; // ERROR_BAD_EXE_FORMAT
	static const iteratedDataExceeds64K = 194; // ERROR_ITERATED_DATA_EXCEEDS_64k
	static const invalidMinallocsize = 195; // ERROR_INVALID_MINALLOCSIZE
	static const dynlinkFromInvalidRing = 196; // ERROR_DYNLINK_FROM_INVALID_RING
	static const ioplNotEnabled = 197; // ERROR_IOPL_NOT_ENABLED
	static const invalidSegdpl = 198; // ERROR_INVALID_SEGDPL
	static const autodatasegExceeds64K = 199; // ERROR_AUTODATASEG_EXCEEDS_64k
	static const ring2segMustBeMovable = 200; // ERROR_RING2SEG_MUST_BE_MOVABLE
	static const relocChainXeedsSeglim = 201; // ERROR_RELOC_CHAIN_XEEDS_SEGLIM
	static const infloopInRelocChain = 202; // ERROR_INFLOOP_IN_RELOC_CHAIN
	static const envvarNotFound = 203; // ERROR_ENVVAR_NOT_FOUND
	static const noSignalSent = 205; // ERROR_NO_SIGNAL_SENT
	static const filenameExcedRange = 206; // ERROR_FILENAME_EXCED_RANGE
	static const ring2StackInUse = 207; // ERROR_RING2_STACK_IN_USE
	static const metaExpansionTooLong = 208; // ERROR_META_EXPANSION_TOO_LONG
	static const invalidSignalNumber = 209; // ERROR_INVALID_SIGNAL_NUMBER
	static const thread1Inactive = 210; // ERROR_THREAD_1_INACTIVE
	static const locked = 212; // ERROR_LOCKED
	static const tooManyModules = 214; // ERROR_TOO_MANY_MODULES
	static const nestingNotAllowed = 215; // ERROR_NESTING_NOT_ALLOWED
	static const exeMachineTypeMismatch = 216; // ERROR_EXE_MACHINE_TYPE_MISMATCH
	static const exeCannotModifySignedBinary = 217; // ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY
	static const exeCannotModifyStrongSignedBinary = 218; // ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY
	static const fileCheckedOut = 220; // ERROR_FILE_CHECKED_OUT
	static const checkoutRequired = 221; // ERROR_CHECKOUT_REQUIRED
	static const badFileType = 222; // ERROR_BAD_FILE_TYPE
	static const fileTooLarge = 223; // ERROR_FILE_TOO_LARGE
	static const formsAuthRequired = 224; // ERROR_FORMS_AUTH_REQUIRED
	static const virusInfected = 225; // ERROR_VIRUS_INFECTED
	static const virusDeleted = 226; // ERROR_VIRUS_DELETED
	static const pipeLocal = 229; // ERROR_PIPE_LOCAL
	static const badPipe = 230; // ERROR_BAD_PIPE
	static const pipeBusy = 231; // ERROR_PIPE_BUSY
	static const noData = 232; // ERROR_NO_DATA
	static const pipeNotConnected = 233; // ERROR_PIPE_NOT_CONNECTED
	static const moreData = 234; // ERROR_MORE_DATA
	static const vcDisconnected = 240; // ERROR_VC_DISCONNECTED
	static const invalidEaName = 254; // ERROR_INVALID_EA_NAME
	static const eaListInconsistent = 255; // ERROR_EA_LIST_INCONSISTENT
	static const waitTimeout = 258; // WAIT_TIMEOUT
	static const noMoreItems = 259; // ERROR_NO_MORE_ITEMS
	static const cannotCopy = 266; // ERROR_CANNOT_COPY
	static const directory = 267; // ERROR_DIRECTORY
	static const easDidntFit = 275; // ERROR_EAS_DIDNT_FIT
	static const eaFileCorrupt = 276; // ERROR_EA_FILE_CORRUPT
	static const eaTableFull = 277; // ERROR_EA_TABLE_FULL
	static const invalidEaHandle = 278; // ERROR_INVALID_EA_HANDLE
	static const easNotSupported = 282; // ERROR_EAS_NOT_SUPPORTED
	static const notOwner = 288; // ERROR_NOT_OWNER
	static const tooManyPosts = 298; // ERROR_TOO_MANY_POSTS
	static const partialCopy = 299; // ERROR_PARTIAL_COPY
	static const oplockNotGranted = 300; // ERROR_OPLOCK_NOT_GRANTED
	static const invalidOplockProtocol = 301; // ERROR_INVALID_OPLOCK_PROTOCOL
	static const diskTooFragmented = 302; // ERROR_DISK_TOO_FRAGMENTED
	static const deletePending = 303; // ERROR_DELETE_PENDING
	static const incompatibleWithGlobalShortNameRegistrySetting = 304; // ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING
	static const shortNamesNotEnabledOnVolume = 305; // ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME
	static const securityStreamIsInconsistent = 306; // ERROR_SECURITY_STREAM_IS_INCONSISTENT
	static const invalidLockRange = 307; // ERROR_INVALID_LOCK_RANGE
	static const imageSubsystemNotPresent = 308; // ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT
	static const notificationGuidAlreadyDefined = 309; // ERROR_NOTIFICATION_GUID_ALREADY_DEFINED
	static const invalidExceptionHandler = 310; // ERROR_INVALID_EXCEPTION_HANDLER
	static const duplicatePrivileges = 311; // ERROR_DUPLICATE_PRIVILEGES
	static const noRangesProcessed = 312; // ERROR_NO_RANGES_PROCESSED
	static const notAllowedOnSystemFile = 313; // ERROR_NOT_ALLOWED_ON_SYSTEM_FILE
	static const diskResourcesExhausted = 314; // ERROR_DISK_RESOURCES_EXHAUSTED
	static const invalidToken = 315; // ERROR_INVALID_TOKEN
	static const deviceFeatureNotSupported = 316; // ERROR_DEVICE_FEATURE_NOT_SUPPORTED
	static const mrMidNotFound = 317; // ERROR_MR_MID_NOT_FOUND
	static const scopeNotFound = 318; // ERROR_SCOPE_NOT_FOUND
	static const undefinedScope = 319; // ERROR_UNDEFINED_SCOPE
	static const invalidCap = 320; // ERROR_INVALID_CAP
	static const deviceUnreachable = 321; // ERROR_DEVICE_UNREACHABLE
	static const deviceNoResources = 322; // ERROR_DEVICE_NO_RESOURCES
	static const dataChecksumError = 323; // ERROR_DATA_CHECKSUM_ERROR
	static const intermixedKernelEaOperation = 324; // ERROR_INTERMIXED_KERNEL_EA_OPERATION
	static const fileLevelTrimNotSupported = 326; // ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED
	static const offsetAlignmentViolation = 327; // ERROR_OFFSET_ALIGNMENT_VIOLATION
	static const invalidFieldInParameterList = 328; // ERROR_INVALID_FIELD_IN_PARAMETER_LIST
	static const operationInProgress = 329; // ERROR_OPERATION_IN_PROGRESS
	static const badDevicePath = 330; // ERROR_BAD_DEVICE_PATH
	static const tooManyDescriptors = 331; // ERROR_TOO_MANY_DESCRIPTORS
	static const scrubDataDisabled = 332; // ERROR_SCRUB_DATA_DISABLED
	static const notRedundantStorage = 333; // ERROR_NOT_REDUNDANT_STORAGE
	static const residentFileNotSupported = 334; // ERROR_RESIDENT_FILE_NOT_SUPPORTED
	static const compressedFileNotSupported = 335; // ERROR_COMPRESSED_FILE_NOT_SUPPORTED
	static const directoryNotSupported = 336; // ERROR_DIRECTORY_NOT_SUPPORTED
	static const notReadFromCopy = 337; // ERROR_NOT_READ_FROM_COPY
	static const failNoactionReboot = 350; // ERROR_FAIL_NOACTION_REBOOT
	static const failShutdown = 351; // ERROR_FAIL_SHUTDOWN
	static const failRestart = 352; // ERROR_FAIL_RESTART
	static const maxSessionsReached = 353; // ERROR_MAX_SESSIONS_REACHED
	static const threadModeAlreadyBackground = 400; // ERROR_THREAD_MODE_ALREADY_BACKGROUND
	static const threadModeNotBackground = 401; // ERROR_THREAD_MODE_NOT_BACKGROUND
	static const processModeAlreadyBackground = 402; // ERROR_PROCESS_MODE_ALREADY_BACKGROUND
	static const processModeNotBackground = 403; // ERROR_PROCESS_MODE_NOT_BACKGROUND
	static const invalidAddress = 487; // ERROR_INVALID_ADDRESS
	static const userProfileLoad = 500; // ERROR_USER_PROFILE_LOAD
	static const arithmeticOverflow = 534; // ERROR_ARITHMETIC_OVERFLOW
	static const pipeConnected = 535; // ERROR_PIPE_CONNECTED
	static const pipeListening = 536; // ERROR_PIPE_LISTENING
	static const verifierStop = 537; // ERROR_VERIFIER_STOP
	static const abiosError = 538; // ERROR_ABIOS_ERROR
	static const wx86Warning = 539; // ERROR_WX86_WARNING
	static const wx86Error = 540; // ERROR_WX86_ERROR
	static const timerNotCanceled = 541; // ERROR_TIMER_NOT_CANCELED
	static const unwind = 542; // ERROR_UNWIND
	static const badStack = 543; // ERROR_BAD_STACK
	static const invalidUnwindTarget = 544; // ERROR_INVALID_UNWIND_TARGET
	static const invalidPortAttributes = 545; // ERROR_INVALID_PORT_ATTRIBUTES
	static const portMessageTooLong = 546; // ERROR_PORT_MESSAGE_TOO_LONG
	static const invalidQuotaLower = 547; // ERROR_INVALID_QUOTA_LOWER
	static const deviceAlreadyAttached = 548; // ERROR_DEVICE_ALREADY_ATTACHED
	static const instructionMisalignment = 549; // ERROR_INSTRUCTION_MISALIGNMENT
	static const profilingNotStarted = 550; // ERROR_PROFILING_NOT_STARTED
	static const profilingNotStopped = 551; // ERROR_PROFILING_NOT_STOPPED
	static const couldNotInterpret = 552; // ERROR_COULD_NOT_INTERPRET
	static const profilingAtLimit = 553; // ERROR_PROFILING_AT_LIMIT
	static const cantWait = 554; // ERROR_CANT_WAIT
	static const cantTerminateSelf = 555; // ERROR_CANT_TERMINATE_SELF
	static const unexpectedMmCreateErr = 556; // ERROR_UNEXPECTED_MM_CREATE_ERR
	static const unexpectedMmMapError = 557; // ERROR_UNEXPECTED_MM_MAP_ERROR
	static const unexpectedMmExtendErr = 558; // ERROR_UNEXPECTED_MM_EXTEND_ERR
	static const badFunctionTable = 559; // ERROR_BAD_FUNCTION_TABLE
	static const noGuidTranslation = 560; // ERROR_NO_GUID_TRANSLATION
	static const invalidLdtSize = 561; // ERROR_INVALID_LDT_SIZE
	static const invalidLdtOffset = 563; // ERROR_INVALID_LDT_OFFSET
	static const invalidLdtDescriptor = 564; // ERROR_INVALID_LDT_DESCRIPTOR
	static const tooManyThreads = 565; // ERROR_TOO_MANY_THREADS
	static const threadNotInProcess = 566; // ERROR_THREAD_NOT_IN_PROCESS
	static const pagefileQuotaExceeded = 567; // ERROR_PAGEFILE_QUOTA_EXCEEDED
	static const logonServerConflict = 568; // ERROR_LOGON_SERVER_CONFLICT
	static const synchronizationRequired = 569; // ERROR_SYNCHRONIZATION_REQUIRED
	static const netOpenFailed = 570; // ERROR_NET_OPEN_FAILED
	static const ioPrivilegeFailed = 571; // ERROR_IO_PRIVILEGE_FAILED
	static const controlCExit = 572; // ERROR_CONTROL_C_EXIT
	static const missingSystemfile = 573; // ERROR_MISSING_SYSTEMFILE
	static const unhandledException = 574; // ERROR_UNHANDLED_EXCEPTION
	static const appInitFailure = 575; // ERROR_APP_INIT_FAILURE
	static const pagefileCreateFailed = 576; // ERROR_PAGEFILE_CREATE_FAILED
	static const invalidImageHash = 577; // ERROR_INVALID_IMAGE_HASH
	static const noPagefile = 578; // ERROR_NO_PAGEFILE
	static const illegalFloatContext = 579; // ERROR_ILLEGAL_FLOAT_CONTEXT
	static const noEventPair = 580; // ERROR_NO_EVENT_PAIR
	static const domainCtrlrConfigError = 581; // ERROR_DOMAIN_CTRLR_CONFIG_ERROR
	static const illegalCharacter = 582; // ERROR_ILLEGAL_CHARACTER
	static const undefinedCharacter = 583; // ERROR_UNDEFINED_CHARACTER
	static const floppyVolume = 584; // ERROR_FLOPPY_VOLUME
	static const biosFailedToConnectInterrupt = 585; // ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT
	static const backupController = 586; // ERROR_BACKUP_CONTROLLER
	static const mutantLimitExceeded = 587; // ERROR_MUTANT_LIMIT_EXCEEDED
	static const fsDriverRequired = 588; // ERROR_FS_DRIVER_REQUIRED
	static const cannotLoadRegistryFile = 589; // ERROR_CANNOT_LOAD_REGISTRY_FILE
	static const debugAttachFailed = 590; // ERROR_DEBUG_ATTACH_FAILED
	static const systemProcessTerminated = 591; // ERROR_SYSTEM_PROCESS_TERMINATED
	static const dataNotAccepted = 592; // ERROR_DATA_NOT_ACCEPTED
	static const vdmHardError = 593; // ERROR_VDM_HARD_ERROR
	static const driverCancelTimeout = 594; // ERROR_DRIVER_CANCEL_TIMEOUT
	static const replyMessageMismatch = 595; // ERROR_REPLY_MESSAGE_MISMATCH
	static const lostWritebehindData = 596; // ERROR_LOST_WRITEBEHIND_DATA
	static const clientServerParametersInvalid = 597; // ERROR_CLIENT_SERVER_PARAMETERS_INVALID
	static const notTinyStream = 598; // ERROR_NOT_TINY_STREAM
	static const stackOverflowRead = 599; // ERROR_STACK_OVERFLOW_READ
	static const convertToLarge = 600; // ERROR_CONVERT_TO_LARGE
	static const foundOutOfScope = 601; // ERROR_FOUND_OUT_OF_SCOPE
	static const allocateBucket = 602; // ERROR_ALLOCATE_BUCKET
	static const marshallOverflow = 603; // ERROR_MARSHALL_OVERFLOW
	static const invalidVariant = 604; // ERROR_INVALID_VARIANT
	static const badCompressionBuffer = 605; // ERROR_BAD_COMPRESSION_BUFFER
	static const auditFailed = 606; // ERROR_AUDIT_FAILED
	static const timerResolutionNotSet = 607; // ERROR_TIMER_RESOLUTION_NOT_SET
	static const insufficientLogonInfo = 608; // ERROR_INSUFFICIENT_LOGON_INFO
	static const badDllEntrypoint = 609; // ERROR_BAD_DLL_ENTRYPOINT
	static const badServiceEntrypoint = 610; // ERROR_BAD_SERVICE_ENTRYPOINT
	static const ipAddressConflict1 = 611; // ERROR_IP_ADDRESS_CONFLICT1
	static const ipAddressConflict2 = 612; // ERROR_IP_ADDRESS_CONFLICT2
	static const registryQuotaLimit = 613; // ERROR_REGISTRY_QUOTA_LIMIT
	static const noCallbackActive = 614; // ERROR_NO_CALLBACK_ACTIVE
	static const pwdTooShort = 615; // ERROR_PWD_TOO_SHORT
	static const pwdTooRecent = 616; // ERROR_PWD_TOO_RECENT
	static const pwdHistoryConflict = 617; // ERROR_PWD_HISTORY_CONFLICT
	static const unsupportedCompression = 618; // ERROR_UNSUPPORTED_COMPRESSION
	static const invalidHwProfile = 619; // ERROR_INVALID_HW_PROFILE
	static const invalidPlugplayDevicePath = 620; // ERROR_INVALID_PLUGPLAY_DEVICE_PATH
	static const quotaListInconsistent = 621; // ERROR_QUOTA_LIST_INCONSISTENT
	static const evaluationExpiration = 622; // ERROR_EVALUATION_EXPIRATION
	static const illegalDllRelocation = 623; // ERROR_ILLEGAL_DLL_RELOCATION
	static const dllInitFailedLogoff = 624; // ERROR_DLL_INIT_FAILED_LOGOFF
	static const validateContinue = 625; // ERROR_VALIDATE_CONTINUE
	static const noMoreMatches = 626; // ERROR_NO_MORE_MATCHES
	static const rangeListConflict = 627; // ERROR_RANGE_LIST_CONFLICT
	static const serverSidMismatch = 628; // ERROR_SERVER_SID_MISMATCH
	static const cantEnableDenyOnly = 629; // ERROR_CANT_ENABLE_DENY_ONLY
	static const floatMultipleFaults = 630; // ERROR_FLOAT_MULTIPLE_FAULTS
	static const floatMultipleTraps = 631; // ERROR_FLOAT_MULTIPLE_TRAPS
	static const nointerface = 632; // ERROR_NOINTERFACE
	static const driverFailedSleep = 633; // ERROR_DRIVER_FAILED_SLEEP
	static const corruptSystemFile = 634; // ERROR_CORRUPT_SYSTEM_FILE
	static const commitmentMinimum = 635; // ERROR_COMMITMENT_MINIMUM
	static const pnpRestartEnumeration = 636; // ERROR_PNP_RESTART_ENUMERATION
	static const systemImageBadSignature = 637; // ERROR_SYSTEM_IMAGE_BAD_SIGNATURE
	static const pnpRebootRequired = 638; // ERROR_PNP_REBOOT_REQUIRED
	static const insufficientPower = 639; // ERROR_INSUFFICIENT_POWER
	static const multipleFaultViolation = 640; // ERROR_MULTIPLE_FAULT_VIOLATION
	static const systemShutdown = 641; // ERROR_SYSTEM_SHUTDOWN
	static const portNotSet = 642; // ERROR_PORT_NOT_SET
	static const dsVersionCheckFailure = 643; // ERROR_DS_VERSION_CHECK_FAILURE
	static const rangeNotFound = 644; // ERROR_RANGE_NOT_FOUND
	static const notSafeModeDriver = 646; // ERROR_NOT_SAFE_MODE_DRIVER
	static const failedDriverEntry = 647; // ERROR_FAILED_DRIVER_ENTRY
	static const deviceEnumerationError = 648; // ERROR_DEVICE_ENUMERATION_ERROR
	static const mountPointNotResolved = 649; // ERROR_MOUNT_POINT_NOT_RESOLVED
	static const invalidDeviceObjectParameter = 650; // ERROR_INVALID_DEVICE_OBJECT_PARAMETER
	static const mcaOccured = 651; // ERROR_MCA_OCCURED
	static const driverDatabaseError = 652; // ERROR_DRIVER_DATABASE_ERROR
	static const systemHiveTooLarge = 653; // ERROR_SYSTEM_HIVE_TOO_LARGE
	static const driverFailedPriorUnload = 654; // ERROR_DRIVER_FAILED_PRIOR_UNLOAD
	static const volsnapPrepareHibernate = 655; // ERROR_VOLSNAP_PREPARE_HIBERNATE
	static const hibernationFailure = 656; // ERROR_HIBERNATION_FAILURE
	static const pwdTooLong = 657; // ERROR_PWD_TOO_LONG
	static const fileSystemLimitation = 665; // ERROR_FILE_SYSTEM_LIMITATION
	static const assertionFailure = 668; // ERROR_ASSERTION_FAILURE
	static const acpiError = 669; // ERROR_ACPI_ERROR
	static const wowAssertion = 670; // ERROR_WOW_ASSERTION
	static const pnpBadMpsTable = 671; // ERROR_PNP_BAD_MPS_TABLE
	static const pnpTranslationFailed = 672; // ERROR_PNP_TRANSLATION_FAILED
	static const pnpIrqTranslationFailed = 673; // ERROR_PNP_IRQ_TRANSLATION_FAILED
	static const pnpInvalidId = 674; // ERROR_PNP_INVALID_ID
	static const wakeSystemDebugger = 675; // ERROR_WAKE_SYSTEM_DEBUGGER
	static const handlesClosed = 676; // ERROR_HANDLES_CLOSED
	static const extraneousInformation = 677; // ERROR_EXTRANEOUS_INFORMATION
	static const rxactCommitNecessary = 678; // ERROR_RXACT_COMMIT_NECESSARY
	static const mediaCheck = 679; // ERROR_MEDIA_CHECK
	static const guidSubstitutionMade = 680; // ERROR_GUID_SUBSTITUTION_MADE
	static const stoppedOnSymlink = 681; // ERROR_STOPPED_ON_SYMLINK
	static const longjump = 682; // ERROR_LONGJUMP
	static const plugplayQueryVetoed = 683; // ERROR_PLUGPLAY_QUERY_VETOED
	static const unwindConsolidate = 684; // ERROR_UNWIND_CONSOLIDATE
	static const registryHiveRecovered = 685; // ERROR_REGISTRY_HIVE_RECOVERED
	static const dllMightBeInsecure = 686; // ERROR_DLL_MIGHT_BE_INSECURE
	static const dllMightBeIncompatible = 687; // ERROR_DLL_MIGHT_BE_INCOMPATIBLE
	static const dbgExceptionNotHandled = 688; // ERROR_DBG_EXCEPTION_NOT_HANDLED
	static const dbgReplyLater = 689; // ERROR_DBG_REPLY_LATER
	static const dbgUnableToProvideHandle = 690; // ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE
	static const dbgTerminateThread = 691; // ERROR_DBG_TERMINATE_THREAD
	static const dbgTerminateProcess = 692; // ERROR_DBG_TERMINATE_PROCESS
	static const dbgControlC = 693; // ERROR_DBG_CONTROL_C
	static const dbgPrintexceptionC = 694; // ERROR_DBG_PRINTEXCEPTION_C
	static const dbgRipexception = 695; // ERROR_DBG_RIPEXCEPTION
	static const dbgControlBreak = 696; // ERROR_DBG_CONTROL_BREAK
	static const dbgCommandException = 697; // ERROR_DBG_COMMAND_EXCEPTION
	static const objectNameExists = 698; // ERROR_OBJECT_NAME_EXISTS
	static const threadWasSuspended = 699; // ERROR_THREAD_WAS_SUSPENDED
	static const imageNotAtBase = 700; // ERROR_IMAGE_NOT_AT_BASE
	static const rxactStateCreated = 701; // ERROR_RXACT_STATE_CREATED
	static const segmentNotification = 702; // ERROR_SEGMENT_NOTIFICATION
	static const badCurrentDirectory = 703; // ERROR_BAD_CURRENT_DIRECTORY
	static const ftReadRecoveryFromBackup = 704; // ERROR_FT_READ_RECOVERY_FROM_BACKUP
	static const ftWriteRecovery = 705; // ERROR_FT_WRITE_RECOVERY
	static const imageMachineTypeMismatch = 706; // ERROR_IMAGE_MACHINE_TYPE_MISMATCH
	static const receivePartial = 707; // ERROR_RECEIVE_PARTIAL
	static const receiveExpedited = 708; // ERROR_RECEIVE_EXPEDITED
	static const receivePartialExpedited = 709; // ERROR_RECEIVE_PARTIAL_EXPEDITED
	static const eventDone = 710; // ERROR_EVENT_DONE
	static const eventPending = 711; // ERROR_EVENT_PENDING
	static const checkingFileSystem = 712; // ERROR_CHECKING_FILE_SYSTEM
	static const fatalAppExit = 713; // ERROR_FATAL_APP_EXIT
	static const predefinedHandle = 714; // ERROR_PREDEFINED_HANDLE
	static const wasUnlocked = 715; // ERROR_WAS_UNLOCKED
	static const serviceNotification = 716; // ERROR_SERVICE_NOTIFICATION
	static const wasLocked = 717; // ERROR_WAS_LOCKED
	static const logHardError = 718; // ERROR_LOG_HARD_ERROR
	static const alreadyWin32 = 719; // ERROR_ALREADY_WIN32
	static const imageMachineTypeMismatchExe = 720; // ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE
	static const noYieldPerformed = 721; // ERROR_NO_YIELD_PERFORMED
	static const timerResumeIgnored = 722; // ERROR_TIMER_RESUME_IGNORED
	static const arbitrationUnhandled = 723; // ERROR_ARBITRATION_UNHANDLED
	static const cardbusNotSupported = 724; // ERROR_CARDBUS_NOT_SUPPORTED
	static const mpProcessorMismatch = 725; // ERROR_MP_PROCESSOR_MISMATCH
	static const hibernated = 726; // ERROR_HIBERNATED
	static const resumeHibernation = 727; // ERROR_RESUME_HIBERNATION
	static const firmwareUpdated = 728; // ERROR_FIRMWARE_UPDATED
	static const driversLeakingLockedPages = 729; // ERROR_DRIVERS_LEAKING_LOCKED_PAGES
	static const wakeSystem = 730; // ERROR_WAKE_SYSTEM
	static const wait1 = 731; // ERROR_WAIT_1
	static const wait2 = 732; // ERROR_WAIT_2
	static const wait3 = 733; // ERROR_WAIT_3
	static const wait63 = 734; // ERROR_WAIT_63
	static const abandonedWait0 = 735; // ERROR_ABANDONED_WAIT_0
	static const abandonedWait63 = 736; // ERROR_ABANDONED_WAIT_63
	static const userApc = 737; // ERROR_USER_APC
	static const kernelApc = 738; // ERROR_KERNEL_APC
	static const alerted = 739; // ERROR_ALERTED
	static const elevationRequired = 740; // ERROR_ELEVATION_REQUIRED
	static const reparse = 741; // ERROR_REPARSE
	static const oplockBreakInProgress = 742; // ERROR_OPLOCK_BREAK_IN_PROGRESS
	static const volumeMounted = 743; // ERROR_VOLUME_MOUNTED
	static const rxactCommitted = 744; // ERROR_RXACT_COMMITTED
	static const notifyCleanup = 745; // ERROR_NOTIFY_CLEANUP
	static const primaryTransportConnectFailed = 746; // ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED
	static const pageFaultTransition = 747; // ERROR_PAGE_FAULT_TRANSITION
	static const pageFaultDemandZero = 748; // ERROR_PAGE_FAULT_DEMAND_ZERO
	static const pageFaultCopyOnWrite = 749; // ERROR_PAGE_FAULT_COPY_ON_WRITE
	static const pageFaultGuardPage = 750; // ERROR_PAGE_FAULT_GUARD_PAGE
	static const pageFaultPagingFile = 751; // ERROR_PAGE_FAULT_PAGING_FILE
	static const cachePageLocked = 752; // ERROR_CACHE_PAGE_LOCKED
	static const crashDump = 753; // ERROR_CRASH_DUMP
	static const bufferAllZeros = 754; // ERROR_BUFFER_ALL_ZEROS
	static const reparseObject = 755; // ERROR_REPARSE_OBJECT
	static const resourceRequirementsChanged = 756; // ERROR_RESOURCE_REQUIREMENTS_CHANGED
	static const translationComplete = 757; // ERROR_TRANSLATION_COMPLETE
	static const nothingToTerminate = 758; // ERROR_NOTHING_TO_TERMINATE
	static const processNotInJob = 759; // ERROR_PROCESS_NOT_IN_JOB
	static const processInJob = 760; // ERROR_PROCESS_IN_JOB
	static const volsnapHibernateReady = 761; // ERROR_VOLSNAP_HIBERNATE_READY
	static const fsfilterOpCompletedSuccessfully = 762; // ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY
	static const interruptVectorAlreadyConnected = 763; // ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED
	static const interruptStillConnected = 764; // ERROR_INTERRUPT_STILL_CONNECTED
	static const waitForOplock = 765; // ERROR_WAIT_FOR_OPLOCK
	static const dbgExceptionHandled = 766; // ERROR_DBG_EXCEPTION_HANDLED
	static const dbgContinue = 767; // ERROR_DBG_CONTINUE
	static const callbackPopStack = 768; // ERROR_CALLBACK_POP_STACK
	static const compressionDisabled = 769; // ERROR_COMPRESSION_DISABLED
	static const cantfetchbackwards = 770; // ERROR_CANTFETCHBACKWARDS
	static const cantscrollbackwards = 771; // ERROR_CANTSCROLLBACKWARDS
	static const rowsnotreleased = 772; // ERROR_ROWSNOTRELEASED
	static const badAccessorFlags = 773; // ERROR_BAD_ACCESSOR_FLAGS
	static const errorsEncountered = 774; // ERROR_ERRORS_ENCOUNTERED
	static const notCapable = 775; // ERROR_NOT_CAPABLE
	static const requestOutOfSequence = 776; // ERROR_REQUEST_OUT_OF_SEQUENCE
	static const versionParseError = 777; // ERROR_VERSION_PARSE_ERROR
	static const badstartposition = 778; // ERROR_BADSTARTPOSITION
	static const memoryHardware = 779; // ERROR_MEMORY_HARDWARE
	static const diskRepairDisabled = 780; // ERROR_DISK_REPAIR_DISABLED
	static const insufficientResourceForSpecifiedSharedSectionSize = 781; // ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE
	static const systemPowerstateTransition = 782; // ERROR_SYSTEM_POWERSTATE_TRANSITION
	static const systemPowerstateComplexTransition = 783; // ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION
	static const mcaException = 784; // ERROR_MCA_EXCEPTION
	static const accessAuditByPolicy = 785; // ERROR_ACCESS_AUDIT_BY_POLICY
	static const accessDisabledNoSaferUiByPolicy = 786; // ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY
	static const abandonHiberfile = 787; // ERROR_ABANDON_HIBERFILE
	static const lostWritebehindDataNetworkDisconnected = 788; // ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED
	static const lostWritebehindDataNetworkServerError = 789; // ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR
	static const lostWritebehindDataLocalDiskError = 790; // ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR
	static const badMcfgTable = 791; // ERROR_BAD_MCFG_TABLE
	static const diskRepairRedirected = 792; // ERROR_DISK_REPAIR_REDIRECTED
	static const diskRepairUnsuccessful = 793; // ERROR_DISK_REPAIR_UNSUCCESSFUL
	static const corruptLogOverfull = 794; // ERROR_CORRUPT_LOG_OVERFULL
	static const corruptLogCorrupted = 795; // ERROR_CORRUPT_LOG_CORRUPTED
	static const corruptLogUnavailable = 796; // ERROR_CORRUPT_LOG_UNAVAILABLE
	static const corruptLogDeletedFull = 797; // ERROR_CORRUPT_LOG_DELETED_FULL
	static const corruptLogCleared = 798; // ERROR_CORRUPT_LOG_CLEARED
	static const orphanNameExhausted = 799; // ERROR_ORPHAN_NAME_EXHAUSTED
	static const oplockSwitchedToNewHandle = 800; // ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE
	static const cannotGrantRequestedOplock = 801; // ERROR_CANNOT_GRANT_REQUESTED_OPLOCK
	static const cannotBreakOplock = 802; // ERROR_CANNOT_BREAK_OPLOCK
	static const oplockHandleClosed = 803; // ERROR_OPLOCK_HANDLE_CLOSED
	static const noAceCondition = 804; // ERROR_NO_ACE_CONDITION
	static const invalidAceCondition = 805; // ERROR_INVALID_ACE_CONDITION
	static const fileHandleRevoked = 806; // ERROR_FILE_HANDLE_REVOKED
	static const imageAtDifferentBase = 807; // ERROR_IMAGE_AT_DIFFERENT_BASE
	static const eaAccessDenied = 994; // ERROR_EA_ACCESS_DENIED
	static const operationAborted = 995; // ERROR_OPERATION_ABORTED
	static const ioIncomplete = 996; // ERROR_IO_INCOMPLETE
	static const ioPending = 997; // ERROR_IO_PENDING
	static const noaccess = 998; // ERROR_NOACCESS
	static const swaperror = 999; // ERROR_SWAPERROR
	static const stackOverflow = 1001; // ERROR_STACK_OVERFLOW
	static const invalidMessage = 1002; // ERROR_INVALID_MESSAGE
	static const canNotComplete = 1003; // ERROR_CAN_NOT_COMPLETE
	static const invalidFlags = 1004; // ERROR_INVALID_FLAGS
	static const unrecognizedVolume = 1005; // ERROR_UNRECOGNIZED_VOLUME
	static const fileInvalid = 1006; // ERROR_FILE_INVALID
	static const fullscreenMode = 1007; // ERROR_FULLSCREEN_MODE
	static const noToken = 1008; // ERROR_NO_TOKEN
	static const baddb = 1009; // ERROR_BADDB
	static const badkey = 1010; // ERROR_BADKEY
	static const cantopen = 1011; // ERROR_CANTOPEN
	static const cantread = 1012; // ERROR_CANTREAD
	static const cantwrite = 1013; // ERROR_CANTWRITE
	static const registryRecovered = 1014; // ERROR_REGISTRY_RECOVERED
	static const registryCorrupt = 1015; // ERROR_REGISTRY_CORRUPT
	static const registryIoFailed = 1016; // ERROR_REGISTRY_IO_FAILED
	static const notRegistryFile = 1017; // ERROR_NOT_REGISTRY_FILE
	static const keyDeleted = 1018; // ERROR_KEY_DELETED
	static const noLogSpace = 1019; // ERROR_NO_LOG_SPACE
	static const keyHasChildren = 1020; // ERROR_KEY_HAS_CHILDREN
	static const childMustBeVolatile = 1021; // ERROR_CHILD_MUST_BE_VOLATILE
	static const notifyEnumDir = 1022; // ERROR_NOTIFY_ENUM_DIR
	static const dependentServicesRunning = 1051; // ERROR_DEPENDENT_SERVICES_RUNNING
	static const invalidServiceControl = 1052; // ERROR_INVALID_SERVICE_CONTROL
	static const serviceRequestTimeout = 1053; // ERROR_SERVICE_REQUEST_TIMEOUT
	static const serviceNoThread = 1054; // ERROR_SERVICE_NO_THREAD
	static const serviceDatabaseLocked = 1055; // ERROR_SERVICE_DATABASE_LOCKED
	static const serviceAlreadyRunning = 1056; // ERROR_SERVICE_ALREADY_RUNNING
	static const invalidServiceAccount = 1057; // ERROR_INVALID_SERVICE_ACCOUNT
	static const serviceDisabled = 1058; // ERROR_SERVICE_DISABLED
	static const circularDependency = 1059; // ERROR_CIRCULAR_DEPENDENCY
	static const serviceDoesNotExist = 1060; // ERROR_SERVICE_DOES_NOT_EXIST
	static const serviceCannotAcceptCtrl = 1061; // ERROR_SERVICE_CANNOT_ACCEPT_CTRL
	static const serviceNotActive = 1062; // ERROR_SERVICE_NOT_ACTIVE
	static const failedServiceControllerConnect = 1063; // ERROR_FAILED_SERVICE_CONTROLLER_CONNECT
	static const exceptionInService = 1064; // ERROR_EXCEPTION_IN_SERVICE
	static const databaseDoesNotExist = 1065; // ERROR_DATABASE_DOES_NOT_EXIST
	static const serviceSpecificError = 1066; // ERROR_SERVICE_SPECIFIC_ERROR
	static const processAborted = 1067; // ERROR_PROCESS_ABORTED
	static const serviceDependencyFail = 1068; // ERROR_SERVICE_DEPENDENCY_FAIL
	static const serviceLogonFailed = 1069; // ERROR_SERVICE_LOGON_FAILED
	static const serviceStartHang = 1070; // ERROR_SERVICE_START_HANG
	static const invalidServiceLock = 1071; // ERROR_INVALID_SERVICE_LOCK
	static const serviceMarkedForDelete = 1072; // ERROR_SERVICE_MARKED_FOR_DELETE
	static const serviceExists = 1073; // ERROR_SERVICE_EXISTS
	static const alreadyRunningLkg = 1074; // ERROR_ALREADY_RUNNING_LKG
	static const serviceDependencyDeleted = 1075; // ERROR_SERVICE_DEPENDENCY_DELETED
	static const bootAlreadyAccepted = 1076; // ERROR_BOOT_ALREADY_ACCEPTED
	static const serviceNeverStarted = 1077; // ERROR_SERVICE_NEVER_STARTED
	static const duplicateServiceName = 1078; // ERROR_DUPLICATE_SERVICE_NAME
	static const differentServiceAccount = 1079; // ERROR_DIFFERENT_SERVICE_ACCOUNT
	static const cannotDetectDriverFailure = 1080; // ERROR_CANNOT_DETECT_DRIVER_FAILURE
	static const cannotDetectProcessAbort = 1081; // ERROR_CANNOT_DETECT_PROCESS_ABORT
	static const noRecoveryProgram = 1082; // ERROR_NO_RECOVERY_PROGRAM
	static const serviceNotInExe = 1083; // ERROR_SERVICE_NOT_IN_EXE
	static const notSafebootService = 1084; // ERROR_NOT_SAFEBOOT_SERVICE
	static const endOfMedia = 1100; // ERROR_END_OF_MEDIA
	static const filemarkDetected = 1101; // ERROR_FILEMARK_DETECTED
	static const beginningOfMedia = 1102; // ERROR_BEGINNING_OF_MEDIA
	static const setmarkDetected = 1103; // ERROR_SETMARK_DETECTED
	static const noDataDetected = 1104; // ERROR_NO_DATA_DETECTED
	static const partitionFailure = 1105; // ERROR_PARTITION_FAILURE
	static const invalidBlockLength = 1106; // ERROR_INVALID_BLOCK_LENGTH
	static const deviceNotPartitioned = 1107; // ERROR_DEVICE_NOT_PARTITIONED
	static const unableToLockMedia = 1108; // ERROR_UNABLE_TO_LOCK_MEDIA
	static const unableToUnloadMedia = 1109; // ERROR_UNABLE_TO_UNLOAD_MEDIA
	static const mediaChanged = 1110; // ERROR_MEDIA_CHANGED
	static const busReset = 1111; // ERROR_BUS_RESET
	static const noMediaInDrive = 1112; // ERROR_NO_MEDIA_IN_DRIVE
	static const noUnicodeTranslation = 1113; // ERROR_NO_UNICODE_TRANSLATION
	static const dllInitFailed = 1114; // ERROR_DLL_INIT_FAILED
	static const shutdownInProgress = 1115; // ERROR_SHUTDOWN_IN_PROGRESS
	static const noShutdownInProgress = 1116; // ERROR_NO_SHUTDOWN_IN_PROGRESS
	static const ioDevice = 1117; // ERROR_IO_DEVICE
	static const serialNoDevice = 1118; // ERROR_SERIAL_NO_DEVICE
	static const irqBusy = 1119; // ERROR_IRQ_BUSY
	static const moreWrites = 1120; // ERROR_MORE_WRITES
	static const counterTimeout = 1121; // ERROR_COUNTER_TIMEOUT
	static const floppyIdMarkNotFound = 1122; // ERROR_FLOPPY_ID_MARK_NOT_FOUND
	static const floppyWrongCylinder = 1123; // ERROR_FLOPPY_WRONG_CYLINDER
	static const floppyUnknownError = 1124; // ERROR_FLOPPY_UNKNOWN_ERROR
	static const floppyBadRegisters = 1125; // ERROR_FLOPPY_BAD_REGISTERS
	static const diskRecalibrateFailed = 1126; // ERROR_DISK_RECALIBRATE_FAILED
	static const diskOperationFailed = 1127; // ERROR_DISK_OPERATION_FAILED
	static const diskResetFailed = 1128; // ERROR_DISK_RESET_FAILED
	static const eomOverflow = 1129; // ERROR_EOM_OVERFLOW
	static const notEnoughServerMemory = 1130; // ERROR_NOT_ENOUGH_SERVER_MEMORY
	static const possibleDeadlock = 1131; // ERROR_POSSIBLE_DEADLOCK
	static const mappedAlignment = 1132; // ERROR_MAPPED_ALIGNMENT
	static const setPowerStateVetoed = 1140; // ERROR_SET_POWER_STATE_VETOED
	static const setPowerStateFailed = 1141; // ERROR_SET_POWER_STATE_FAILED
	static const tooManyLinks = 1142; // ERROR_TOO_MANY_LINKS
	static const oldWinVersion = 1150; // ERROR_OLD_WIN_VERSION
	static const appWrongOs = 1151; // ERROR_APP_WRONG_OS
	static const singleInstanceApp = 1152; // ERROR_SINGLE_INSTANCE_APP
	static const rmodeApp = 1153; // ERROR_RMODE_APP
	static const invalidDll = 1154; // ERROR_INVALID_DLL
	static const noAssociation = 1155; // ERROR_NO_ASSOCIATION
	static const ddeFail = 1156; // ERROR_DDE_FAIL
	static const dllNotFound = 1157; // ERROR_DLL_NOT_FOUND
	static const noMoreUserHandles = 1158; // ERROR_NO_MORE_USER_HANDLES
	static const messageSyncOnly = 1159; // ERROR_MESSAGE_SYNC_ONLY
	static const sourceElementEmpty = 1160; // ERROR_SOURCE_ELEMENT_EMPTY
	static const destinationElementFull = 1161; // ERROR_DESTINATION_ELEMENT_FULL
	static const illegalElementAddress = 1162; // ERROR_ILLEGAL_ELEMENT_ADDRESS
	static const magazineNotPresent = 1163; // ERROR_MAGAZINE_NOT_PRESENT
	static const deviceReinitializationNeeded = 1164; // ERROR_DEVICE_REINITIALIZATION_NEEDED
	static const deviceRequiresCleaning = 1165; // ERROR_DEVICE_REQUIRES_CLEANING
	static const deviceDoorOpen = 1166; // ERROR_DEVICE_DOOR_OPEN
	static const deviceNotConnected = 1167; // ERROR_DEVICE_NOT_CONNECTED
	static const notFound = 1168; // ERROR_NOT_FOUND
	static const noMatch = 1169; // ERROR_NO_MATCH
	static const setNotFound = 1170; // ERROR_SET_NOT_FOUND
	static const pointNotFound = 1171; // ERROR_POINT_NOT_FOUND
	static const noTrackingService = 1172; // ERROR_NO_TRACKING_SERVICE
	static const noVolumeId = 1173; // ERROR_NO_VOLUME_ID
	static const unableToRemoveReplaced = 1175; // ERROR_UNABLE_TO_REMOVE_REPLACED
	static const unableToMoveReplacement = 1176; // ERROR_UNABLE_TO_MOVE_REPLACEMENT
	static const unableToMoveReplacement2 = 1177; // ERROR_UNABLE_TO_MOVE_REPLACEMENT_2
	static const journalDeleteInProgress = 1178; // ERROR_JOURNAL_DELETE_IN_PROGRESS
	static const journalNotActive = 1179; // ERROR_JOURNAL_NOT_ACTIVE
	static const potentialFileFound = 1180; // ERROR_POTENTIAL_FILE_FOUND
	static const journalEntryDeleted = 1181; // ERROR_JOURNAL_ENTRY_DELETED
	static const shutdownIsScheduled = 1190; // ERROR_SHUTDOWN_IS_SCHEDULED
	static const shutdownUsersLoggedOn = 1191; // ERROR_SHUTDOWN_USERS_LOGGED_ON
	static const badDevice = 1200; // ERROR_BAD_DEVICE
	static const connectionUnavail = 1201; // ERROR_CONNECTION_UNAVAIL
	static const deviceAlreadyRemembered = 1202; // ERROR_DEVICE_ALREADY_REMEMBERED
	static const noNetOrBadPath = 1203; // ERROR_NO_NET_OR_BAD_PATH
	static const badProvider = 1204; // ERROR_BAD_PROVIDER
	static const cannotOpenProfile = 1205; // ERROR_CANNOT_OPEN_PROFILE
	static const badProfile = 1206; // ERROR_BAD_PROFILE
	static const notContainer = 1207; // ERROR_NOT_CONTAINER
	static const extendedError = 1208; // ERROR_EXTENDED_ERROR
	static const invalidGroupname = 1209; // ERROR_INVALID_GROUPNAME
	static const invalidComputername = 1210; // ERROR_INVALID_COMPUTERNAME
	static const invalidEventname = 1211; // ERROR_INVALID_EVENTNAME
	static const invalidDomainname = 1212; // ERROR_INVALID_DOMAINNAME
	static const invalidServicename = 1213; // ERROR_INVALID_SERVICENAME
	static const invalidNetname = 1214; // ERROR_INVALID_NETNAME
	static const invalidSharename = 1215; // ERROR_INVALID_SHARENAME
	static const invalidPasswordname = 1216; // ERROR_INVALID_PASSWORDNAME
	static const invalidMessagename = 1217; // ERROR_INVALID_MESSAGENAME
	static const invalidMessagedest = 1218; // ERROR_INVALID_MESSAGEDEST
	static const sessionCredentialConflict = 1219; // ERROR_SESSION_CREDENTIAL_CONFLICT
	static const remoteSessionLimitExceeded = 1220; // ERROR_REMOTE_SESSION_LIMIT_EXCEEDED
	static const dupDomainname = 1221; // ERROR_DUP_DOMAINNAME
	static const noNetwork = 1222; // ERROR_NO_NETWORK
	static const cancelled = 1223; // ERROR_CANCELLED
	static const userMappedFile = 1224; // ERROR_USER_MAPPED_FILE
	static const connectionRefused = 1225; // ERROR_CONNECTION_REFUSED
	static const gracefulDisconnect = 1226; // ERROR_GRACEFUL_DISCONNECT
	static const addressAlreadyAssociated = 1227; // ERROR_ADDRESS_ALREADY_ASSOCIATED
	static const addressNotAssociated = 1228; // ERROR_ADDRESS_NOT_ASSOCIATED
	static const connectionInvalid = 1229; // ERROR_CONNECTION_INVALID
	static const connectionActive = 1230; // ERROR_CONNECTION_ACTIVE
	static const networkUnreachable = 1231; // ERROR_NETWORK_UNREACHABLE
	static const hostUnreachable = 1232; // ERROR_HOST_UNREACHABLE
	static const protocolUnreachable = 1233; // ERROR_PROTOCOL_UNREACHABLE
	static const portUnreachable = 1234; // ERROR_PORT_UNREACHABLE
	static const requestAborted = 1235; // ERROR_REQUEST_ABORTED
	static const connectionAborted = 1236; // ERROR_CONNECTION_ABORTED
	static const retry = 1237; // ERROR_RETRY
	static const connectionCountLimit = 1238; // ERROR_CONNECTION_COUNT_LIMIT
	static const loginTimeRestriction = 1239; // ERROR_LOGIN_TIME_RESTRICTION
	static const loginWkstaRestriction = 1240; // ERROR_LOGIN_WKSTA_RESTRICTION
	static const incorrectAddress = 1241; // ERROR_INCORRECT_ADDRESS
	static const alreadyRegistered = 1242; // ERROR_ALREADY_REGISTERED
	static const serviceNotFound = 1243; // ERROR_SERVICE_NOT_FOUND
	static const notAuthenticated = 1244; // ERROR_NOT_AUTHENTICATED
	static const notLoggedOn = 1245; // ERROR_NOT_LOGGED_ON
	static const continueError = 1246; // ERROR_CONTINUE
	static const alreadyInitialized = 1247; // ERROR_ALREADY_INITIALIZED
	static const noMoreDevices = 1248; // ERROR_NO_MORE_DEVICES
	static const noSuchSite = 1249; // ERROR_NO_SUCH_SITE
	static const domainControllerExists = 1250; // ERROR_DOMAIN_CONTROLLER_EXISTS
	static const onlyIfConnected = 1251; // ERROR_ONLY_IF_CONNECTED
	static const overrideNochanges = 1252; // ERROR_OVERRIDE_NOCHANGES
	static const badUserProfile = 1253; // ERROR_BAD_USER_PROFILE
	static const notSupportedOnSbs = 1254; // ERROR_NOT_SUPPORTED_ON_SBS
	static const serverShutdownInProgress = 1255; // ERROR_SERVER_SHUTDOWN_IN_PROGRESS
	static const hostDown = 1256; // ERROR_HOST_DOWN
	static const nonAccountSid = 1257; // ERROR_NON_ACCOUNT_SID
	static const nonDomainSid = 1258; // ERROR_NON_DOMAIN_SID
	static const apphelpBlock = 1259; // ERROR_APPHELP_BLOCK
	static const accessDisabledByPolicy = 1260; // ERROR_ACCESS_DISABLED_BY_POLICY
	static const regNatConsumption = 1261; // ERROR_REG_NAT_CONSUMPTION
	static const cscshareOffline = 1262; // ERROR_CSCSHARE_OFFLINE
	static const pkinitFailure = 1263; // ERROR_PKINIT_FAILURE
	static const smartcardSubsystemFailure = 1264; // ERROR_SMARTCARD_SUBSYSTEM_FAILURE
	static const downgradeDetected = 1265; // ERROR_DOWNGRADE_DETECTED
	static const machineLocked = 1271; // ERROR_MACHINE_LOCKED
	static const callbackSuppliedInvalidData = 1273; // ERROR_CALLBACK_SUPPLIED_INVALID_DATA
	static const syncForegroundRefreshRequired = 1274; // ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED
	static const driverBlocked = 1275; // ERROR_DRIVER_BLOCKED
	static const invalidImportOfNonDll = 1276; // ERROR_INVALID_IMPORT_OF_NON_DLL
	static const accessDisabledWebblade = 1277; // ERROR_ACCESS_DISABLED_WEBBLADE
	static const accessDisabledWebbladeTamper = 1278; // ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER
	static const recoveryFailure = 1279; // ERROR_RECOVERY_FAILURE
	static const alreadyFiber = 1280; // ERROR_ALREADY_FIBER
	static const alreadyThread = 1281; // ERROR_ALREADY_THREAD
	static const stackBufferOverrun = 1282; // ERROR_STACK_BUFFER_OVERRUN
	static const parameterQuotaExceeded = 1283; // ERROR_PARAMETER_QUOTA_EXCEEDED
	static const debuggerInactive = 1284; // ERROR_DEBUGGER_INACTIVE
	static const delayLoadFailed = 1285; // ERROR_DELAY_LOAD_FAILED
	static const vdmDisallowed = 1286; // ERROR_VDM_DISALLOWED
	static const unidentifiedError = 1287; // ERROR_UNIDENTIFIED_ERROR
	static const invalidCruntimeParameter = 1288; // ERROR_INVALID_CRUNTIME_PARAMETER
	static const beyondVdl = 1289; // ERROR_BEYOND_VDL
	static const incompatibleServiceSidType = 1290; // ERROR_INCOMPATIBLE_SERVICE_SID_TYPE
	static const driverProcessTerminated = 1291; // ERROR_DRIVER_PROCESS_TERMINATED
	static const implementationLimit = 1292; // ERROR_IMPLEMENTATION_LIMIT
	static const processIsProtected = 1293; // ERROR_PROCESS_IS_PROTECTED
	static const serviceNotifyClientLagging = 1294; // ERROR_SERVICE_NOTIFY_CLIENT_LAGGING
	static const diskQuotaExceeded = 1295; // ERROR_DISK_QUOTA_EXCEEDED
	static const contentBlocked = 1296; // ERROR_CONTENT_BLOCKED
	static const incompatibleServicePrivilege = 1297; // ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE
	static const appHang = 1298; // ERROR_APP_HANG
	static const invalidLabel = 1299; // ERROR_INVALID_LABEL
}
