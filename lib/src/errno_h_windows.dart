
// SPDX-FileCopyrightText: (c) 2021 Art Galkin <github.com/rtmigo>
// SPDX-License-Identifier: BSD-3-Clause
//
// This is an incomplete list of Windows error codes, compiled 
// from multiple incomplete sources.

/// These numbers can usually be found in the [OSError.errorCode]
/// property value, when the Dart/Flutter app runs on Windows platform. 
class WindowsErrno {

	static const errorSuccess = 0; // ERROR_SUCCESS
	static const errorInvalidFunction = 1; // ERROR_INVALID_FUNCTION
	static const errorFileNotFound = 2; // ERROR_FILE_NOT_FOUND
	static const errorPathNotFound = 3; // ERROR_PATH_NOT_FOUND
	static const errorTooManyOpenFiles = 4; // ERROR_TOO_MANY_OPEN_FILES
	static const errorAccessDenied = 5; // ERROR_ACCESS_DENIED
	static const errorInvalidHandle = 6; // ERROR_INVALID_HANDLE
	static const errorArenaTrashed = 7; // ERROR_ARENA_TRASHED
	static const errorNotEnoughMemory = 8; // ERROR_NOT_ENOUGH_MEMORY
	static const errorInvalidBlock = 9; // ERROR_INVALID_BLOCK
	static const errorBadEnvironment = 10; // ERROR_BAD_ENVIRONMENT
	static const errorBadFormat = 11; // ERROR_BAD_FORMAT
	static const errorInvalidAccess = 12; // ERROR_INVALID_ACCESS
	static const errorInvalidData = 13; // ERROR_INVALID_DATA
	static const errorOutofmemory = 14; // ERROR_OUTOFMEMORY
	static const errorInvalidDrive = 15; // ERROR_INVALID_DRIVE
	static const errorCurrentDirectory = 16; // ERROR_CURRENT_DIRECTORY
	static const errorNotSameDevice = 17; // ERROR_NOT_SAME_DEVICE
	static const errorNoMoreFiles = 18; // ERROR_NO_MORE_FILES
	static const errorWriteProtect = 19; // ERROR_WRITE_PROTECT
	static const errorBadUnit = 20; // ERROR_BAD_UNIT
	static const errorNotReady = 21; // ERROR_NOT_READY
	static const errorBadCommand = 22; // ERROR_BAD_COMMAND
	static const errorCrc = 23; // ERROR_CRC
	static const errorBadLength = 24; // ERROR_BAD_LENGTH
	static const errorSeek = 25; // ERROR_SEEK
	static const errorNotDosDisk = 26; // ERROR_NOT_DOS_DISK
	static const errorSectorNotFound = 27; // ERROR_SECTOR_NOT_FOUND
	static const errorOutOfPaper = 28; // ERROR_OUT_OF_PAPER
	static const errorWriteFault = 29; // ERROR_WRITE_FAULT
	static const errorReadFault = 30; // ERROR_READ_FAULT
	static const errorGenFailure = 31; // ERROR_GEN_FAILURE
	static const errorSharingViolation = 32; // ERROR_SHARING_VIOLATION
	static const errorLockViolation = 33; // ERROR_LOCK_VIOLATION
	static const errorWrongDisk = 34; // ERROR_WRONG_DISK
	static const errorSharingBufferExceeded = 36; // ERROR_SHARING_BUFFER_EXCEEDED
	static const errorHandleEof = 38; // ERROR_HANDLE_EOF
	static const errorHandleDiskFull = 39; // ERROR_HANDLE_DISK_FULL
	static const errorNotSupported = 50; // ERROR_NOT_SUPPORTED
	static const errorRemNotList = 51; // ERROR_REM_NOT_LIST
	static const errorDupName = 52; // ERROR_DUP_NAME
	static const errorBadNetpath = 53; // ERROR_BAD_NETPATH
	static const errorNetworkBusy = 54; // ERROR_NETWORK_BUSY
	static const errorDevNotExist = 55; // ERROR_DEV_NOT_EXIST
	static const errorTooManyCmds = 56; // ERROR_TOO_MANY_CMDS
	static const errorAdapHdwErr = 57; // ERROR_ADAP_HDW_ERR
	static const errorBadNetResp = 58; // ERROR_BAD_NET_RESP
	static const errorUnexpNetErr = 59; // ERROR_UNEXP_NET_ERR
	static const errorBadRemAdap = 60; // ERROR_BAD_REM_ADAP
	static const errorPrintqFull = 61; // ERROR_PRINTQ_FULL
	static const errorNoSpoolSpace = 62; // ERROR_NO_SPOOL_SPACE
	static const errorPrintCancelled = 63; // ERROR_PRINT_CANCELLED
	static const errorNetnameDeleted = 64; // ERROR_NETNAME_DELETED
	static const errorNetworkAccessDenied = 65; // ERROR_NETWORK_ACCESS_DENIED
	static const errorBadDevType = 66; // ERROR_BAD_DEV_TYPE
	static const errorBadNetName = 67; // ERROR_BAD_NET_NAME
	static const errorTooManyNames = 68; // ERROR_TOO_MANY_NAMES
	static const errorTooManySess = 69; // ERROR_TOO_MANY_SESS
	static const errorSharingPaused = 70; // ERROR_SHARING_PAUSED
	static const errorReqNotAccep = 71; // ERROR_REQ_NOT_ACCEP
	static const errorRedirPaused = 72; // ERROR_REDIR_PAUSED
	static const errorFileExists = 80; // ERROR_FILE_EXISTS
	static const errorCannotMake = 82; // ERROR_CANNOT_MAKE
	static const errorFailI24 = 83; // ERROR_FAIL_I24
	static const errorOutOfStructures = 84; // ERROR_OUT_OF_STRUCTURES
	static const errorAlreadyAssigned = 85; // ERROR_ALREADY_ASSIGNED
	static const errorInvalidPassword = 86; // ERROR_INVALID_PASSWORD
	static const errorInvalidParameter = 87; // ERROR_INVALID_PARAMETER
	static const errorNetWriteFault = 88; // ERROR_NET_WRITE_FAULT
	static const errorNoProcSlots = 89; // ERROR_NO_PROC_SLOTS
	static const errorTooManySemaphores = 100; // ERROR_TOO_MANY_SEMAPHORES
	static const errorExclSemAlreadyOwned = 101; // ERROR_EXCL_SEM_ALREADY_OWNED
	static const errorSemIsSet = 102; // ERROR_SEM_IS_SET
	static const errorTooManySemRequests = 103; // ERROR_TOO_MANY_SEM_REQUESTS
	static const errorInvalidAtInterruptTime = 104; // ERROR_INVALID_AT_INTERRUPT_TIME
	static const errorSemOwnerDied = 105; // ERROR_SEM_OWNER_DIED
	static const errorSemUserLimit = 106; // ERROR_SEM_USER_LIMIT
	static const errorDiskChange = 107; // ERROR_DISK_CHANGE
	static const errorDriveLocked = 108; // ERROR_DRIVE_LOCKED
	static const errorBrokenPipe = 109; // ERROR_BROKEN_PIPE
	static const errorOpenFailed = 110; // ERROR_OPEN_FAILED
	static const errorBufferOverflow = 111; // ERROR_BUFFER_OVERFLOW
	static const errorDiskFull = 112; // ERROR_DISK_FULL
	static const errorNoMoreSearchHandles = 113; // ERROR_NO_MORE_SEARCH_HANDLES
	static const errorInvalidTargetHandle = 114; // ERROR_INVALID_TARGET_HANDLE
	static const errorInvalidCategory = 117; // ERROR_INVALID_CATEGORY
	static const errorInvalidVerifySwitch = 118; // ERROR_INVALID_VERIFY_SWITCH
	static const errorBadDriverLevel = 119; // ERROR_BAD_DRIVER_LEVEL
	static const errorCallNotImplemented = 120; // ERROR_CALL_NOT_IMPLEMENTED
	static const errorSemTimeout = 121; // ERROR_SEM_TIMEOUT
	static const errorInsufficientBuffer = 122; // ERROR_INSUFFICIENT_BUFFER
	static const errorInvalidName = 123; // ERROR_INVALID_NAME
	static const errorInvalidLevel = 124; // ERROR_INVALID_LEVEL
	static const errorNoVolumeLabel = 125; // ERROR_NO_VOLUME_LABEL
	static const errorModNotFound = 126; // ERROR_MOD_NOT_FOUND
	static const errorProcNotFound = 127; // ERROR_PROC_NOT_FOUND
	static const errorWaitNoChildren = 128; // ERROR_WAIT_NO_CHILDREN
	static const errorChildNotComplete = 129; // ERROR_CHILD_NOT_COMPLETE
	static const errorDirectAccessHandle = 130; // ERROR_DIRECT_ACCESS_HANDLE
	static const errorNegativeSeek = 131; // ERROR_NEGATIVE_SEEK
	static const errorSeekOnDevice = 132; // ERROR_SEEK_ON_DEVICE
	static const errorIsJoinTarget = 133; // ERROR_IS_JOIN_TARGET
	static const errorIsJoined = 134; // ERROR_IS_JOINED
	static const errorIsSubsted = 135; // ERROR_IS_SUBSTED
	static const errorNotJoined = 136; // ERROR_NOT_JOINED
	static const errorNotSubsted = 137; // ERROR_NOT_SUBSTED
	static const errorJoinToJoin = 138; // ERROR_JOIN_TO_JOIN
	static const errorSubstToSubst = 139; // ERROR_SUBST_TO_SUBST
	static const errorJoinToSubst = 140; // ERROR_JOIN_TO_SUBST
	static const errorSubstToJoin = 141; // ERROR_SUBST_TO_JOIN
	static const errorBusyDrive = 142; // ERROR_BUSY_DRIVE
	static const errorSameDrive = 143; // ERROR_SAME_DRIVE
	static const errorDirNotRoot = 144; // ERROR_DIR_NOT_ROOT
	static const errorDirNotEmpty = 145; // ERROR_DIR_NOT_EMPTY
	static const errorIsSubstPath = 146; // ERROR_IS_SUBST_PATH
	static const errorIsJoinPath = 147; // ERROR_IS_JOIN_PATH
	static const errorPathBusy = 148; // ERROR_PATH_BUSY
	static const errorIsSubstTarget = 149; // ERROR_IS_SUBST_TARGET
	static const errorSystemTrace = 150; // ERROR_SYSTEM_TRACE
	static const errorInvalidEventCount = 151; // ERROR_INVALID_EVENT_COUNT
	static const errorTooManyMuxwaiters = 152; // ERROR_TOO_MANY_MUXWAITERS
	static const errorInvalidListFormat = 153; // ERROR_INVALID_LIST_FORMAT
	static const errorLabelTooLong = 154; // ERROR_LABEL_TOO_LONG
	static const errorTooManyTcbs = 155; // ERROR_TOO_MANY_TCBS
	static const errorSignalRefused = 156; // ERROR_SIGNAL_REFUSED
	static const errorDiscarded = 157; // ERROR_DISCARDED
	static const errorNotLocked = 158; // ERROR_NOT_LOCKED
	static const errorBadThreadidAddr = 159; // ERROR_BAD_THREADID_ADDR
	static const errorBadArguments = 160; // ERROR_BAD_ARGUMENTS
	static const errorBadPathname = 161; // ERROR_BAD_PATHNAME
	static const errorSignalPending = 162; // ERROR_SIGNAL_PENDING
	static const errorMaxThrdsReached = 164; // ERROR_MAX_THRDS_REACHED
	static const errorLockFailed = 167; // ERROR_LOCK_FAILED
	static const errorBusy = 170; // ERROR_BUSY
	static const errorDeviceSupportInProgress = 171; // ERROR_DEVICE_SUPPORT_IN_PROGRESS
	static const errorCancelViolation = 173; // ERROR_CANCEL_VIOLATION
	static const errorAtomicLocksNotSupported = 174; // ERROR_ATOMIC_LOCKS_NOT_SUPPORTED
	static const errorInvalidSegmentNumber = 180; // ERROR_INVALID_SEGMENT_NUMBER
	static const errorInvalidOrdinal = 182; // ERROR_INVALID_ORDINAL
	static const errorAlreadyExists = 183; // ERROR_ALREADY_EXISTS
	static const errorInvalidFlagNumber = 186; // ERROR_INVALID_FLAG_NUMBER
	static const errorSemNotFound = 187; // ERROR_SEM_NOT_FOUND
	static const errorInvalidStartingCodeseg = 188; // ERROR_INVALID_STARTING_CODESEG
	static const errorInvalidStackseg = 189; // ERROR_INVALID_STACKSEG
	static const errorInvalidModuletype = 190; // ERROR_INVALID_MODULETYPE
	static const errorInvalidExeSignature = 191; // ERROR_INVALID_EXE_SIGNATURE
	static const errorExeMarkedInvalid = 192; // ERROR_EXE_MARKED_INVALID
	static const errorBadExeFormat = 193; // ERROR_BAD_EXE_FORMAT
	static const errorIteratedDataExceeds64K = 194; // ERROR_ITERATED_DATA_EXCEEDS_64k
	static const errorInvalidMinallocsize = 195; // ERROR_INVALID_MINALLOCSIZE
	static const errorDynlinkFromInvalidRing = 196; // ERROR_DYNLINK_FROM_INVALID_RING
	static const errorIoplNotEnabled = 197; // ERROR_IOPL_NOT_ENABLED
	static const errorInvalidSegdpl = 198; // ERROR_INVALID_SEGDPL
	static const errorAutodatasegExceeds64K = 199; // ERROR_AUTODATASEG_EXCEEDS_64k
	static const errorRing2SegMustBeMovable = 200; // ERROR_RING2SEG_MUST_BE_MOVABLE
	static const errorRelocChainXeedsSeglim = 201; // ERROR_RELOC_CHAIN_XEEDS_SEGLIM
	static const errorInfloopInRelocChain = 202; // ERROR_INFLOOP_IN_RELOC_CHAIN
	static const errorEnvvarNotFound = 203; // ERROR_ENVVAR_NOT_FOUND
	static const errorNoSignalSent = 205; // ERROR_NO_SIGNAL_SENT
	static const errorFilenameExcedRange = 206; // ERROR_FILENAME_EXCED_RANGE
	static const errorRing2StackInUse = 207; // ERROR_RING2_STACK_IN_USE
	static const errorMetaExpansionTooLong = 208; // ERROR_META_EXPANSION_TOO_LONG
	static const errorInvalidSignalNumber = 209; // ERROR_INVALID_SIGNAL_NUMBER
	static const errorThread1Inactive = 210; // ERROR_THREAD_1_INACTIVE
	static const errorLocked = 212; // ERROR_LOCKED
	static const errorTooManyModules = 214; // ERROR_TOO_MANY_MODULES
	static const errorNestingNotAllowed = 215; // ERROR_NESTING_NOT_ALLOWED
	static const errorExeMachineTypeMismatch = 216; // ERROR_EXE_MACHINE_TYPE_MISMATCH
	static const errorExeCannotModifySignedBinary = 217; // ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY
	static const errorExeCannotModifyStrongSignedBinary = 218; // ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY
	static const errorFileCheckedOut = 220; // ERROR_FILE_CHECKED_OUT
	static const errorCheckoutRequired = 221; // ERROR_CHECKOUT_REQUIRED
	static const errorBadFileType = 222; // ERROR_BAD_FILE_TYPE
	static const errorFileTooLarge = 223; // ERROR_FILE_TOO_LARGE
	static const errorFormsAuthRequired = 224; // ERROR_FORMS_AUTH_REQUIRED
	static const errorVirusInfected = 225; // ERROR_VIRUS_INFECTED
	static const errorVirusDeleted = 226; // ERROR_VIRUS_DELETED
	static const errorPipeLocal = 229; // ERROR_PIPE_LOCAL
	static const errorBadPipe = 230; // ERROR_BAD_PIPE
	static const errorPipeBusy = 231; // ERROR_PIPE_BUSY
	static const errorNoData = 232; // ERROR_NO_DATA
	static const errorPipeNotConnected = 233; // ERROR_PIPE_NOT_CONNECTED
	static const errorMoreData = 234; // ERROR_MORE_DATA
	static const errorVcDisconnected = 240; // ERROR_VC_DISCONNECTED
	static const errorInvalidEaName = 254; // ERROR_INVALID_EA_NAME
	static const errorEaListInconsistent = 255; // ERROR_EA_LIST_INCONSISTENT
	static const waitTimeout = 258; // WAIT_TIMEOUT
	static const errorNoMoreItems = 259; // ERROR_NO_MORE_ITEMS
	static const errorCannotCopy = 266; // ERROR_CANNOT_COPY
	static const errorDirectory = 267; // ERROR_DIRECTORY
	static const errorEasDidntFit = 275; // ERROR_EAS_DIDNT_FIT
	static const errorEaFileCorrupt = 276; // ERROR_EA_FILE_CORRUPT
	static const errorEaTableFull = 277; // ERROR_EA_TABLE_FULL
	static const errorInvalidEaHandle = 278; // ERROR_INVALID_EA_HANDLE
	static const errorEasNotSupported = 282; // ERROR_EAS_NOT_SUPPORTED
	static const errorNotOwner = 288; // ERROR_NOT_OWNER
	static const errorTooManyPosts = 298; // ERROR_TOO_MANY_POSTS
	static const errorPartialCopy = 299; // ERROR_PARTIAL_COPY
	static const errorOplockNotGranted = 300; // ERROR_OPLOCK_NOT_GRANTED
	static const errorInvalidOplockProtocol = 301; // ERROR_INVALID_OPLOCK_PROTOCOL
	static const errorDiskTooFragmented = 302; // ERROR_DISK_TOO_FRAGMENTED
	static const errorDeletePending = 303; // ERROR_DELETE_PENDING
	static const errorIncompatibleWithGlobalShortNameRegistrySetting = 304; // ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING
	static const errorShortNamesNotEnabledOnVolume = 305; // ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME
	static const errorSecurityStreamIsInconsistent = 306; // ERROR_SECURITY_STREAM_IS_INCONSISTENT
	static const errorInvalidLockRange = 307; // ERROR_INVALID_LOCK_RANGE
	static const errorImageSubsystemNotPresent = 308; // ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT
	static const errorNotificationGuidAlreadyDefined = 309; // ERROR_NOTIFICATION_GUID_ALREADY_DEFINED
	static const errorInvalidExceptionHandler = 310; // ERROR_INVALID_EXCEPTION_HANDLER
	static const errorDuplicatePrivileges = 311; // ERROR_DUPLICATE_PRIVILEGES
	static const errorNoRangesProcessed = 312; // ERROR_NO_RANGES_PROCESSED
	static const errorNotAllowedOnSystemFile = 313; // ERROR_NOT_ALLOWED_ON_SYSTEM_FILE
	static const errorDiskResourcesExhausted = 314; // ERROR_DISK_RESOURCES_EXHAUSTED
	static const errorInvalidToken = 315; // ERROR_INVALID_TOKEN
	static const errorDeviceFeatureNotSupported = 316; // ERROR_DEVICE_FEATURE_NOT_SUPPORTED
	static const errorMrMidNotFound = 317; // ERROR_MR_MID_NOT_FOUND
	static const errorScopeNotFound = 318; // ERROR_SCOPE_NOT_FOUND
	static const errorUndefinedScope = 319; // ERROR_UNDEFINED_SCOPE
	static const errorInvalidCap = 320; // ERROR_INVALID_CAP
	static const errorDeviceUnreachable = 321; // ERROR_DEVICE_UNREACHABLE
	static const errorDeviceNoResources = 322; // ERROR_DEVICE_NO_RESOURCES
	static const errorDataChecksumError = 323; // ERROR_DATA_CHECKSUM_ERROR
	static const errorIntermixedKernelEaOperation = 324; // ERROR_INTERMIXED_KERNEL_EA_OPERATION
	static const errorFileLevelTrimNotSupported = 326; // ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED
	static const errorOffsetAlignmentViolation = 327; // ERROR_OFFSET_ALIGNMENT_VIOLATION
	static const errorInvalidFieldInParameterList = 328; // ERROR_INVALID_FIELD_IN_PARAMETER_LIST
	static const errorOperationInProgress = 329; // ERROR_OPERATION_IN_PROGRESS
	static const errorBadDevicePath = 330; // ERROR_BAD_DEVICE_PATH
	static const errorTooManyDescriptors = 331; // ERROR_TOO_MANY_DESCRIPTORS
	static const errorScrubDataDisabled = 332; // ERROR_SCRUB_DATA_DISABLED
	static const errorNotRedundantStorage = 333; // ERROR_NOT_REDUNDANT_STORAGE
	static const errorResidentFileNotSupported = 334; // ERROR_RESIDENT_FILE_NOT_SUPPORTED
	static const errorCompressedFileNotSupported = 335; // ERROR_COMPRESSED_FILE_NOT_SUPPORTED
	static const errorDirectoryNotSupported = 336; // ERROR_DIRECTORY_NOT_SUPPORTED
	static const errorNotReadFromCopy = 337; // ERROR_NOT_READ_FROM_COPY
	static const errorFailNoactionReboot = 350; // ERROR_FAIL_NOACTION_REBOOT
	static const errorFailShutdown = 351; // ERROR_FAIL_SHUTDOWN
	static const errorFailRestart = 352; // ERROR_FAIL_RESTART
	static const errorMaxSessionsReached = 353; // ERROR_MAX_SESSIONS_REACHED
	static const errorThreadModeAlreadyBackground = 400; // ERROR_THREAD_MODE_ALREADY_BACKGROUND
	static const errorThreadModeNotBackground = 401; // ERROR_THREAD_MODE_NOT_BACKGROUND
	static const errorProcessModeAlreadyBackground = 402; // ERROR_PROCESS_MODE_ALREADY_BACKGROUND
	static const errorProcessModeNotBackground = 403; // ERROR_PROCESS_MODE_NOT_BACKGROUND
	static const errorInvalidAddress = 487; // ERROR_INVALID_ADDRESS
	static const errorUserProfileLoad = 500; // ERROR_USER_PROFILE_LOAD
	static const errorArithmeticOverflow = 534; // ERROR_ARITHMETIC_OVERFLOW
	static const errorPipeConnected = 535; // ERROR_PIPE_CONNECTED
	static const errorPipeListening = 536; // ERROR_PIPE_LISTENING
	static const errorVerifierStop = 537; // ERROR_VERIFIER_STOP
	static const errorAbiosError = 538; // ERROR_ABIOS_ERROR
	static const errorWx86Warning = 539; // ERROR_WX86_WARNING
	static const errorWx86Error = 540; // ERROR_WX86_ERROR
	static const errorTimerNotCanceled = 541; // ERROR_TIMER_NOT_CANCELED
	static const errorUnwind = 542; // ERROR_UNWIND
	static const errorBadStack = 543; // ERROR_BAD_STACK
	static const errorInvalidUnwindTarget = 544; // ERROR_INVALID_UNWIND_TARGET
	static const errorInvalidPortAttributes = 545; // ERROR_INVALID_PORT_ATTRIBUTES
	static const errorPortMessageTooLong = 546; // ERROR_PORT_MESSAGE_TOO_LONG
	static const errorInvalidQuotaLower = 547; // ERROR_INVALID_QUOTA_LOWER
	static const errorDeviceAlreadyAttached = 548; // ERROR_DEVICE_ALREADY_ATTACHED
	static const errorInstructionMisalignment = 549; // ERROR_INSTRUCTION_MISALIGNMENT
	static const errorProfilingNotStarted = 550; // ERROR_PROFILING_NOT_STARTED
	static const errorProfilingNotStopped = 551; // ERROR_PROFILING_NOT_STOPPED
	static const errorCouldNotInterpret = 552; // ERROR_COULD_NOT_INTERPRET
	static const errorProfilingAtLimit = 553; // ERROR_PROFILING_AT_LIMIT
	static const errorCantWait = 554; // ERROR_CANT_WAIT
	static const errorCantTerminateSelf = 555; // ERROR_CANT_TERMINATE_SELF
	static const errorUnexpectedMmCreateErr = 556; // ERROR_UNEXPECTED_MM_CREATE_ERR
	static const errorUnexpectedMmMapError = 557; // ERROR_UNEXPECTED_MM_MAP_ERROR
	static const errorUnexpectedMmExtendErr = 558; // ERROR_UNEXPECTED_MM_EXTEND_ERR
	static const errorBadFunctionTable = 559; // ERROR_BAD_FUNCTION_TABLE
	static const errorNoGuidTranslation = 560; // ERROR_NO_GUID_TRANSLATION
	static const errorInvalidLdtSize = 561; // ERROR_INVALID_LDT_SIZE
	static const errorInvalidLdtOffset = 563; // ERROR_INVALID_LDT_OFFSET
	static const errorInvalidLdtDescriptor = 564; // ERROR_INVALID_LDT_DESCRIPTOR
	static const errorTooManyThreads = 565; // ERROR_TOO_MANY_THREADS
	static const errorThreadNotInProcess = 566; // ERROR_THREAD_NOT_IN_PROCESS
	static const errorPagefileQuotaExceeded = 567; // ERROR_PAGEFILE_QUOTA_EXCEEDED
	static const errorLogonServerConflict = 568; // ERROR_LOGON_SERVER_CONFLICT
	static const errorSynchronizationRequired = 569; // ERROR_SYNCHRONIZATION_REQUIRED
	static const errorNetOpenFailed = 570; // ERROR_NET_OPEN_FAILED
	static const errorIoPrivilegeFailed = 571; // ERROR_IO_PRIVILEGE_FAILED
	static const errorControlCExit = 572; // ERROR_CONTROL_C_EXIT
	static const errorMissingSystemfile = 573; // ERROR_MISSING_SYSTEMFILE
	static const errorUnhandledException = 574; // ERROR_UNHANDLED_EXCEPTION
	static const errorAppInitFailure = 575; // ERROR_APP_INIT_FAILURE
	static const errorPagefileCreateFailed = 576; // ERROR_PAGEFILE_CREATE_FAILED
	static const errorInvalidImageHash = 577; // ERROR_INVALID_IMAGE_HASH
	static const errorNoPagefile = 578; // ERROR_NO_PAGEFILE
	static const errorIllegalFloatContext = 579; // ERROR_ILLEGAL_FLOAT_CONTEXT
	static const errorNoEventPair = 580; // ERROR_NO_EVENT_PAIR
	static const errorDomainCtrlrConfigError = 581; // ERROR_DOMAIN_CTRLR_CONFIG_ERROR
	static const errorIllegalCharacter = 582; // ERROR_ILLEGAL_CHARACTER
	static const errorUndefinedCharacter = 583; // ERROR_UNDEFINED_CHARACTER
	static const errorFloppyVolume = 584; // ERROR_FLOPPY_VOLUME
	static const errorBiosFailedToConnectInterrupt = 585; // ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT
	static const errorBackupController = 586; // ERROR_BACKUP_CONTROLLER
	static const errorMutantLimitExceeded = 587; // ERROR_MUTANT_LIMIT_EXCEEDED
	static const errorFsDriverRequired = 588; // ERROR_FS_DRIVER_REQUIRED
	static const errorCannotLoadRegistryFile = 589; // ERROR_CANNOT_LOAD_REGISTRY_FILE
	static const errorDebugAttachFailed = 590; // ERROR_DEBUG_ATTACH_FAILED
	static const errorSystemProcessTerminated = 591; // ERROR_SYSTEM_PROCESS_TERMINATED
	static const errorDataNotAccepted = 592; // ERROR_DATA_NOT_ACCEPTED
	static const errorVdmHardError = 593; // ERROR_VDM_HARD_ERROR
	static const errorDriverCancelTimeout = 594; // ERROR_DRIVER_CANCEL_TIMEOUT
	static const errorReplyMessageMismatch = 595; // ERROR_REPLY_MESSAGE_MISMATCH
	static const errorLostWritebehindData = 596; // ERROR_LOST_WRITEBEHIND_DATA
	static const errorClientServerParametersInvalid = 597; // ERROR_CLIENT_SERVER_PARAMETERS_INVALID
	static const errorNotTinyStream = 598; // ERROR_NOT_TINY_STREAM
	static const errorStackOverflowRead = 599; // ERROR_STACK_OVERFLOW_READ
	static const errorConvertToLarge = 600; // ERROR_CONVERT_TO_LARGE
	static const errorFoundOutOfScope = 601; // ERROR_FOUND_OUT_OF_SCOPE
	static const errorAllocateBucket = 602; // ERROR_ALLOCATE_BUCKET
	static const errorMarshallOverflow = 603; // ERROR_MARSHALL_OVERFLOW
	static const errorInvalidVariant = 604; // ERROR_INVALID_VARIANT
	static const errorBadCompressionBuffer = 605; // ERROR_BAD_COMPRESSION_BUFFER
	static const errorAuditFailed = 606; // ERROR_AUDIT_FAILED
	static const errorTimerResolutionNotSet = 607; // ERROR_TIMER_RESOLUTION_NOT_SET
	static const errorInsufficientLogonInfo = 608; // ERROR_INSUFFICIENT_LOGON_INFO
	static const errorBadDllEntrypoint = 609; // ERROR_BAD_DLL_ENTRYPOINT
	static const errorBadServiceEntrypoint = 610; // ERROR_BAD_SERVICE_ENTRYPOINT
	static const errorIpAddressConflict1 = 611; // ERROR_IP_ADDRESS_CONFLICT1
	static const errorIpAddressConflict2 = 612; // ERROR_IP_ADDRESS_CONFLICT2
	static const errorRegistryQuotaLimit = 613; // ERROR_REGISTRY_QUOTA_LIMIT
	static const errorNoCallbackActive = 614; // ERROR_NO_CALLBACK_ACTIVE
	static const errorPwdTooShort = 615; // ERROR_PWD_TOO_SHORT
	static const errorPwdTooRecent = 616; // ERROR_PWD_TOO_RECENT
	static const errorPwdHistoryConflict = 617; // ERROR_PWD_HISTORY_CONFLICT
	static const errorUnsupportedCompression = 618; // ERROR_UNSUPPORTED_COMPRESSION
	static const errorInvalidHwProfile = 619; // ERROR_INVALID_HW_PROFILE
	static const errorInvalidPlugplayDevicePath = 620; // ERROR_INVALID_PLUGPLAY_DEVICE_PATH
	static const errorQuotaListInconsistent = 621; // ERROR_QUOTA_LIST_INCONSISTENT
	static const errorEvaluationExpiration = 622; // ERROR_EVALUATION_EXPIRATION
	static const errorIllegalDllRelocation = 623; // ERROR_ILLEGAL_DLL_RELOCATION
	static const errorDllInitFailedLogoff = 624; // ERROR_DLL_INIT_FAILED_LOGOFF
	static const errorValidateContinue = 625; // ERROR_VALIDATE_CONTINUE
	static const errorNoMoreMatches = 626; // ERROR_NO_MORE_MATCHES
	static const errorRangeListConflict = 627; // ERROR_RANGE_LIST_CONFLICT
	static const errorServerSidMismatch = 628; // ERROR_SERVER_SID_MISMATCH
	static const errorCantEnableDenyOnly = 629; // ERROR_CANT_ENABLE_DENY_ONLY
	static const errorFloatMultipleFaults = 630; // ERROR_FLOAT_MULTIPLE_FAULTS
	static const errorFloatMultipleTraps = 631; // ERROR_FLOAT_MULTIPLE_TRAPS
	static const errorNointerface = 632; // ERROR_NOINTERFACE
	static const errorDriverFailedSleep = 633; // ERROR_DRIVER_FAILED_SLEEP
	static const errorCorruptSystemFile = 634; // ERROR_CORRUPT_SYSTEM_FILE
	static const errorCommitmentMinimum = 635; // ERROR_COMMITMENT_MINIMUM
	static const errorPnpRestartEnumeration = 636; // ERROR_PNP_RESTART_ENUMERATION
	static const errorSystemImageBadSignature = 637; // ERROR_SYSTEM_IMAGE_BAD_SIGNATURE
	static const errorPnpRebootRequired = 638; // ERROR_PNP_REBOOT_REQUIRED
	static const errorInsufficientPower = 639; // ERROR_INSUFFICIENT_POWER
	static const errorMultipleFaultViolation = 640; // ERROR_MULTIPLE_FAULT_VIOLATION
	static const errorSystemShutdown = 641; // ERROR_SYSTEM_SHUTDOWN
	static const errorPortNotSet = 642; // ERROR_PORT_NOT_SET
	static const errorDsVersionCheckFailure = 643; // ERROR_DS_VERSION_CHECK_FAILURE
	static const errorRangeNotFound = 644; // ERROR_RANGE_NOT_FOUND
	static const errorNotSafeModeDriver = 646; // ERROR_NOT_SAFE_MODE_DRIVER
	static const errorFailedDriverEntry = 647; // ERROR_FAILED_DRIVER_ENTRY
	static const errorDeviceEnumerationError = 648; // ERROR_DEVICE_ENUMERATION_ERROR
	static const errorMountPointNotResolved = 649; // ERROR_MOUNT_POINT_NOT_RESOLVED
	static const errorInvalidDeviceObjectParameter = 650; // ERROR_INVALID_DEVICE_OBJECT_PARAMETER
	static const errorMcaOccured = 651; // ERROR_MCA_OCCURED
	static const errorDriverDatabaseError = 652; // ERROR_DRIVER_DATABASE_ERROR
	static const errorSystemHiveTooLarge = 653; // ERROR_SYSTEM_HIVE_TOO_LARGE
	static const errorDriverFailedPriorUnload = 654; // ERROR_DRIVER_FAILED_PRIOR_UNLOAD
	static const errorVolsnapPrepareHibernate = 655; // ERROR_VOLSNAP_PREPARE_HIBERNATE
	static const errorHibernationFailure = 656; // ERROR_HIBERNATION_FAILURE
	static const errorPwdTooLong = 657; // ERROR_PWD_TOO_LONG
	static const errorFileSystemLimitation = 665; // ERROR_FILE_SYSTEM_LIMITATION
	static const errorAssertionFailure = 668; // ERROR_ASSERTION_FAILURE
	static const errorAcpiError = 669; // ERROR_ACPI_ERROR
	static const errorWowAssertion = 670; // ERROR_WOW_ASSERTION
	static const errorPnpBadMpsTable = 671; // ERROR_PNP_BAD_MPS_TABLE
	static const errorPnpTranslationFailed = 672; // ERROR_PNP_TRANSLATION_FAILED
	static const errorPnpIrqTranslationFailed = 673; // ERROR_PNP_IRQ_TRANSLATION_FAILED
	static const errorPnpInvalidId = 674; // ERROR_PNP_INVALID_ID
	static const errorWakeSystemDebugger = 675; // ERROR_WAKE_SYSTEM_DEBUGGER
	static const errorHandlesClosed = 676; // ERROR_HANDLES_CLOSED
	static const errorExtraneousInformation = 677; // ERROR_EXTRANEOUS_INFORMATION
	static const errorRxactCommitNecessary = 678; // ERROR_RXACT_COMMIT_NECESSARY
	static const errorMediaCheck = 679; // ERROR_MEDIA_CHECK
	static const errorGuidSubstitutionMade = 680; // ERROR_GUID_SUBSTITUTION_MADE
	static const errorStoppedOnSymlink = 681; // ERROR_STOPPED_ON_SYMLINK
	static const errorLongjump = 682; // ERROR_LONGJUMP
	static const errorPlugplayQueryVetoed = 683; // ERROR_PLUGPLAY_QUERY_VETOED
	static const errorUnwindConsolidate = 684; // ERROR_UNWIND_CONSOLIDATE
	static const errorRegistryHiveRecovered = 685; // ERROR_REGISTRY_HIVE_RECOVERED
	static const errorDllMightBeInsecure = 686; // ERROR_DLL_MIGHT_BE_INSECURE
	static const errorDllMightBeIncompatible = 687; // ERROR_DLL_MIGHT_BE_INCOMPATIBLE
	static const errorDbgExceptionNotHandled = 688; // ERROR_DBG_EXCEPTION_NOT_HANDLED
	static const errorDbgReplyLater = 689; // ERROR_DBG_REPLY_LATER
	static const errorDbgUnableToProvideHandle = 690; // ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE
	static const errorDbgTerminateThread = 691; // ERROR_DBG_TERMINATE_THREAD
	static const errorDbgTerminateProcess = 692; // ERROR_DBG_TERMINATE_PROCESS
	static const errorDbgControlC = 693; // ERROR_DBG_CONTROL_C
	static const errorDbgPrintexceptionC = 694; // ERROR_DBG_PRINTEXCEPTION_C
	static const errorDbgRipexception = 695; // ERROR_DBG_RIPEXCEPTION
	static const errorDbgControlBreak = 696; // ERROR_DBG_CONTROL_BREAK
	static const errorDbgCommandException = 697; // ERROR_DBG_COMMAND_EXCEPTION
	static const errorObjectNameExists = 698; // ERROR_OBJECT_NAME_EXISTS
	static const errorThreadWasSuspended = 699; // ERROR_THREAD_WAS_SUSPENDED
	static const errorImageNotAtBase = 700; // ERROR_IMAGE_NOT_AT_BASE
	static const errorRxactStateCreated = 701; // ERROR_RXACT_STATE_CREATED
	static const errorSegmentNotification = 702; // ERROR_SEGMENT_NOTIFICATION
	static const errorBadCurrentDirectory = 703; // ERROR_BAD_CURRENT_DIRECTORY
	static const errorFtReadRecoveryFromBackup = 704; // ERROR_FT_READ_RECOVERY_FROM_BACKUP
	static const errorFtWriteRecovery = 705; // ERROR_FT_WRITE_RECOVERY
	static const errorImageMachineTypeMismatch = 706; // ERROR_IMAGE_MACHINE_TYPE_MISMATCH
	static const errorReceivePartial = 707; // ERROR_RECEIVE_PARTIAL
	static const errorReceiveExpedited = 708; // ERROR_RECEIVE_EXPEDITED
	static const errorReceivePartialExpedited = 709; // ERROR_RECEIVE_PARTIAL_EXPEDITED
	static const errorEventDone = 710; // ERROR_EVENT_DONE
	static const errorEventPending = 711; // ERROR_EVENT_PENDING
	static const errorCheckingFileSystem = 712; // ERROR_CHECKING_FILE_SYSTEM
	static const errorFatalAppExit = 713; // ERROR_FATAL_APP_EXIT
	static const errorPredefinedHandle = 714; // ERROR_PREDEFINED_HANDLE
	static const errorWasUnlocked = 715; // ERROR_WAS_UNLOCKED
	static const errorServiceNotification = 716; // ERROR_SERVICE_NOTIFICATION
	static const errorWasLocked = 717; // ERROR_WAS_LOCKED
	static const errorLogHardError = 718; // ERROR_LOG_HARD_ERROR
	static const errorAlreadyWin32 = 719; // ERROR_ALREADY_WIN32
	static const errorImageMachineTypeMismatchExe = 720; // ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE
	static const errorNoYieldPerformed = 721; // ERROR_NO_YIELD_PERFORMED
	static const errorTimerResumeIgnored = 722; // ERROR_TIMER_RESUME_IGNORED
	static const errorArbitrationUnhandled = 723; // ERROR_ARBITRATION_UNHANDLED
	static const errorCardbusNotSupported = 724; // ERROR_CARDBUS_NOT_SUPPORTED
	static const errorMpProcessorMismatch = 725; // ERROR_MP_PROCESSOR_MISMATCH
	static const errorHibernated = 726; // ERROR_HIBERNATED
	static const errorResumeHibernation = 727; // ERROR_RESUME_HIBERNATION
	static const errorFirmwareUpdated = 728; // ERROR_FIRMWARE_UPDATED
	static const errorDriversLeakingLockedPages = 729; // ERROR_DRIVERS_LEAKING_LOCKED_PAGES
	static const errorWakeSystem = 730; // ERROR_WAKE_SYSTEM
	static const errorWait1 = 731; // ERROR_WAIT_1
	static const errorWait2 = 732; // ERROR_WAIT_2
	static const errorWait3 = 733; // ERROR_WAIT_3
	static const errorWait63 = 734; // ERROR_WAIT_63
	static const errorAbandonedWait0 = 735; // ERROR_ABANDONED_WAIT_0
	static const errorAbandonedWait63 = 736; // ERROR_ABANDONED_WAIT_63
	static const errorUserApc = 737; // ERROR_USER_APC
	static const errorKernelApc = 738; // ERROR_KERNEL_APC
	static const errorAlerted = 739; // ERROR_ALERTED
	static const errorElevationRequired = 740; // ERROR_ELEVATION_REQUIRED
	static const errorReparse = 741; // ERROR_REPARSE
	static const errorOplockBreakInProgress = 742; // ERROR_OPLOCK_BREAK_IN_PROGRESS
	static const errorVolumeMounted = 743; // ERROR_VOLUME_MOUNTED
	static const errorRxactCommitted = 744; // ERROR_RXACT_COMMITTED
	static const errorNotifyCleanup = 745; // ERROR_NOTIFY_CLEANUP
	static const errorPrimaryTransportConnectFailed = 746; // ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED
	static const errorPageFaultTransition = 747; // ERROR_PAGE_FAULT_TRANSITION
	static const errorPageFaultDemandZero = 748; // ERROR_PAGE_FAULT_DEMAND_ZERO
	static const errorPageFaultCopyOnWrite = 749; // ERROR_PAGE_FAULT_COPY_ON_WRITE
	static const errorPageFaultGuardPage = 750; // ERROR_PAGE_FAULT_GUARD_PAGE
	static const errorPageFaultPagingFile = 751; // ERROR_PAGE_FAULT_PAGING_FILE
	static const errorCachePageLocked = 752; // ERROR_CACHE_PAGE_LOCKED
	static const errorCrashDump = 753; // ERROR_CRASH_DUMP
	static const errorBufferAllZeros = 754; // ERROR_BUFFER_ALL_ZEROS
	static const errorReparseObject = 755; // ERROR_REPARSE_OBJECT
	static const errorResourceRequirementsChanged = 756; // ERROR_RESOURCE_REQUIREMENTS_CHANGED
	static const errorTranslationComplete = 757; // ERROR_TRANSLATION_COMPLETE
	static const errorNothingToTerminate = 758; // ERROR_NOTHING_TO_TERMINATE
	static const errorProcessNotInJob = 759; // ERROR_PROCESS_NOT_IN_JOB
	static const errorProcessInJob = 760; // ERROR_PROCESS_IN_JOB
	static const errorVolsnapHibernateReady = 761; // ERROR_VOLSNAP_HIBERNATE_READY
	static const errorFsfilterOpCompletedSuccessfully = 762; // ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY
	static const errorInterruptVectorAlreadyConnected = 763; // ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED
	static const errorInterruptStillConnected = 764; // ERROR_INTERRUPT_STILL_CONNECTED
	static const errorWaitForOplock = 765; // ERROR_WAIT_FOR_OPLOCK
	static const errorDbgExceptionHandled = 766; // ERROR_DBG_EXCEPTION_HANDLED
	static const errorDbgContinue = 767; // ERROR_DBG_CONTINUE
	static const errorCallbackPopStack = 768; // ERROR_CALLBACK_POP_STACK
	static const errorCompressionDisabled = 769; // ERROR_COMPRESSION_DISABLED
	static const errorCantfetchbackwards = 770; // ERROR_CANTFETCHBACKWARDS
	static const errorCantscrollbackwards = 771; // ERROR_CANTSCROLLBACKWARDS
	static const errorRowsnotreleased = 772; // ERROR_ROWSNOTRELEASED
	static const errorBadAccessorFlags = 773; // ERROR_BAD_ACCESSOR_FLAGS
	static const errorErrorsEncountered = 774; // ERROR_ERRORS_ENCOUNTERED
	static const errorNotCapable = 775; // ERROR_NOT_CAPABLE
	static const errorRequestOutOfSequence = 776; // ERROR_REQUEST_OUT_OF_SEQUENCE
	static const errorVersionParseError = 777; // ERROR_VERSION_PARSE_ERROR
	static const errorBadstartposition = 778; // ERROR_BADSTARTPOSITION
	static const errorMemoryHardware = 779; // ERROR_MEMORY_HARDWARE
	static const errorDiskRepairDisabled = 780; // ERROR_DISK_REPAIR_DISABLED
	static const errorInsufficientResourceForSpecifiedSharedSectionSize = 781; // ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE
	static const errorSystemPowerstateTransition = 782; // ERROR_SYSTEM_POWERSTATE_TRANSITION
	static const errorSystemPowerstateComplexTransition = 783; // ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION
	static const errorMcaException = 784; // ERROR_MCA_EXCEPTION
	static const errorAccessAuditByPolicy = 785; // ERROR_ACCESS_AUDIT_BY_POLICY
	static const errorAccessDisabledNoSaferUiByPolicy = 786; // ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY
	static const errorAbandonHiberfile = 787; // ERROR_ABANDON_HIBERFILE
	static const errorLostWritebehindDataNetworkDisconnected = 788; // ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED
	static const errorLostWritebehindDataNetworkServerError = 789; // ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR
	static const errorLostWritebehindDataLocalDiskError = 790; // ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR
	static const errorBadMcfgTable = 791; // ERROR_BAD_MCFG_TABLE
	static const errorDiskRepairRedirected = 792; // ERROR_DISK_REPAIR_REDIRECTED
	static const errorDiskRepairUnsuccessful = 793; // ERROR_DISK_REPAIR_UNSUCCESSFUL
	static const errorCorruptLogOverfull = 794; // ERROR_CORRUPT_LOG_OVERFULL
	static const errorCorruptLogCorrupted = 795; // ERROR_CORRUPT_LOG_CORRUPTED
	static const errorCorruptLogUnavailable = 796; // ERROR_CORRUPT_LOG_UNAVAILABLE
	static const errorCorruptLogDeletedFull = 797; // ERROR_CORRUPT_LOG_DELETED_FULL
	static const errorCorruptLogCleared = 798; // ERROR_CORRUPT_LOG_CLEARED
	static const errorOrphanNameExhausted = 799; // ERROR_ORPHAN_NAME_EXHAUSTED
	static const errorOplockSwitchedToNewHandle = 800; // ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE
	static const errorCannotGrantRequestedOplock = 801; // ERROR_CANNOT_GRANT_REQUESTED_OPLOCK
	static const errorCannotBreakOplock = 802; // ERROR_CANNOT_BREAK_OPLOCK
	static const errorOplockHandleClosed = 803; // ERROR_OPLOCK_HANDLE_CLOSED
	static const errorNoAceCondition = 804; // ERROR_NO_ACE_CONDITION
	static const errorInvalidAceCondition = 805; // ERROR_INVALID_ACE_CONDITION
	static const errorFileHandleRevoked = 806; // ERROR_FILE_HANDLE_REVOKED
	static const errorImageAtDifferentBase = 807; // ERROR_IMAGE_AT_DIFFERENT_BASE
	static const errorEaAccessDenied = 994; // ERROR_EA_ACCESS_DENIED
	static const errorOperationAborted = 995; // ERROR_OPERATION_ABORTED
	static const errorIoIncomplete = 996; // ERROR_IO_INCOMPLETE
	static const errorIoPending = 997; // ERROR_IO_PENDING
	static const errorNoaccess = 998; // ERROR_NOACCESS
	static const errorSwaperror = 999; // ERROR_SWAPERROR
	static const errorStackOverflow = 1001; // ERROR_STACK_OVERFLOW
	static const errorInvalidMessage = 1002; // ERROR_INVALID_MESSAGE
	static const errorCanNotComplete = 1003; // ERROR_CAN_NOT_COMPLETE
	static const errorInvalidFlags = 1004; // ERROR_INVALID_FLAGS
	static const errorUnrecognizedVolume = 1005; // ERROR_UNRECOGNIZED_VOLUME
	static const errorFileInvalid = 1006; // ERROR_FILE_INVALID
	static const errorFullscreenMode = 1007; // ERROR_FULLSCREEN_MODE
	static const errorNoToken = 1008; // ERROR_NO_TOKEN
	static const errorBaddb = 1009; // ERROR_BADDB
	static const errorBadkey = 1010; // ERROR_BADKEY
	static const errorCantopen = 1011; // ERROR_CANTOPEN
	static const errorCantread = 1012; // ERROR_CANTREAD
	static const errorCantwrite = 1013; // ERROR_CANTWRITE
	static const errorRegistryRecovered = 1014; // ERROR_REGISTRY_RECOVERED
	static const errorRegistryCorrupt = 1015; // ERROR_REGISTRY_CORRUPT
	static const errorRegistryIoFailed = 1016; // ERROR_REGISTRY_IO_FAILED
	static const errorNotRegistryFile = 1017; // ERROR_NOT_REGISTRY_FILE
	static const errorKeyDeleted = 1018; // ERROR_KEY_DELETED
	static const errorNoLogSpace = 1019; // ERROR_NO_LOG_SPACE
	static const errorKeyHasChildren = 1020; // ERROR_KEY_HAS_CHILDREN
	static const errorChildMustBeVolatile = 1021; // ERROR_CHILD_MUST_BE_VOLATILE
	static const errorNotifyEnumDir = 1022; // ERROR_NOTIFY_ENUM_DIR
	static const errorDependentServicesRunning = 1051; // ERROR_DEPENDENT_SERVICES_RUNNING
	static const errorInvalidServiceControl = 1052; // ERROR_INVALID_SERVICE_CONTROL
	static const errorServiceRequestTimeout = 1053; // ERROR_SERVICE_REQUEST_TIMEOUT
	static const errorServiceNoThread = 1054; // ERROR_SERVICE_NO_THREAD
	static const errorServiceDatabaseLocked = 1055; // ERROR_SERVICE_DATABASE_LOCKED
	static const errorServiceAlreadyRunning = 1056; // ERROR_SERVICE_ALREADY_RUNNING
	static const errorInvalidServiceAccount = 1057; // ERROR_INVALID_SERVICE_ACCOUNT
	static const errorServiceDisabled = 1058; // ERROR_SERVICE_DISABLED
	static const errorCircularDependency = 1059; // ERROR_CIRCULAR_DEPENDENCY
	static const errorServiceDoesNotExist = 1060; // ERROR_SERVICE_DOES_NOT_EXIST
	static const errorServiceCannotAcceptCtrl = 1061; // ERROR_SERVICE_CANNOT_ACCEPT_CTRL
	static const errorServiceNotActive = 1062; // ERROR_SERVICE_NOT_ACTIVE
	static const errorFailedServiceControllerConnect = 1063; // ERROR_FAILED_SERVICE_CONTROLLER_CONNECT
	static const errorExceptionInService = 1064; // ERROR_EXCEPTION_IN_SERVICE
	static const errorDatabaseDoesNotExist = 1065; // ERROR_DATABASE_DOES_NOT_EXIST
	static const errorServiceSpecificError = 1066; // ERROR_SERVICE_SPECIFIC_ERROR
	static const errorProcessAborted = 1067; // ERROR_PROCESS_ABORTED
	static const errorServiceDependencyFail = 1068; // ERROR_SERVICE_DEPENDENCY_FAIL
	static const errorServiceLogonFailed = 1069; // ERROR_SERVICE_LOGON_FAILED
	static const errorServiceStartHang = 1070; // ERROR_SERVICE_START_HANG
	static const errorInvalidServiceLock = 1071; // ERROR_INVALID_SERVICE_LOCK
	static const errorServiceMarkedForDelete = 1072; // ERROR_SERVICE_MARKED_FOR_DELETE
	static const errorServiceExists = 1073; // ERROR_SERVICE_EXISTS
	static const errorAlreadyRunningLkg = 1074; // ERROR_ALREADY_RUNNING_LKG
	static const errorServiceDependencyDeleted = 1075; // ERROR_SERVICE_DEPENDENCY_DELETED
	static const errorBootAlreadyAccepted = 1076; // ERROR_BOOT_ALREADY_ACCEPTED
	static const errorServiceNeverStarted = 1077; // ERROR_SERVICE_NEVER_STARTED
	static const errorDuplicateServiceName = 1078; // ERROR_DUPLICATE_SERVICE_NAME
	static const errorDifferentServiceAccount = 1079; // ERROR_DIFFERENT_SERVICE_ACCOUNT
	static const errorCannotDetectDriverFailure = 1080; // ERROR_CANNOT_DETECT_DRIVER_FAILURE
	static const errorCannotDetectProcessAbort = 1081; // ERROR_CANNOT_DETECT_PROCESS_ABORT
	static const errorNoRecoveryProgram = 1082; // ERROR_NO_RECOVERY_PROGRAM
	static const errorServiceNotInExe = 1083; // ERROR_SERVICE_NOT_IN_EXE
	static const errorNotSafebootService = 1084; // ERROR_NOT_SAFEBOOT_SERVICE
	static const errorEndOfMedia = 1100; // ERROR_END_OF_MEDIA
	static const errorFilemarkDetected = 1101; // ERROR_FILEMARK_DETECTED
	static const errorBeginningOfMedia = 1102; // ERROR_BEGINNING_OF_MEDIA
	static const errorSetmarkDetected = 1103; // ERROR_SETMARK_DETECTED
	static const errorNoDataDetected = 1104; // ERROR_NO_DATA_DETECTED
	static const errorPartitionFailure = 1105; // ERROR_PARTITION_FAILURE
	static const errorInvalidBlockLength = 1106; // ERROR_INVALID_BLOCK_LENGTH
	static const errorDeviceNotPartitioned = 1107; // ERROR_DEVICE_NOT_PARTITIONED
	static const errorUnableToLockMedia = 1108; // ERROR_UNABLE_TO_LOCK_MEDIA
	static const errorUnableToUnloadMedia = 1109; // ERROR_UNABLE_TO_UNLOAD_MEDIA
	static const errorMediaChanged = 1110; // ERROR_MEDIA_CHANGED
	static const errorBusReset = 1111; // ERROR_BUS_RESET
	static const errorNoMediaInDrive = 1112; // ERROR_NO_MEDIA_IN_DRIVE
	static const errorNoUnicodeTranslation = 1113; // ERROR_NO_UNICODE_TRANSLATION
	static const errorDllInitFailed = 1114; // ERROR_DLL_INIT_FAILED
	static const errorShutdownInProgress = 1115; // ERROR_SHUTDOWN_IN_PROGRESS
	static const errorNoShutdownInProgress = 1116; // ERROR_NO_SHUTDOWN_IN_PROGRESS
	static const errorIoDevice = 1117; // ERROR_IO_DEVICE
	static const errorSerialNoDevice = 1118; // ERROR_SERIAL_NO_DEVICE
	static const errorIrqBusy = 1119; // ERROR_IRQ_BUSY
	static const errorMoreWrites = 1120; // ERROR_MORE_WRITES
	static const errorCounterTimeout = 1121; // ERROR_COUNTER_TIMEOUT
	static const errorFloppyIdMarkNotFound = 1122; // ERROR_FLOPPY_ID_MARK_NOT_FOUND
	static const errorFloppyWrongCylinder = 1123; // ERROR_FLOPPY_WRONG_CYLINDER
	static const errorFloppyUnknownError = 1124; // ERROR_FLOPPY_UNKNOWN_ERROR
	static const errorFloppyBadRegisters = 1125; // ERROR_FLOPPY_BAD_REGISTERS
	static const errorDiskRecalibrateFailed = 1126; // ERROR_DISK_RECALIBRATE_FAILED
	static const errorDiskOperationFailed = 1127; // ERROR_DISK_OPERATION_FAILED
	static const errorDiskResetFailed = 1128; // ERROR_DISK_RESET_FAILED
	static const errorEomOverflow = 1129; // ERROR_EOM_OVERFLOW
	static const errorNotEnoughServerMemory = 1130; // ERROR_NOT_ENOUGH_SERVER_MEMORY
	static const errorPossibleDeadlock = 1131; // ERROR_POSSIBLE_DEADLOCK
	static const errorMappedAlignment = 1132; // ERROR_MAPPED_ALIGNMENT
	static const errorSetPowerStateVetoed = 1140; // ERROR_SET_POWER_STATE_VETOED
	static const errorSetPowerStateFailed = 1141; // ERROR_SET_POWER_STATE_FAILED
	static const errorTooManyLinks = 1142; // ERROR_TOO_MANY_LINKS
	static const errorOldWinVersion = 1150; // ERROR_OLD_WIN_VERSION
	static const errorAppWrongOs = 1151; // ERROR_APP_WRONG_OS
	static const errorSingleInstanceApp = 1152; // ERROR_SINGLE_INSTANCE_APP
	static const errorRmodeApp = 1153; // ERROR_RMODE_APP
	static const errorInvalidDll = 1154; // ERROR_INVALID_DLL
	static const errorNoAssociation = 1155; // ERROR_NO_ASSOCIATION
	static const errorDdeFail = 1156; // ERROR_DDE_FAIL
	static const errorDllNotFound = 1157; // ERROR_DLL_NOT_FOUND
	static const errorNoMoreUserHandles = 1158; // ERROR_NO_MORE_USER_HANDLES
	static const errorMessageSyncOnly = 1159; // ERROR_MESSAGE_SYNC_ONLY
	static const errorSourceElementEmpty = 1160; // ERROR_SOURCE_ELEMENT_EMPTY
	static const errorDestinationElementFull = 1161; // ERROR_DESTINATION_ELEMENT_FULL
	static const errorIllegalElementAddress = 1162; // ERROR_ILLEGAL_ELEMENT_ADDRESS
	static const errorMagazineNotPresent = 1163; // ERROR_MAGAZINE_NOT_PRESENT
	static const errorDeviceReinitializationNeeded = 1164; // ERROR_DEVICE_REINITIALIZATION_NEEDED
	static const errorDeviceRequiresCleaning = 1165; // ERROR_DEVICE_REQUIRES_CLEANING
	static const errorDeviceDoorOpen = 1166; // ERROR_DEVICE_DOOR_OPEN
	static const errorDeviceNotConnected = 1167; // ERROR_DEVICE_NOT_CONNECTED
	static const errorNotFound = 1168; // ERROR_NOT_FOUND
	static const errorNoMatch = 1169; // ERROR_NO_MATCH
	static const errorSetNotFound = 1170; // ERROR_SET_NOT_FOUND
	static const errorPointNotFound = 1171; // ERROR_POINT_NOT_FOUND
	static const errorNoTrackingService = 1172; // ERROR_NO_TRACKING_SERVICE
	static const errorNoVolumeId = 1173; // ERROR_NO_VOLUME_ID
	static const errorUnableToRemoveReplaced = 1175; // ERROR_UNABLE_TO_REMOVE_REPLACED
	static const errorUnableToMoveReplacement = 1176; // ERROR_UNABLE_TO_MOVE_REPLACEMENT
	static const errorUnableToMoveReplacement2 = 1177; // ERROR_UNABLE_TO_MOVE_REPLACEMENT_2
	static const errorJournalDeleteInProgress = 1178; // ERROR_JOURNAL_DELETE_IN_PROGRESS
	static const errorJournalNotActive = 1179; // ERROR_JOURNAL_NOT_ACTIVE
	static const errorPotentialFileFound = 1180; // ERROR_POTENTIAL_FILE_FOUND
	static const errorJournalEntryDeleted = 1181; // ERROR_JOURNAL_ENTRY_DELETED
	static const errorShutdownIsScheduled = 1190; // ERROR_SHUTDOWN_IS_SCHEDULED
	static const errorShutdownUsersLoggedOn = 1191; // ERROR_SHUTDOWN_USERS_LOGGED_ON
	static const errorBadDevice = 1200; // ERROR_BAD_DEVICE
	static const errorConnectionUnavail = 1201; // ERROR_CONNECTION_UNAVAIL
	static const errorDeviceAlreadyRemembered = 1202; // ERROR_DEVICE_ALREADY_REMEMBERED
	static const errorNoNetOrBadPath = 1203; // ERROR_NO_NET_OR_BAD_PATH
	static const errorBadProvider = 1204; // ERROR_BAD_PROVIDER
	static const errorCannotOpenProfile = 1205; // ERROR_CANNOT_OPEN_PROFILE
	static const errorBadProfile = 1206; // ERROR_BAD_PROFILE
	static const errorNotContainer = 1207; // ERROR_NOT_CONTAINER
	static const errorExtendedError = 1208; // ERROR_EXTENDED_ERROR
	static const errorInvalidGroupname = 1209; // ERROR_INVALID_GROUPNAME
	static const errorInvalidComputername = 1210; // ERROR_INVALID_COMPUTERNAME
	static const errorInvalidEventname = 1211; // ERROR_INVALID_EVENTNAME
	static const errorInvalidDomainname = 1212; // ERROR_INVALID_DOMAINNAME
	static const errorInvalidServicename = 1213; // ERROR_INVALID_SERVICENAME
	static const errorInvalidNetname = 1214; // ERROR_INVALID_NETNAME
	static const errorInvalidSharename = 1215; // ERROR_INVALID_SHARENAME
	static const errorInvalidPasswordname = 1216; // ERROR_INVALID_PASSWORDNAME
	static const errorInvalidMessagename = 1217; // ERROR_INVALID_MESSAGENAME
	static const errorInvalidMessagedest = 1218; // ERROR_INVALID_MESSAGEDEST
	static const errorSessionCredentialConflict = 1219; // ERROR_SESSION_CREDENTIAL_CONFLICT
	static const errorRemoteSessionLimitExceeded = 1220; // ERROR_REMOTE_SESSION_LIMIT_EXCEEDED
	static const errorDupDomainname = 1221; // ERROR_DUP_DOMAINNAME
	static const errorNoNetwork = 1222; // ERROR_NO_NETWORK
	static const errorCancelled = 1223; // ERROR_CANCELLED
	static const errorUserMappedFile = 1224; // ERROR_USER_MAPPED_FILE
	static const errorConnectionRefused = 1225; // ERROR_CONNECTION_REFUSED
	static const errorGracefulDisconnect = 1226; // ERROR_GRACEFUL_DISCONNECT
	static const errorAddressAlreadyAssociated = 1227; // ERROR_ADDRESS_ALREADY_ASSOCIATED
	static const errorAddressNotAssociated = 1228; // ERROR_ADDRESS_NOT_ASSOCIATED
	static const errorConnectionInvalid = 1229; // ERROR_CONNECTION_INVALID
	static const errorConnectionActive = 1230; // ERROR_CONNECTION_ACTIVE
	static const errorNetworkUnreachable = 1231; // ERROR_NETWORK_UNREACHABLE
	static const errorHostUnreachable = 1232; // ERROR_HOST_UNREACHABLE
	static const errorProtocolUnreachable = 1233; // ERROR_PROTOCOL_UNREACHABLE
	static const errorPortUnreachable = 1234; // ERROR_PORT_UNREACHABLE
	static const errorRequestAborted = 1235; // ERROR_REQUEST_ABORTED
	static const errorConnectionAborted = 1236; // ERROR_CONNECTION_ABORTED
	static const errorRetry = 1237; // ERROR_RETRY
	static const errorConnectionCountLimit = 1238; // ERROR_CONNECTION_COUNT_LIMIT
	static const errorLoginTimeRestriction = 1239; // ERROR_LOGIN_TIME_RESTRICTION
	static const errorLoginWkstaRestriction = 1240; // ERROR_LOGIN_WKSTA_RESTRICTION
	static const errorIncorrectAddress = 1241; // ERROR_INCORRECT_ADDRESS
	static const errorAlreadyRegistered = 1242; // ERROR_ALREADY_REGISTERED
	static const errorServiceNotFound = 1243; // ERROR_SERVICE_NOT_FOUND
	static const errorNotAuthenticated = 1244; // ERROR_NOT_AUTHENTICATED
	static const errorNotLoggedOn = 1245; // ERROR_NOT_LOGGED_ON
	static const errorContinue = 1246; // ERROR_CONTINUE
	static const errorAlreadyInitialized = 1247; // ERROR_ALREADY_INITIALIZED
	static const errorNoMoreDevices = 1248; // ERROR_NO_MORE_DEVICES
	static const errorNoSuchSite = 1249; // ERROR_NO_SUCH_SITE
	static const errorDomainControllerExists = 1250; // ERROR_DOMAIN_CONTROLLER_EXISTS
	static const errorOnlyIfConnected = 1251; // ERROR_ONLY_IF_CONNECTED
	static const errorOverrideNochanges = 1252; // ERROR_OVERRIDE_NOCHANGES
	static const errorBadUserProfile = 1253; // ERROR_BAD_USER_PROFILE
	static const errorNotSupportedOnSbs = 1254; // ERROR_NOT_SUPPORTED_ON_SBS
	static const errorServerShutdownInProgress = 1255; // ERROR_SERVER_SHUTDOWN_IN_PROGRESS
	static const errorHostDown = 1256; // ERROR_HOST_DOWN
	static const errorNonAccountSid = 1257; // ERROR_NON_ACCOUNT_SID
	static const errorNonDomainSid = 1258; // ERROR_NON_DOMAIN_SID
	static const errorApphelpBlock = 1259; // ERROR_APPHELP_BLOCK
	static const errorAccessDisabledByPolicy = 1260; // ERROR_ACCESS_DISABLED_BY_POLICY
	static const errorRegNatConsumption = 1261; // ERROR_REG_NAT_CONSUMPTION
	static const errorCscshareOffline = 1262; // ERROR_CSCSHARE_OFFLINE
	static const errorPkinitFailure = 1263; // ERROR_PKINIT_FAILURE
	static const errorSmartcardSubsystemFailure = 1264; // ERROR_SMARTCARD_SUBSYSTEM_FAILURE
	static const errorDowngradeDetected = 1265; // ERROR_DOWNGRADE_DETECTED
	static const errorMachineLocked = 1271; // ERROR_MACHINE_LOCKED
	static const errorCallbackSuppliedInvalidData = 1273; // ERROR_CALLBACK_SUPPLIED_INVALID_DATA
	static const errorSyncForegroundRefreshRequired = 1274; // ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED
	static const errorDriverBlocked = 1275; // ERROR_DRIVER_BLOCKED
	static const errorInvalidImportOfNonDll = 1276; // ERROR_INVALID_IMPORT_OF_NON_DLL
	static const errorAccessDisabledWebblade = 1277; // ERROR_ACCESS_DISABLED_WEBBLADE
	static const errorAccessDisabledWebbladeTamper = 1278; // ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER
	static const errorRecoveryFailure = 1279; // ERROR_RECOVERY_FAILURE
	static const errorAlreadyFiber = 1280; // ERROR_ALREADY_FIBER
	static const errorAlreadyThread = 1281; // ERROR_ALREADY_THREAD
	static const errorStackBufferOverrun = 1282; // ERROR_STACK_BUFFER_OVERRUN
	static const errorParameterQuotaExceeded = 1283; // ERROR_PARAMETER_QUOTA_EXCEEDED
	static const errorDebuggerInactive = 1284; // ERROR_DEBUGGER_INACTIVE
	static const errorDelayLoadFailed = 1285; // ERROR_DELAY_LOAD_FAILED
	static const errorVdmDisallowed = 1286; // ERROR_VDM_DISALLOWED
	static const errorUnidentifiedError = 1287; // ERROR_UNIDENTIFIED_ERROR
	static const errorInvalidCruntimeParameter = 1288; // ERROR_INVALID_CRUNTIME_PARAMETER
	static const errorBeyondVdl = 1289; // ERROR_BEYOND_VDL
	static const errorIncompatibleServiceSidType = 1290; // ERROR_INCOMPATIBLE_SERVICE_SID_TYPE
	static const errorDriverProcessTerminated = 1291; // ERROR_DRIVER_PROCESS_TERMINATED
	static const errorImplementationLimit = 1292; // ERROR_IMPLEMENTATION_LIMIT
	static const errorProcessIsProtected = 1293; // ERROR_PROCESS_IS_PROTECTED
	static const errorServiceNotifyClientLagging = 1294; // ERROR_SERVICE_NOTIFY_CLIENT_LAGGING
	static const errorDiskQuotaExceeded = 1295; // ERROR_DISK_QUOTA_EXCEEDED
	static const errorContentBlocked = 1296; // ERROR_CONTENT_BLOCKED
	static const errorIncompatibleServicePrivilege = 1297; // ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE
	static const errorAppHang = 1298; // ERROR_APP_HANG
	static const errorInvalidLabel = 1299; // ERROR_INVALID_LABEL
	static const errorNotAllAssigned = 1300; // ERROR_NOT_ALL_ASSIGNED
	static const errorSomeNotMapped = 1301; // ERROR_SOME_NOT_MAPPED
	static const errorNoQuotasForAccount = 1302; // ERROR_NO_QUOTAS_FOR_ACCOUNT
	static const errorLocalUserSessionKey = 1303; // ERROR_LOCAL_USER_SESSION_KEY
	static const errorNullLmPassword = 1304; // ERROR_NULL_LM_PASSWORD
	static const errorUnknownRevision = 1305; // ERROR_UNKNOWN_REVISION
	static const errorRevisionMismatch = 1306; // ERROR_REVISION_MISMATCH
	static const errorInvalidOwner = 1307; // ERROR_INVALID_OWNER
	static const errorInvalidPrimaryGroup = 1308; // ERROR_INVALID_PRIMARY_GROUP
	static const errorNoImpersonationToken = 1309; // ERROR_NO_IMPERSONATION_TOKEN
	static const errorCantDisableMandatory = 1310; // ERROR_CANT_DISABLE_MANDATORY
	static const errorNoLogonServers = 1311; // ERROR_NO_LOGON_SERVERS
	static const errorNoSuchLogonSession = 1312; // ERROR_NO_SUCH_LOGON_SESSION
	static const errorNoSuchPrivilege = 1313; // ERROR_NO_SUCH_PRIVILEGE
	static const errorPrivilegeNotHeld = 1314; // ERROR_PRIVILEGE_NOT_HELD
	static const errorInvalidAccountName = 1315; // ERROR_INVALID_ACCOUNT_NAME
	static const errorUserExists = 1316; // ERROR_USER_EXISTS
	static const errorNoSuchUser = 1317; // ERROR_NO_SUCH_USER
	static const errorGroupExists = 1318; // ERROR_GROUP_EXISTS
	static const errorNoSuchGroup = 1319; // ERROR_NO_SUCH_GROUP
	static const errorMemberInGroup = 1320; // ERROR_MEMBER_IN_GROUP
	static const errorMemberNotInGroup = 1321; // ERROR_MEMBER_NOT_IN_GROUP
	static const errorLastAdmin = 1322; // ERROR_LAST_ADMIN
	static const errorWrongPassword = 1323; // ERROR_WRONG_PASSWORD
	static const errorIllFormedPassword = 1324; // ERROR_ILL_FORMED_PASSWORD
	static const errorPasswordRestriction = 1325; // ERROR_PASSWORD_RESTRICTION
	static const errorLogonFailure = 1326; // ERROR_LOGON_FAILURE
	static const errorAccountRestriction = 1327; // ERROR_ACCOUNT_RESTRICTION
	static const errorInvalidLogonHours = 1328; // ERROR_INVALID_LOGON_HOURS
	static const errorInvalidWorkstation = 1329; // ERROR_INVALID_WORKSTATION
	static const errorPasswordExpired = 1330; // ERROR_PASSWORD_EXPIRED
	static const errorAccountDisabled = 1331; // ERROR_ACCOUNT_DISABLED
	static const errorNoneMapped = 1332; // ERROR_NONE_MAPPED
	static const errorTooManyLuidsRequested = 1333; // ERROR_TOO_MANY_LUIDS_REQUESTED
	static const errorLuidsExhausted = 1334; // ERROR_LUIDS_EXHAUSTED
	static const errorInvalidSubAuthority = 1335; // ERROR_INVALID_SUB_AUTHORITY
	static const errorInvalidAcl = 1336; // ERROR_INVALID_ACL
	static const errorInvalidSid = 1337; // ERROR_INVALID_SID
	static const errorInvalidSecurityDescr = 1338; // ERROR_INVALID_SECURITY_DESCR
	static const errorBadInheritanceAcl = 1340; // ERROR_BAD_INHERITANCE_ACL
	static const errorServerDisabled = 1341; // ERROR_SERVER_DISABLED
	static const errorServerNotDisabled = 1342; // ERROR_SERVER_NOT_DISABLED
	static const errorInvalidIdAuthority = 1343; // ERROR_INVALID_ID_AUTHORITY
	static const errorAllottedSpaceExceeded = 1344; // ERROR_ALLOTTED_SPACE_EXCEEDED
	static const errorInvalidGroupAttributes = 1345; // ERROR_INVALID_GROUP_ATTRIBUTES
	static const errorBadImpersonationLevel = 1346; // ERROR_BAD_IMPERSONATION_LEVEL
	static const errorCantOpenAnonymous = 1347; // ERROR_CANT_OPEN_ANONYMOUS
	static const errorBadValidationClass = 1348; // ERROR_BAD_VALIDATION_CLASS
	static const errorBadTokenType = 1349; // ERROR_BAD_TOKEN_TYPE
	static const errorNoSecurityOnObject = 1350; // ERROR_NO_SECURITY_ON_OBJECT
	static const errorCantAccessDomainInfo = 1351; // ERROR_CANT_ACCESS_DOMAIN_INFO
	static const errorInvalidServerState = 1352; // ERROR_INVALID_SERVER_STATE
	static const errorInvalidDomainState = 1353; // ERROR_INVALID_DOMAIN_STATE
	static const errorInvalidDomainRole = 1354; // ERROR_INVALID_DOMAIN_ROLE
	static const errorNoSuchDomain = 1355; // ERROR_NO_SUCH_DOMAIN
	static const errorDomainExists = 1356; // ERROR_DOMAIN_EXISTS
	static const errorDomainLimitExceeded = 1357; // ERROR_DOMAIN_LIMIT_EXCEEDED
	static const errorInternalDbCorruption = 1358; // ERROR_INTERNAL_DB_CORRUPTION
	static const errorInternalError = 1359; // ERROR_INTERNAL_ERROR
	static const errorGenericNotMapped = 1360; // ERROR_GENERIC_NOT_MAPPED
	static const errorBadDescriptorFormat = 1361; // ERROR_BAD_DESCRIPTOR_FORMAT
	static const errorNotLogonProcess = 1362; // ERROR_NOT_LOGON_PROCESS
	static const errorLogonSessionExists = 1363; // ERROR_LOGON_SESSION_EXISTS
	static const errorNoSuchPackage = 1364; // ERROR_NO_SUCH_PACKAGE
	static const errorBadLogonSessionState = 1365; // ERROR_BAD_LOGON_SESSION_STATE
	static const errorLogonSessionCollision = 1366; // ERROR_LOGON_SESSION_COLLISION
	static const errorInvalidLogonType = 1367; // ERROR_INVALID_LOGON_TYPE
	static const errorCannotImpersonate = 1368; // ERROR_CANNOT_IMPERSONATE
	static const errorRxactInvalidState = 1369; // ERROR_RXACT_INVALID_STATE
	static const errorRxactCommitFailure = 1370; // ERROR_RXACT_COMMIT_FAILURE
	static const errorSpecialAccount = 1371; // ERROR_SPECIAL_ACCOUNT
	static const errorSpecialGroup = 1372; // ERROR_SPECIAL_GROUP
	static const errorSpecialUser = 1373; // ERROR_SPECIAL_USER
	static const errorMembersPrimaryGroup = 1374; // ERROR_MEMBERS_PRIMARY_GROUP
	static const errorTokenAlreadyInUse = 1375; // ERROR_TOKEN_ALREADY_IN_USE
	static const errorNoSuchAlias = 1376; // ERROR_NO_SUCH_ALIAS
	static const errorMemberNotInAlias = 1377; // ERROR_MEMBER_NOT_IN_ALIAS
	static const errorMemberInAlias = 1378; // ERROR_MEMBER_IN_ALIAS
	static const errorAliasExists = 1379; // ERROR_ALIAS_EXISTS
	static const errorLogonNotGranted = 1380; // ERROR_LOGON_NOT_GRANTED
	static const errorTooManySecrets = 1381; // ERROR_TOO_MANY_SECRETS
	static const errorSecretTooLong = 1382; // ERROR_SECRET_TOO_LONG
	static const errorInternalDbError = 1383; // ERROR_INTERNAL_DB_ERROR
	static const errorTooManyContextIds = 1384; // ERROR_TOO_MANY_CONTEXT_IDS
	static const errorLogonTypeNotGranted = 1385; // ERROR_LOGON_TYPE_NOT_GRANTED
	static const errorNtCrossEncryptionRequired = 1386; // ERROR_NT_CROSS_ENCRYPTION_REQUIRED
	static const errorNoSuchMember = 1387; // ERROR_NO_SUCH_MEMBER
	static const errorInvalidMember = 1388; // ERROR_INVALID_MEMBER
	static const errorTooManySids = 1389; // ERROR_TOO_MANY_SIDS
	static const errorLmCrossEncryptionRequired = 1390; // ERROR_LM_CROSS_ENCRYPTION_REQUIRED
	static const errorNoInheritance = 1391; // ERROR_NO_INHERITANCE
	static const errorFileCorrupt = 1392; // ERROR_FILE_CORRUPT
	static const errorDiskCorrupt = 1393; // ERROR_DISK_CORRUPT
	static const errorNoUserSessionKey = 1394; // ERROR_NO_USER_SESSION_KEY
	static const errorLicenseQuotaExceeded = 1395; // ERROR_LICENSE_QUOTA_EXCEEDED
	static const errorWrongTargetName = 1396; // ERROR_WRONG_TARGET_NAME
	static const errorMutualAuthFailed = 1397; // ERROR_MUTUAL_AUTH_FAILED
	static const errorTimeSkew = 1398; // ERROR_TIME_SKEW
	static const errorCurrentDomainNotAllowed = 1399; // ERROR_CURRENT_DOMAIN_NOT_ALLOWED
	static const errorInvalidWindowHandle = 1400; // ERROR_INVALID_WINDOW_HANDLE
	static const errorInvalidMenuHandle = 1401; // ERROR_INVALID_MENU_HANDLE
	static const errorInvalidCursorHandle = 1402; // ERROR_INVALID_CURSOR_HANDLE
	static const errorInvalidAccelHandle = 1403; // ERROR_INVALID_ACCEL_HANDLE
	static const errorInvalidHookHandle = 1404; // ERROR_INVALID_HOOK_HANDLE
	static const errorInvalidDwpHandle = 1405; // ERROR_INVALID_DWP_HANDLE
	static const errorTlwWithWschild = 1406; // ERROR_TLW_WITH_WSCHILD
	static const errorCannotFindWndClass = 1407; // ERROR_CANNOT_FIND_WND_CLASS
	static const errorWindowOfOtherThread = 1408; // ERROR_WINDOW_OF_OTHER_THREAD
	static const errorHotkeyAlreadyRegistered = 1409; // ERROR_HOTKEY_ALREADY_REGISTERED
	static const errorClassAlreadyExists = 1410; // ERROR_CLASS_ALREADY_EXISTS
	static const errorClassDoesNotExist = 1411; // ERROR_CLASS_DOES_NOT_EXIST
	static const errorClassHasWindows = 1412; // ERROR_CLASS_HAS_WINDOWS
	static const errorInvalidIndex = 1413; // ERROR_INVALID_INDEX
	static const errorInvalidIconHandle = 1414; // ERROR_INVALID_ICON_HANDLE
	static const errorPrivateDialogIndex = 1415; // ERROR_PRIVATE_DIALOG_INDEX
	static const errorListboxIdNotFound = 1416; // ERROR_LISTBOX_ID_NOT_FOUND
	static const errorNoWildcardCharacters = 1417; // ERROR_NO_WILDCARD_CHARACTERS
	static const errorClipboardNotOpen = 1418; // ERROR_CLIPBOARD_NOT_OPEN
	static const errorHotkeyNotRegistered = 1419; // ERROR_HOTKEY_NOT_REGISTERED
	static const errorWindowNotDialog = 1420; // ERROR_WINDOW_NOT_DIALOG
	static const errorControlIdNotFound = 1421; // ERROR_CONTROL_ID_NOT_FOUND
	static const errorInvalidComboboxMessage = 1422; // ERROR_INVALID_COMBOBOX_MESSAGE
	static const errorWindowNotCombobox = 1423; // ERROR_WINDOW_NOT_COMBOBOX
	static const errorInvalidEditHeight = 1424; // ERROR_INVALID_EDIT_HEIGHT
	static const errorDcNotFound = 1425; // ERROR_DC_NOT_FOUND
	static const errorInvalidHookFilter = 1426; // ERROR_INVALID_HOOK_FILTER
	static const errorInvalidFilterProc = 1427; // ERROR_INVALID_FILTER_PROC
	static const errorHookNeedsHmod = 1428; // ERROR_HOOK_NEEDS_HMOD
	static const errorGlobalOnlyHook = 1429; // ERROR_GLOBAL_ONLY_HOOK
	static const errorJournalHookSet = 1430; // ERROR_JOURNAL_HOOK_SET
	static const errorHookNotInstalled = 1431; // ERROR_HOOK_NOT_INSTALLED
	static const errorInvalidLbMessage = 1432; // ERROR_INVALID_LB_MESSAGE
	static const errorSetcountOnBadLb = 1433; // ERROR_SETCOUNT_ON_BAD_LB
	static const errorLbWithoutTabstops = 1434; // ERROR_LB_WITHOUT_TABSTOPS
	static const errorDestroyObjectOfOtherThread = 1435; // ERROR_DESTROY_OBJECT_OF_OTHER_THREAD
	static const errorChildWindowMenu = 1436; // ERROR_CHILD_WINDOW_MENU
	static const errorNoSystemMenu = 1437; // ERROR_NO_SYSTEM_MENU
	static const errorInvalidMsgboxStyle = 1438; // ERROR_INVALID_MSGBOX_STYLE
	static const errorInvalidSpiValue = 1439; // ERROR_INVALID_SPI_VALUE
	static const errorScreenAlreadyLocked = 1440; // ERROR_SCREEN_ALREADY_LOCKED
	static const errorHwndsHaveDiffParent = 1441; // ERROR_HWNDS_HAVE_DIFF_PARENT
	static const errorNotChildWindow = 1442; // ERROR_NOT_CHILD_WINDOW
	static const errorInvalidGwCommand = 1443; // ERROR_INVALID_GW_COMMAND
	static const errorInvalidThreadId = 1444; // ERROR_INVALID_THREAD_ID
	static const errorNonMdichildWindow = 1445; // ERROR_NON_MDICHILD_WINDOW
	static const errorPopupAlreadyActive = 1446; // ERROR_POPUP_ALREADY_ACTIVE
	static const errorNoScrollbars = 1447; // ERROR_NO_SCROLLBARS
	static const errorInvalidScrollbarRange = 1448; // ERROR_INVALID_SCROLLBAR_RANGE
	static const errorInvalidShowwinCommand = 1449; // ERROR_INVALID_SHOWWIN_COMMAND
	static const errorNoSystemResources = 1450; // ERROR_NO_SYSTEM_RESOURCES
	static const errorNonpagedSystemResources = 1451; // ERROR_NONPAGED_SYSTEM_RESOURCES
	static const errorPagedSystemResources = 1452; // ERROR_PAGED_SYSTEM_RESOURCES
	static const errorWorkingSetQuota = 1453; // ERROR_WORKING_SET_QUOTA
	static const errorPagefileQuota = 1454; // ERROR_PAGEFILE_QUOTA
	static const errorCommitmentLimit = 1455; // ERROR_COMMITMENT_LIMIT
	static const errorMenuItemNotFound = 1456; // ERROR_MENU_ITEM_NOT_FOUND
	static const errorInvalidKeyboardHandle = 1457; // ERROR_INVALID_KEYBOARD_HANDLE
	static const errorHookTypeNotAllowed = 1458; // ERROR_HOOK_TYPE_NOT_ALLOWED
	static const errorRequiresInteractiveWindowstation = 1459; // ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION
	static const errorTimeout = 1460; // ERROR_TIMEOUT
	static const errorInvalidMonitorHandle = 1461; // ERROR_INVALID_MONITOR_HANDLE
	static const errorIncorrectSize = 1462; // ERROR_INCORRECT_SIZE
	static const errorSymlinkClassDisabled = 1463; // ERROR_SYMLINK_CLASS_DISABLED
	static const errorSymlinkNotSupported = 1464; // ERROR_SYMLINK_NOT_SUPPORTED
	static const errorXmlParseError = 1465; // ERROR_XML_PARSE_ERROR
	static const errorXmldsigError = 1466; // ERROR_XMLDSIG_ERROR
	static const errorRestartApplication = 1467; // ERROR_RESTART_APPLICATION
	static const errorWrongCompartment = 1468; // ERROR_WRONG_COMPARTMENT
	static const errorAuthipFailure = 1469; // ERROR_AUTHIP_FAILURE
	static const errorNoNvramResources = 1470; // ERROR_NO_NVRAM_RESOURCES
	static const errorNotGuiProcess = 1471; // ERROR_NOT_GUI_PROCESS
	static const errorEventlogFileCorrupt = 1500; // ERROR_EVENTLOG_FILE_CORRUPT
	static const errorEventlogCantStart = 1501; // ERROR_EVENTLOG_CANT_START
	static const errorLogFileFull = 1502; // ERROR_LOG_FILE_FULL
	static const errorEventlogFileChanged = 1503; // ERROR_EVENTLOG_FILE_CHANGED
	static const errorInvalidTaskName = 1550; // ERROR_INVALID_TASK_NAME
	static const errorInvalidTaskIndex = 1551; // ERROR_INVALID_TASK_INDEX
	static const errorThreadAlreadyInTask = 1552; // ERROR_THREAD_ALREADY_IN_TASK
	static const errorInstallServiceFailure = 1601; // ERROR_INSTALL_SERVICE_FAILURE
	static const errorInstallUserexit = 1602; // ERROR_INSTALL_USEREXIT
	static const errorInstallFailure = 1603; // ERROR_INSTALL_FAILURE
	static const errorInstallSuspend = 1604; // ERROR_INSTALL_SUSPEND
	static const errorUnknownProduct = 1605; // ERROR_UNKNOWN_PRODUCT
	static const errorUnknownFeature = 1606; // ERROR_UNKNOWN_FEATURE
	static const errorUnknownComponent = 1607; // ERROR_UNKNOWN_COMPONENT
	static const errorUnknownProperty = 1608; // ERROR_UNKNOWN_PROPERTY
	static const errorInvalidHandleState = 1609; // ERROR_INVALID_HANDLE_STATE
	static const errorBadConfiguration = 1610; // ERROR_BAD_CONFIGURATION
	static const errorIndexAbsent = 1611; // ERROR_INDEX_ABSENT
	static const errorInstallSourceAbsent = 1612; // ERROR_INSTALL_SOURCE_ABSENT
	static const errorInstallPackageVersion = 1613; // ERROR_INSTALL_PACKAGE_VERSION
	static const errorProductUninstalled = 1614; // ERROR_PRODUCT_UNINSTALLED
	static const errorBadQuerySyntax = 1615; // ERROR_BAD_QUERY_SYNTAX
	static const errorInvalidField = 1616; // ERROR_INVALID_FIELD
	static const errorDeviceRemoved = 1617; // ERROR_DEVICE_REMOVED
	static const errorInstallAlreadyRunning = 1618; // ERROR_INSTALL_ALREADY_RUNNING
	static const errorInstallPackageOpenFailed = 1619; // ERROR_INSTALL_PACKAGE_OPEN_FAILED
	static const errorInstallPackageInvalid = 1620; // ERROR_INSTALL_PACKAGE_INVALID
	static const errorInstallUiFailure = 1621; // ERROR_INSTALL_UI_FAILURE
	static const errorInstallLogFailure = 1622; // ERROR_INSTALL_LOG_FAILURE
	static const errorInstallLanguageUnsupported = 1623; // ERROR_INSTALL_LANGUAGE_UNSUPPORTED
	static const errorInstallTransformFailure = 1624; // ERROR_INSTALL_TRANSFORM_FAILURE
	static const errorInstallPackageRejected = 1625; // ERROR_INSTALL_PACKAGE_REJECTED
	static const errorFunctionNotCalled = 1626; // ERROR_FUNCTION_NOT_CALLED
	static const errorFunctionFailed = 1627; // ERROR_FUNCTION_FAILED
	static const errorInvalidTable = 1628; // ERROR_INVALID_TABLE
	static const errorDatatypeMismatch = 1629; // ERROR_DATATYPE_MISMATCH
	static const errorUnsupportedType = 1630; // ERROR_UNSUPPORTED_TYPE
	static const errorCreateFailed = 1631; // ERROR_CREATE_FAILED
	static const errorInstallTempUnwritable = 1632; // ERROR_INSTALL_TEMP_UNWRITABLE
	static const errorInstallPlatformUnsupported = 1633; // ERROR_INSTALL_PLATFORM_UNSUPPORTED
	static const errorInstallNotused = 1634; // ERROR_INSTALL_NOTUSED
	static const errorPatchPackageOpenFailed = 1635; // ERROR_PATCH_PACKAGE_OPEN_FAILED
	static const errorPatchPackageInvalid = 1636; // ERROR_PATCH_PACKAGE_INVALID
	static const errorPatchPackageUnsupported = 1637; // ERROR_PATCH_PACKAGE_UNSUPPORTED
	static const errorProductVersion = 1638; // ERROR_PRODUCT_VERSION
	static const errorInvalidCommandLine = 1639; // ERROR_INVALID_COMMAND_LINE
	static const errorInstallRemoteDisallowed = 1640; // ERROR_INSTALL_REMOTE_DISALLOWED
	static const errorSuccessRebootInitiated = 1641; // ERROR_SUCCESS_REBOOT_INITIATED
	static const errorPatchTargetNotFound = 1642; // ERROR_PATCH_TARGET_NOT_FOUND
	static const errorPatchPackageRejected = 1643; // ERROR_PATCH_PACKAGE_REJECTED
	static const errorInstallTransformRejected = 1644; // ERROR_INSTALL_TRANSFORM_REJECTED
	static const errorInstallRemoteProhibited = 1645; // ERROR_INSTALL_REMOTE_PROHIBITED
	static const errorPatchRemovalUnsupported = 1646; // ERROR_PATCH_REMOVAL_UNSUPPORTED
	static const errorUnknownPatch = 1647; // ERROR_UNKNOWN_PATCH
	static const errorPatchNoSequence = 1648; // ERROR_PATCH_NO_SEQUENCE
	static const errorPatchRemovalDisallowed = 1649; // ERROR_PATCH_REMOVAL_DISALLOWED
	static const errorInvalidPatchXml = 1650; // ERROR_INVALID_PATCH_XML
	static const errorPatchManagedAdvertisedProduct = 1651; // ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT
	static const errorInstallServiceSafeboot = 1652; // ERROR_INSTALL_SERVICE_SAFEBOOT
	static const errorFailFastException = 1653; // ERROR_FAIL_FAST_EXCEPTION
	static const errorInstallRejected = 1654; // ERROR_INSTALL_REJECTED
	static const rpcSInvalidStringBinding = 1700; // RPC_S_INVALID_STRING_BINDING
	static const rpcSWrongKindOfBinding = 1701; // RPC_S_WRONG_KIND_OF_BINDING
	static const rpcSInvalidBinding = 1702; // RPC_S_INVALID_BINDING
	static const rpcSProtseqNotSupported = 1703; // RPC_S_PROTSEQ_NOT_SUPPORTED
	static const rpcSInvalidRpcProtseq = 1704; // RPC_S_INVALID_RPC_PROTSEQ
	static const rpcSInvalidStringUuid = 1705; // RPC_S_INVALID_STRING_UUID
	static const rpcSInvalidEndpointFormat = 1706; // RPC_S_INVALID_ENDPOINT_FORMAT
	static const rpcSInvalidNetAddr = 1707; // RPC_S_INVALID_NET_ADDR
	static const rpcSNoEndpointFound = 1708; // RPC_S_NO_ENDPOINT_FOUND
	static const rpcSInvalidTimeout = 1709; // RPC_S_INVALID_TIMEOUT
	static const rpcSObjectNotFound = 1710; // RPC_S_OBJECT_NOT_FOUND
	static const rpcSAlreadyRegistered = 1711; // RPC_S_ALREADY_REGISTERED
	static const rpcSTypeAlreadyRegistered = 1712; // RPC_S_TYPE_ALREADY_REGISTERED
	static const rpcSAlreadyListening = 1713; // RPC_S_ALREADY_LISTENING
	static const rpcSNoProtseqsRegistered = 1714; // RPC_S_NO_PROTSEQS_REGISTERED
	static const rpcSNotListening = 1715; // RPC_S_NOT_LISTENING
	static const rpcSUnknownMgrType = 1716; // RPC_S_UNKNOWN_MGR_TYPE
	static const rpcSUnknownIf = 1717; // RPC_S_UNKNOWN_IF
	static const rpcSNoBindings = 1718; // RPC_S_NO_BINDINGS
	static const rpcSNoProtseqs = 1719; // RPC_S_NO_PROTSEQS
	static const rpcSCantCreateEndpoint = 1720; // RPC_S_CANT_CREATE_ENDPOINT
	static const rpcSOutOfResources = 1721; // RPC_S_OUT_OF_RESOURCES
	static const rpcSServerUnavailable = 1722; // RPC_S_SERVER_UNAVAILABLE
	static const rpcSServerTooBusy = 1723; // RPC_S_SERVER_TOO_BUSY
	static const rpcSInvalidNetworkOptions = 1724; // RPC_S_INVALID_NETWORK_OPTIONS
	static const rpcSNoCallActive = 1725; // RPC_S_NO_CALL_ACTIVE
	static const rpcSCallFailed = 1726; // RPC_S_CALL_FAILED
	static const rpcSCallFailedDne = 1727; // RPC_S_CALL_FAILED_DNE
	static const rpcSProtocolError = 1728; // RPC_S_PROTOCOL_ERROR
	static const rpcSProxyAccessDenied = 1729; // RPC_S_PROXY_ACCESS_DENIED
	static const rpcSUnsupportedTransSyn = 1730; // RPC_S_UNSUPPORTED_TRANS_SYN
	static const rpcSUnsupportedType = 1732; // RPC_S_UNSUPPORTED_TYPE
	static const rpcSInvalidTag = 1733; // RPC_S_INVALID_TAG
	static const rpcSInvalidBound = 1734; // RPC_S_INVALID_BOUND
	static const rpcSNoEntryName = 1735; // RPC_S_NO_ENTRY_NAME
	static const rpcSInvalidNameSyntax = 1736; // RPC_S_INVALID_NAME_SYNTAX
	static const rpcSUnsupportedNameSyntax = 1737; // RPC_S_UNSUPPORTED_NAME_SYNTAX
	static const rpcSUuidNoAddress = 1739; // RPC_S_UUID_NO_ADDRESS
	static const rpcSDuplicateEndpoint = 1740; // RPC_S_DUPLICATE_ENDPOINT
	static const rpcSUnknownAuthnType = 1741; // RPC_S_UNKNOWN_AUTHN_TYPE
	static const rpcSMaxCallsTooSmall = 1742; // RPC_S_MAX_CALLS_TOO_SMALL
	static const rpcSStringTooLong = 1743; // RPC_S_STRING_TOO_LONG
	static const rpcSProtseqNotFound = 1744; // RPC_S_PROTSEQ_NOT_FOUND
	static const rpcSProcnumOutOfRange = 1745; // RPC_S_PROCNUM_OUT_OF_RANGE
	static const rpcSBindingHasNoAuth = 1746; // RPC_S_BINDING_HAS_NO_AUTH
	static const rpcSUnknownAuthnService = 1747; // RPC_S_UNKNOWN_AUTHN_SERVICE
	static const rpcSUnknownAuthnLevel = 1748; // RPC_S_UNKNOWN_AUTHN_LEVEL
	static const rpcSInvalidAuthIdentity = 1749; // RPC_S_INVALID_AUTH_IDENTITY
	static const rpcSUnknownAuthzService = 1750; // RPC_S_UNKNOWN_AUTHZ_SERVICE
	static const eptSInvalidEntry = 1751; // EPT_S_INVALID_ENTRY
	static const eptSCantPerformOp = 1752; // EPT_S_CANT_PERFORM_OP
	static const eptSNotRegistered = 1753; // EPT_S_NOT_REGISTERED
	static const rpcSNothingToExport = 1754; // RPC_S_NOTHING_TO_EXPORT
	static const rpcSIncompleteName = 1755; // RPC_S_INCOMPLETE_NAME
	static const rpcSInvalidVersOption = 1756; // RPC_S_INVALID_VERS_OPTION
	static const rpcSNoMoreMembers = 1757; // RPC_S_NO_MORE_MEMBERS
	static const rpcSNotAllObjsUnexported = 1758; // RPC_S_NOT_ALL_OBJS_UNEXPORTED
	static const rpcSInterfaceNotFound = 1759; // RPC_S_INTERFACE_NOT_FOUND
	static const rpcSEntryAlreadyExists = 1760; // RPC_S_ENTRY_ALREADY_EXISTS
	static const rpcSEntryNotFound = 1761; // RPC_S_ENTRY_NOT_FOUND
	static const rpcSNameServiceUnavailable = 1762; // RPC_S_NAME_SERVICE_UNAVAILABLE
	static const rpcSInvalidNafId = 1763; // RPC_S_INVALID_NAF_ID
	static const rpcSCannotSupport = 1764; // RPC_S_CANNOT_SUPPORT
	static const rpcSNoContextAvailable = 1765; // RPC_S_NO_CONTEXT_AVAILABLE
	static const rpcSInternalError = 1766; // RPC_S_INTERNAL_ERROR
	static const rpcSZeroDivide = 1767; // RPC_S_ZERO_DIVIDE
	static const rpcSAddressError = 1768; // RPC_S_ADDRESS_ERROR
	static const rpcSFpDivZero = 1769; // RPC_S_FP_DIV_ZERO
	static const rpcSFpUnderflow = 1770; // RPC_S_FP_UNDERFLOW
	static const rpcSFpOverflow = 1771; // RPC_S_FP_OVERFLOW
	static const rpcXNoMoreEntries = 1772; // RPC_X_NO_MORE_ENTRIES
	static const rpcXSsCharTransOpenFail = 1773; // RPC_X_SS_CHAR_TRANS_OPEN_FAIL
	static const rpcXSsCharTransShortFile = 1774; // RPC_X_SS_CHAR_TRANS_SHORT_FILE
	static const rpcXSsInNullContext = 1775; // RPC_X_SS_IN_NULL_CONTEXT
	static const rpcXSsContextDamaged = 1777; // RPC_X_SS_CONTEXT_DAMAGED
	static const rpcXSsHandlesMismatch = 1778; // RPC_X_SS_HANDLES_MISMATCH
	static const rpcXSsCannotGetCallHandle = 1779; // RPC_X_SS_CANNOT_GET_CALL_HANDLE
	static const rpcXNullRefPointer = 1780; // RPC_X_NULL_REF_POINTER
	static const rpcXEnumValueOutOfRange = 1781; // RPC_X_ENUM_VALUE_OUT_OF_RANGE
	static const rpcXByteCountTooSmall = 1782; // RPC_X_BYTE_COUNT_TOO_SMALL
	static const rpcXBadStubData = 1783; // RPC_X_BAD_STUB_DATA
	static const errorInvalidUserBuffer = 1784; // ERROR_INVALID_USER_BUFFER
	static const errorUnrecognizedMedia = 1785; // ERROR_UNRECOGNIZED_MEDIA
	static const errorNoTrustLsaSecret = 1786; // ERROR_NO_TRUST_LSA_SECRET
	static const errorNoTrustSamAccount = 1787; // ERROR_NO_TRUST_SAM_ACCOUNT
	static const errorTrustedDomainFailure = 1788; // ERROR_TRUSTED_DOMAIN_FAILURE
	static const errorTrustedRelationshipFailure = 1789; // ERROR_TRUSTED_RELATIONSHIP_FAILURE
	static const errorTrustFailure = 1790; // ERROR_TRUST_FAILURE
	static const rpcSCallInProgress = 1791; // RPC_S_CALL_IN_PROGRESS
	static const errorNetlogonNotStarted = 1792; // ERROR_NETLOGON_NOT_STARTED
	static const errorAccountExpired = 1793; // ERROR_ACCOUNT_EXPIRED
	static const errorRedirectorHasOpenHandles = 1794; // ERROR_REDIRECTOR_HAS_OPEN_HANDLES
	static const errorPrinterDriverAlreadyInstalled = 1795; // ERROR_PRINTER_DRIVER_ALREADY_INSTALLED
	static const errorUnknownPort = 1796; // ERROR_UNKNOWN_PORT
	static const errorUnknownPrinterDriver = 1797; // ERROR_UNKNOWN_PRINTER_DRIVER
	static const errorUnknownPrintprocessor = 1798; // ERROR_UNKNOWN_PRINTPROCESSOR
	static const errorInvalidSeparatorFile = 1799; // ERROR_INVALID_SEPARATOR_FILE
	static const errorInvalidPriority = 1800; // ERROR_INVALID_PRIORITY
	static const errorInvalidPrinterName = 1801; // ERROR_INVALID_PRINTER_NAME
	static const errorPrinterAlreadyExists = 1802; // ERROR_PRINTER_ALREADY_EXISTS
	static const errorInvalidPrinterCommand = 1803; // ERROR_INVALID_PRINTER_COMMAND
	static const errorInvalidDatatype = 1804; // ERROR_INVALID_DATATYPE
	static const errorInvalidEnvironment = 1805; // ERROR_INVALID_ENVIRONMENT
	static const rpcSNoMoreBindings = 1806; // RPC_S_NO_MORE_BINDINGS
	static const errorNologonInterdomainTrustAccount = 1807; // ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT
	static const errorNologonWorkstationTrustAccount = 1808; // ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT
	static const errorNologonServerTrustAccount = 1809; // ERROR_NOLOGON_SERVER_TRUST_ACCOUNT
	static const errorDomainTrustInconsistent = 1810; // ERROR_DOMAIN_TRUST_INCONSISTENT
	static const errorServerHasOpenHandles = 1811; // ERROR_SERVER_HAS_OPEN_HANDLES
	static const errorResourceDataNotFound = 1812; // ERROR_RESOURCE_DATA_NOT_FOUND
	static const errorResourceTypeNotFound = 1813; // ERROR_RESOURCE_TYPE_NOT_FOUND
	static const errorResourceNameNotFound = 1814; // ERROR_RESOURCE_NAME_NOT_FOUND
	static const errorResourceLangNotFound = 1815; // ERROR_RESOURCE_LANG_NOT_FOUND
	static const errorNotEnoughQuota = 1816; // ERROR_NOT_ENOUGH_QUOTA
	static const rpcSNoInterfaces = 1817; // RPC_S_NO_INTERFACES
	static const rpcSCallCancelled = 1818; // RPC_S_CALL_CANCELLED
	static const rpcSBindingIncomplete = 1819; // RPC_S_BINDING_INCOMPLETE
	static const rpcSCommFailure = 1820; // RPC_S_COMM_FAILURE
	static const rpcSUnsupportedAuthnLevel = 1821; // RPC_S_UNSUPPORTED_AUTHN_LEVEL
	static const rpcSNoPrincName = 1822; // RPC_S_NO_PRINC_NAME
	static const rpcSNotRpcError = 1823; // RPC_S_NOT_RPC_ERROR
	static const rpcSUuidLocalOnly = 1824; // RPC_S_UUID_LOCAL_ONLY
	static const rpcSSecPkgError = 1825; // RPC_S_SEC_PKG_ERROR
	static const rpcSNotCancelled = 1826; // RPC_S_NOT_CANCELLED
	static const rpcXInvalidEsAction = 1827; // RPC_X_INVALID_ES_ACTION
	static const rpcXWrongEsVersion = 1828; // RPC_X_WRONG_ES_VERSION
	static const rpcXWrongStubVersion = 1829; // RPC_X_WRONG_STUB_VERSION
	static const rpcXInvalidPipeObject = 1830; // RPC_X_INVALID_PIPE_OBJECT
	static const rpcXWrongPipeOrder = 1831; // RPC_X_WRONG_PIPE_ORDER
	static const rpcXWrongPipeVersion = 1832; // RPC_X_WRONG_PIPE_VERSION
	static const rpcSCookieAuthFailed = 1833; // RPC_S_COOKIE_AUTH_FAILED
	static const rpcSGroupMemberNotFound = 1898; // RPC_S_GROUP_MEMBER_NOT_FOUND
	static const eptSCantCreate = 1899; // EPT_S_CANT_CREATE
	static const rpcSInvalidObject = 1900; // RPC_S_INVALID_OBJECT
	static const errorInvalidTime = 1901; // ERROR_INVALID_TIME
	static const errorInvalidFormName = 1902; // ERROR_INVALID_FORM_NAME
	static const errorInvalidFormSize = 1903; // ERROR_INVALID_FORM_SIZE
	static const errorAlreadyWaiting = 1904; // ERROR_ALREADY_WAITING
	static const errorPrinterDeleted = 1905; // ERROR_PRINTER_DELETED
	static const errorInvalidPrinterState = 1906; // ERROR_INVALID_PRINTER_STATE
	static const errorPasswordMustChange = 1907; // ERROR_PASSWORD_MUST_CHANGE
	static const errorDomainControllerNotFound = 1908; // ERROR_DOMAIN_CONTROLLER_NOT_FOUND
	static const errorAccountLockedOut = 1909; // ERROR_ACCOUNT_LOCKED_OUT
	static const orInvalidOxid = 1910; // OR_INVALID_OXID
	static const orInvalidOid = 1911; // OR_INVALID_OID
	static const orInvalidSet = 1912; // OR_INVALID_SET
	static const rpcSSendIncomplete = 1913; // RPC_S_SEND_INCOMPLETE
	static const rpcSInvalidAsyncHandle = 1914; // RPC_S_INVALID_ASYNC_HANDLE
	static const rpcSInvalidAsyncCall = 1915; // RPC_S_INVALID_ASYNC_CALL
	static const rpcXPipeClosed = 1916; // RPC_X_PIPE_CLOSED
	static const rpcXPipeDisciplineError = 1917; // RPC_X_PIPE_DISCIPLINE_ERROR
	static const rpcXPipeEmpty = 1918; // RPC_X_PIPE_EMPTY
	static const errorNoSitename = 1919; // ERROR_NO_SITENAME
	static const errorCantAccessFile = 1920; // ERROR_CANT_ACCESS_FILE
	static const errorCantResolveFilename = 1921; // ERROR_CANT_RESOLVE_FILENAME
	static const rpcSEntryTypeMismatch = 1922; // RPC_S_ENTRY_TYPE_MISMATCH
	static const rpcSNotAllObjsExported = 1923; // RPC_S_NOT_ALL_OBJS_EXPORTED
	static const rpcSInterfaceNotExported = 1924; // RPC_S_INTERFACE_NOT_EXPORTED
	static const rpcSProfileNotAdded = 1925; // RPC_S_PROFILE_NOT_ADDED
	static const rpcSPrfEltNotAdded = 1926; // RPC_S_PRF_ELT_NOT_ADDED
	static const rpcSPrfEltNotRemoved = 1927; // RPC_S_PRF_ELT_NOT_REMOVED
	static const rpcSGrpEltNotAdded = 1928; // RPC_S_GRP_ELT_NOT_ADDED
	static const rpcSGrpEltNotRemoved = 1929; // RPC_S_GRP_ELT_NOT_REMOVED
	static const errorKmDriverBlocked = 1930; // ERROR_KM_DRIVER_BLOCKED
	static const errorContextExpired = 1931; // ERROR_CONTEXT_EXPIRED
	static const errorPerUserTrustQuotaExceeded = 1932; // ERROR_PER_USER_TRUST_QUOTA_EXCEEDED
	static const errorAllUserTrustQuotaExceeded = 1933; // ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED
	static const errorUserDeleteTrustQuotaExceeded = 1934; // ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED
	static const errorAuthenticationFirewallFailed = 1935; // ERROR_AUTHENTICATION_FIREWALL_FAILED
	static const errorRemotePrintConnectionsBlocked = 1936; // ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED
	static const errorNtlmBlocked = 1937; // ERROR_NTLM_BLOCKED
	static const errorPasswordChangeRequired = 1938; // ERROR_PASSWORD_CHANGE_REQUIRED
	static const errorInvalidPixelFormat = 2000; // ERROR_INVALID_PIXEL_FORMAT
	static const errorBadDriver = 2001; // ERROR_BAD_DRIVER
	static const errorInvalidWindowStyle = 2002; // ERROR_INVALID_WINDOW_STYLE
	static const errorMetafileNotSupported = 2003; // ERROR_METAFILE_NOT_SUPPORTED
	static const errorTransformNotSupported = 2004; // ERROR_TRANSFORM_NOT_SUPPORTED
	static const errorClippingNotSupported = 2005; // ERROR_CLIPPING_NOT_SUPPORTED
	static const errorInvalidCmm = 2010; // ERROR_INVALID_CMM
	static const errorInvalidProfile = 2011; // ERROR_INVALID_PROFILE
	static const errorTagNotFound = 2012; // ERROR_TAG_NOT_FOUND
	static const errorTagNotPresent = 2013; // ERROR_TAG_NOT_PRESENT
	static const errorDuplicateTag = 2014; // ERROR_DUPLICATE_TAG
	static const errorProfileNotAssociatedWithDevice = 2015; // ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE
	static const errorProfileNotFound = 2016; // ERROR_PROFILE_NOT_FOUND
	static const errorInvalidColorspace = 2017; // ERROR_INVALID_COLORSPACE
	static const errorIcmNotEnabled = 2018; // ERROR_ICM_NOT_ENABLED
	static const errorDeletingIcmXform = 2019; // ERROR_DELETING_ICM_XFORM
	static const errorInvalidTransform = 2020; // ERROR_INVALID_TRANSFORM
	static const errorColorspaceMismatch = 2021; // ERROR_COLORSPACE_MISMATCH
	static const errorInvalidColorindex = 2022; // ERROR_INVALID_COLORINDEX
	static const errorProfileDoesNotMatchDevice = 2023; // ERROR_PROFILE_DOES_NOT_MATCH_DEVICE
	static const errorConnectedOtherPassword = 2108; // ERROR_CONNECTED_OTHER_PASSWORD
	static const errorConnectedOtherPasswordDefault = 2109; // ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT
	static const errorBadUsername = 2202; // ERROR_BAD_USERNAME
	static const errorNotConnected = 2250; // ERROR_NOT_CONNECTED
	static const errorOpenFiles = 2401; // ERROR_OPEN_FILES
	static const errorActiveConnections = 2402; // ERROR_ACTIVE_CONNECTIONS
	static const errorDeviceInUse = 2404; // ERROR_DEVICE_IN_USE
	static const errorUnknownPrintMonitor = 3000; // ERROR_UNKNOWN_PRINT_MONITOR
	static const errorPrinterDriverInUse = 3001; // ERROR_PRINTER_DRIVER_IN_USE
	static const errorSpoolFileNotFound = 3002; // ERROR_SPOOL_FILE_NOT_FOUND
	static const errorSplNoStartdoc = 3003; // ERROR_SPL_NO_STARTDOC
	static const errorSplNoAddjob = 3004; // ERROR_SPL_NO_ADDJOB
	static const errorPrintProcessorAlreadyInstalled = 3005; // ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED
	static const errorPrintMonitorAlreadyInstalled = 3006; // ERROR_PRINT_MONITOR_ALREADY_INSTALLED
	static const errorInvalidPrintMonitor = 3007; // ERROR_INVALID_PRINT_MONITOR
	static const errorPrintMonitorInUse = 3008; // ERROR_PRINT_MONITOR_IN_USE
	static const errorPrinterHasJobsQueued = 3009; // ERROR_PRINTER_HAS_JOBS_QUEUED
	static const errorSuccessRebootRequired = 3010; // ERROR_SUCCESS_REBOOT_REQUIRED
	static const errorSuccessRestartRequired = 3011; // ERROR_SUCCESS_RESTART_REQUIRED
	static const errorPrinterNotFound = 3012; // ERROR_PRINTER_NOT_FOUND
	static const errorPrinterDriverWarned = 3013; // ERROR_PRINTER_DRIVER_WARNED
	static const errorPrinterDriverBlocked = 3014; // ERROR_PRINTER_DRIVER_BLOCKED
	static const errorPrinterDriverPackageInUse = 3015; // ERROR_PRINTER_DRIVER_PACKAGE_IN_USE
	static const errorCoreDriverPackageNotFound = 3016; // ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND
	static const errorFailRebootRequired = 3017; // ERROR_FAIL_REBOOT_REQUIRED
	static const errorFailRebootInitiated = 3018; // ERROR_FAIL_REBOOT_INITIATED
	static const errorPrinterDriverDownloadNeeded = 3019; // ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED
	static const errorPrintJobRestartRequired = 3020; // ERROR_PRINT_JOB_RESTART_REQUIRED
	static const errorInvalidPrinterDriverManifest = 3021; // ERROR_INVALID_PRINTER_DRIVER_MANIFEST
	static const errorPrinterNotShareable = 3022; // ERROR_PRINTER_NOT_SHAREABLE
	static const errorRequestPaused = 3050; // ERROR_REQUEST_PAUSED
	static const errorIoReissueAsCached = 3950; // ERROR_IO_REISSUE_AS_CACHED
	static const errorWinsInternal = 4000; // ERROR_WINS_INTERNAL
	static const errorCanNotDelLocalWins = 4001; // ERROR_CAN_NOT_DEL_LOCAL_WINS
	static const errorStaticInit = 4002; // ERROR_STATIC_INIT
	static const errorIncBackup = 4003; // ERROR_INC_BACKUP
	static const errorFullBackup = 4004; // ERROR_FULL_BACKUP
	static const errorRecNonExistent = 4005; // ERROR_REC_NON_EXISTENT
	static const errorRplNotAllowed = 4006; // ERROR_RPL_NOT_ALLOWED
	static const peerdistErrorContentinfoVersionUnsupported = 4050; // PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED
	static const peerdistErrorCannotParseContentinfo = 4051; // PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO
	static const peerdistErrorMissingData = 4052; // PEERDIST_ERROR_MISSING_DATA
	static const peerdistErrorNoMore = 4053; // PEERDIST_ERROR_NO_MORE
	static const peerdistErrorNotInitialized = 4054; // PEERDIST_ERROR_NOT_INITIALIZED
	static const peerdistErrorAlreadyInitialized = 4055; // PEERDIST_ERROR_ALREADY_INITIALIZED
	static const peerdistErrorShutdownInProgress = 4056; // PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS
	static const peerdistErrorInvalidated = 4057; // PEERDIST_ERROR_INVALIDATED
	static const peerdistErrorAlreadyExists = 4058; // PEERDIST_ERROR_ALREADY_EXISTS
	static const peerdistErrorOperationNotfound = 4059; // PEERDIST_ERROR_OPERATION_NOTFOUND
	static const peerdistErrorAlreadyCompleted = 4060; // PEERDIST_ERROR_ALREADY_COMPLETED
	static const peerdistErrorOutOfBounds = 4061; // PEERDIST_ERROR_OUT_OF_BOUNDS
	static const peerdistErrorVersionUnsupported = 4062; // PEERDIST_ERROR_VERSION_UNSUPPORTED
	static const peerdistErrorInvalidConfiguration = 4063; // PEERDIST_ERROR_INVALID_CONFIGURATION
	static const peerdistErrorNotLicensed = 4064; // PEERDIST_ERROR_NOT_LICENSED
	static const peerdistErrorServiceUnavailable = 4065; // PEERDIST_ERROR_SERVICE_UNAVAILABLE
	static const peerdistErrorTrustFailure = 4066; // PEERDIST_ERROR_TRUST_FAILURE
	static const errorDhcpAddressConflict = 4100; // ERROR_DHCP_ADDRESS_CONFLICT
	static const errorWmiGuidNotFound = 4200; // ERROR_WMI_GUID_NOT_FOUND
	static const errorWmiInstanceNotFound = 4201; // ERROR_WMI_INSTANCE_NOT_FOUND
	static const errorWmiItemidNotFound = 4202; // ERROR_WMI_ITEMID_NOT_FOUND
	static const errorWmiTryAgain = 4203; // ERROR_WMI_TRY_AGAIN
	static const errorWmiDpNotFound = 4204; // ERROR_WMI_DP_NOT_FOUND
	static const errorWmiUnresolvedInstanceRef = 4205; // ERROR_WMI_UNRESOLVED_INSTANCE_REF
	static const errorWmiAlreadyEnabled = 4206; // ERROR_WMI_ALREADY_ENABLED
	static const errorWmiGuidDisconnected = 4207; // ERROR_WMI_GUID_DISCONNECTED
	static const errorWmiServerUnavailable = 4208; // ERROR_WMI_SERVER_UNAVAILABLE
	static const errorWmiDpFailed = 4209; // ERROR_WMI_DP_FAILED
	static const errorWmiInvalidMof = 4210; // ERROR_WMI_INVALID_MOF
	static const errorWmiInvalidReginfo = 4211; // ERROR_WMI_INVALID_REGINFO
	static const errorWmiAlreadyDisabled = 4212; // ERROR_WMI_ALREADY_DISABLED
	static const errorWmiReadOnly = 4213; // ERROR_WMI_READ_ONLY
	static const errorWmiSetFailure = 4214; // ERROR_WMI_SET_FAILURE
	static const errorNotAppcontainer = 4250; // ERROR_NOT_APPCONTAINER
	static const errorAppcontainerRequired = 4251; // ERROR_APPCONTAINER_REQUIRED
	static const errorNotSupportedInAppcontainer = 4252; // ERROR_NOT_SUPPORTED_IN_APPCONTAINER
	static const errorInvalidPackageSidLength = 4253; // ERROR_INVALID_PACKAGE_SID_LENGTH
	static const errorInvalidMedia = 4300; // ERROR_INVALID_MEDIA
	static const errorInvalidLibrary = 4301; // ERROR_INVALID_LIBRARY
	static const errorInvalidMediaPool = 4302; // ERROR_INVALID_MEDIA_POOL
	static const errorDriveMediaMismatch = 4303; // ERROR_DRIVE_MEDIA_MISMATCH
	static const errorMediaOffline = 4304; // ERROR_MEDIA_OFFLINE
	static const errorLibraryOffline = 4305; // ERROR_LIBRARY_OFFLINE
	static const errorEmpty = 4306; // ERROR_EMPTY
	static const errorNotEmpty = 4307; // ERROR_NOT_EMPTY
	static const errorMediaUnavailable = 4308; // ERROR_MEDIA_UNAVAILABLE
	static const errorResourceDisabled = 4309; // ERROR_RESOURCE_DISABLED
	static const errorInvalidCleaner = 4310; // ERROR_INVALID_CLEANER
	static const errorUnableToClean = 4311; // ERROR_UNABLE_TO_CLEAN
	static const errorObjectNotFound = 4312; // ERROR_OBJECT_NOT_FOUND
	static const errorDatabaseFailure = 4313; // ERROR_DATABASE_FAILURE
	static const errorDatabaseFull = 4314; // ERROR_DATABASE_FULL
	static const errorMediaIncompatible = 4315; // ERROR_MEDIA_INCOMPATIBLE
	static const errorResourceNotPresent = 4316; // ERROR_RESOURCE_NOT_PRESENT
	static const errorInvalidOperation = 4317; // ERROR_INVALID_OPERATION
	static const errorMediaNotAvailable = 4318; // ERROR_MEDIA_NOT_AVAILABLE
	static const errorDeviceNotAvailable = 4319; // ERROR_DEVICE_NOT_AVAILABLE
	static const errorRequestRefused = 4320; // ERROR_REQUEST_REFUSED
	static const errorInvalidDriveObject = 4321; // ERROR_INVALID_DRIVE_OBJECT
	static const errorLibraryFull = 4322; // ERROR_LIBRARY_FULL
	static const errorMediumNotAccessible = 4323; // ERROR_MEDIUM_NOT_ACCESSIBLE
	static const errorUnableToLoadMedium = 4324; // ERROR_UNABLE_TO_LOAD_MEDIUM
	static const errorUnableToInventoryDrive = 4325; // ERROR_UNABLE_TO_INVENTORY_DRIVE
	static const errorUnableToInventorySlot = 4326; // ERROR_UNABLE_TO_INVENTORY_SLOT
	static const errorUnableToInventoryTransport = 4327; // ERROR_UNABLE_TO_INVENTORY_TRANSPORT
	static const errorTransportFull = 4328; // ERROR_TRANSPORT_FULL
	static const errorControllingIeport = 4329; // ERROR_CONTROLLING_IEPORT
	static const errorUnableToEjectMountedMedia = 4330; // ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA
	static const errorCleanerSlotSet = 4331; // ERROR_CLEANER_SLOT_SET
	static const errorCleanerSlotNotSet = 4332; // ERROR_CLEANER_SLOT_NOT_SET
	static const errorCleanerCartridgeSpent = 4333; // ERROR_CLEANER_CARTRIDGE_SPENT
	static const errorUnexpectedOmid = 4334; // ERROR_UNEXPECTED_OMID
	static const errorCantDeleteLastItem = 4335; // ERROR_CANT_DELETE_LAST_ITEM
	static const errorMessageExceedsMaxSize = 4336; // ERROR_MESSAGE_EXCEEDS_MAX_SIZE
	static const errorVolumeContainsSysFiles = 4337; // ERROR_VOLUME_CONTAINS_SYS_FILES
	static const errorIndigenousType = 4338; // ERROR_INDIGENOUS_TYPE
	static const errorNoSupportingDrives = 4339; // ERROR_NO_SUPPORTING_DRIVES
	static const errorCleanerCartridgeInstalled = 4340; // ERROR_CLEANER_CARTRIDGE_INSTALLED
	static const errorIeportFull = 4341; // ERROR_IEPORT_FULL
	static const errorFileOffline = 4350; // ERROR_FILE_OFFLINE
	static const errorRemoteStorageNotActive = 4351; // ERROR_REMOTE_STORAGE_NOT_ACTIVE
	static const errorRemoteStorageMediaError = 4352; // ERROR_REMOTE_STORAGE_MEDIA_ERROR
	static const errorNotAReparsePoint = 4390; // ERROR_NOT_A_REPARSE_POINT
	static const errorReparseAttributeConflict = 4391; // ERROR_REPARSE_ATTRIBUTE_CONFLICT
	static const errorInvalidReparseData = 4392; // ERROR_INVALID_REPARSE_DATA
	static const errorReparseTagInvalid = 4393; // ERROR_REPARSE_TAG_INVALID
	static const errorReparseTagMismatch = 4394; // ERROR_REPARSE_TAG_MISMATCH
	static const errorAppDataNotFound = 4400; // ERROR_APP_DATA_NOT_FOUND
	static const errorAppDataExpired = 4401; // ERROR_APP_DATA_EXPIRED
	static const errorAppDataCorrupt = 4402; // ERROR_APP_DATA_CORRUPT
	static const errorAppDataLimitExceeded = 4403; // ERROR_APP_DATA_LIMIT_EXCEEDED
	static const errorAppDataRebootRequired = 4404; // ERROR_APP_DATA_REBOOT_REQUIRED
	static const errorSecurebootRollbackDetected = 4420; // ERROR_SECUREBOOT_ROLLBACK_DETECTED
	static const errorSecurebootPolicyViolation = 4421; // ERROR_SECUREBOOT_POLICY_VIOLATION
	static const errorSecurebootInvalidPolicy = 4422; // ERROR_SECUREBOOT_INVALID_POLICY
	static const errorSecurebootPolicyPublisherNotFound = 4423; // ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND
	static const errorSecurebootPolicyNotSigned = 4424; // ERROR_SECUREBOOT_POLICY_NOT_SIGNED
	static const errorSecurebootNotEnabled = 4425; // ERROR_SECUREBOOT_NOT_ENABLED
	static const errorSecurebootFileReplaced = 4426; // ERROR_SECUREBOOT_FILE_REPLACED
	static const errorOffloadReadFltNotSupported = 4440; // ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED
	static const errorOffloadWriteFltNotSupported = 4441; // ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED
	static const errorOffloadReadFileNotSupported = 4442; // ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED
	static const errorOffloadWriteFileNotSupported = 4443; // ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED
	static const errorVolumeNotSisEnabled = 4500; // ERROR_VOLUME_NOT_SIS_ENABLED
	static const errorDependentResourceExists = 5001; // ERROR_DEPENDENT_RESOURCE_EXISTS
	static const errorDependencyNotFound = 5002; // ERROR_DEPENDENCY_NOT_FOUND
	static const errorDependencyAlreadyExists = 5003; // ERROR_DEPENDENCY_ALREADY_EXISTS
	static const errorResourceNotOnline = 5004; // ERROR_RESOURCE_NOT_ONLINE
	static const errorHostNodeNotAvailable = 5005; // ERROR_HOST_NODE_NOT_AVAILABLE
	static const errorResourceNotAvailable = 5006; // ERROR_RESOURCE_NOT_AVAILABLE
	static const errorResourceNotFound = 5007; // ERROR_RESOURCE_NOT_FOUND
	static const errorShutdownCluster = 5008; // ERROR_SHUTDOWN_CLUSTER
	static const errorCantEvictActiveNode = 5009; // ERROR_CANT_EVICT_ACTIVE_NODE
	static const errorObjectAlreadyExists = 5010; // ERROR_OBJECT_ALREADY_EXISTS
	static const errorObjectInList = 5011; // ERROR_OBJECT_IN_LIST
	static const errorGroupNotAvailable = 5012; // ERROR_GROUP_NOT_AVAILABLE
	static const errorGroupNotFound = 5013; // ERROR_GROUP_NOT_FOUND
	static const errorGroupNotOnline = 5014; // ERROR_GROUP_NOT_ONLINE
	static const errorHostNodeNotResourceOwner = 5015; // ERROR_HOST_NODE_NOT_RESOURCE_OWNER
	static const errorHostNodeNotGroupOwner = 5016; // ERROR_HOST_NODE_NOT_GROUP_OWNER
	static const errorResmonCreateFailed = 5017; // ERROR_RESMON_CREATE_FAILED
	static const errorResmonOnlineFailed = 5018; // ERROR_RESMON_ONLINE_FAILED
	static const errorResourceOnline = 5019; // ERROR_RESOURCE_ONLINE
	static const errorQuorumResource = 5020; // ERROR_QUORUM_RESOURCE
	static const errorNotQuorumCapable = 5021; // ERROR_NOT_QUORUM_CAPABLE
	static const errorClusterShuttingDown = 5022; // ERROR_CLUSTER_SHUTTING_DOWN
	static const errorInvalidState = 5023; // ERROR_INVALID_STATE
	static const errorResourcePropertiesStored = 5024; // ERROR_RESOURCE_PROPERTIES_STORED
	static const errorNotQuorumClass = 5025; // ERROR_NOT_QUORUM_CLASS
	static const errorCoreResource = 5026; // ERROR_CORE_RESOURCE
	static const errorQuorumResourceOnlineFailed = 5027; // ERROR_QUORUM_RESOURCE_ONLINE_FAILED
	static const errorQuorumlogOpenFailed = 5028; // ERROR_QUORUMLOG_OPEN_FAILED
	static const errorClusterlogCorrupt = 5029; // ERROR_CLUSTERLOG_CORRUPT
	static const errorClusterlogRecordExceedsMaxsize = 5030; // ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE
	static const errorClusterlogExceedsMaxsize = 5031; // ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE
	static const errorClusterlogChkpointNotFound = 5032; // ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND
	static const errorClusterlogNotEnoughSpace = 5033; // ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE
	static const errorQuorumOwnerAlive = 5034; // ERROR_QUORUM_OWNER_ALIVE
	static const errorNetworkNotAvailable = 5035; // ERROR_NETWORK_NOT_AVAILABLE
	static const errorNodeNotAvailable = 5036; // ERROR_NODE_NOT_AVAILABLE
	static const errorAllNodesNotAvailable = 5037; // ERROR_ALL_NODES_NOT_AVAILABLE
	static const errorResourceFailed = 5038; // ERROR_RESOURCE_FAILED
	static const errorClusterInvalidNode = 5039; // ERROR_CLUSTER_INVALID_NODE
	static const errorClusterNodeExists = 5040; // ERROR_CLUSTER_NODE_EXISTS
	static const errorClusterJoinInProgress = 5041; // ERROR_CLUSTER_JOIN_IN_PROGRESS
	static const errorClusterNodeNotFound = 5042; // ERROR_CLUSTER_NODE_NOT_FOUND
	static const errorClusterLocalNodeNotFound = 5043; // ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND
	static const errorClusterNetworkExists = 5044; // ERROR_CLUSTER_NETWORK_EXISTS
	static const errorClusterNetworkNotFound = 5045; // ERROR_CLUSTER_NETWORK_NOT_FOUND
	static const errorClusterNetinterfaceExists = 5046; // ERROR_CLUSTER_NETINTERFACE_EXISTS
	static const errorClusterNetinterfaceNotFound = 5047; // ERROR_CLUSTER_NETINTERFACE_NOT_FOUND
	static const errorClusterInvalidRequest = 5048; // ERROR_CLUSTER_INVALID_REQUEST
	static const errorClusterInvalidNetworkProvider = 5049; // ERROR_CLUSTER_INVALID_NETWORK_PROVIDER
	static const errorClusterNodeDown = 5050; // ERROR_CLUSTER_NODE_DOWN
	static const errorClusterNodeUnreachable = 5051; // ERROR_CLUSTER_NODE_UNREACHABLE
	static const errorClusterNodeNotMember = 5052; // ERROR_CLUSTER_NODE_NOT_MEMBER
	static const errorClusterJoinNotInProgress = 5053; // ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS
	static const errorClusterInvalidNetwork = 5054; // ERROR_CLUSTER_INVALID_NETWORK
	static const errorClusterNodeUp = 5056; // ERROR_CLUSTER_NODE_UP
	static const errorClusterIpaddrInUse = 5057; // ERROR_CLUSTER_IPADDR_IN_USE
	static const errorClusterNodeNotPaused = 5058; // ERROR_CLUSTER_NODE_NOT_PAUSED
	static const errorClusterNoSecurityContext = 5059; // ERROR_CLUSTER_NO_SECURITY_CONTEXT
	static const errorClusterNetworkNotInternal = 5060; // ERROR_CLUSTER_NETWORK_NOT_INTERNAL
	static const errorClusterNodeAlreadyUp = 5061; // ERROR_CLUSTER_NODE_ALREADY_UP
	static const errorClusterNodeAlreadyDown = 5062; // ERROR_CLUSTER_NODE_ALREADY_DOWN
	static const errorClusterNetworkAlreadyOnline = 5063; // ERROR_CLUSTER_NETWORK_ALREADY_ONLINE
	static const errorClusterNetworkAlreadyOffline = 5064; // ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE
	static const errorClusterNodeAlreadyMember = 5065; // ERROR_CLUSTER_NODE_ALREADY_MEMBER
	static const errorClusterLastInternalNetwork = 5066; // ERROR_CLUSTER_LAST_INTERNAL_NETWORK
	static const errorClusterNetworkHasDependents = 5067; // ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS
	static const errorInvalidOperationOnQuorum = 5068; // ERROR_INVALID_OPERATION_ON_QUORUM
	static const errorDependencyNotAllowed = 5069; // ERROR_DEPENDENCY_NOT_ALLOWED
	static const errorClusterNodePaused = 5070; // ERROR_CLUSTER_NODE_PAUSED
	static const errorNodeCantHostResource = 5071; // ERROR_NODE_CANT_HOST_RESOURCE
	static const errorClusterNodeNotReady = 5072; // ERROR_CLUSTER_NODE_NOT_READY
	static const errorClusterNodeShuttingDown = 5073; // ERROR_CLUSTER_NODE_SHUTTING_DOWN
	static const errorClusterJoinAborted = 5074; // ERROR_CLUSTER_JOIN_ABORTED
	static const errorClusterIncompatibleVersions = 5075; // ERROR_CLUSTER_INCOMPATIBLE_VERSIONS
	static const errorClusterMaxnumOfResourcesExceeded = 5076; // ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED
	static const errorClusterSystemConfigChanged = 5077; // ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED
	static const errorClusterResourceTypeNotFound = 5078; // ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND
	static const errorClusterRestypeNotSupported = 5079; // ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED
	static const errorClusterResnameNotFound = 5080; // ERROR_CLUSTER_RESNAME_NOT_FOUND
	static const errorClusterNoRpcPackagesRegistered = 5081; // ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED
	static const errorClusterOwnerNotInPreflist = 5082; // ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST
	static const errorClusterDatabaseSeqmismatch = 5083; // ERROR_CLUSTER_DATABASE_SEQMISMATCH
	static const errorResmonInvalidState = 5084; // ERROR_RESMON_INVALID_STATE
	static const errorClusterGumNotLocker = 5085; // ERROR_CLUSTER_GUM_NOT_LOCKER
	static const errorQuorumDiskNotFound = 5086; // ERROR_QUORUM_DISK_NOT_FOUND
	static const errorDatabaseBackupCorrupt = 5087; // ERROR_DATABASE_BACKUP_CORRUPT
	static const errorClusterNodeAlreadyHasDfsRoot = 5088; // ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT
	static const errorResourcePropertyUnchangeable = 5089; // ERROR_RESOURCE_PROPERTY_UNCHANGEABLE
	static const errorClusterMembershipInvalidState = 5890; // ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE
	static const errorClusterQuorumlogNotFound = 5891; // ERROR_CLUSTER_QUORUMLOG_NOT_FOUND
	static const errorClusterMembershipHalt = 5892; // ERROR_CLUSTER_MEMBERSHIP_HALT
	static const errorClusterInstanceIdMismatch = 5893; // ERROR_CLUSTER_INSTANCE_ID_MISMATCH
	static const errorClusterNetworkNotFoundForIp = 5894; // ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP
	static const errorClusterPropertyDataTypeMismatch = 5895; // ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH
	static const errorClusterEvictWithoutCleanup = 5896; // ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP
	static const errorClusterParameterMismatch = 5897; // ERROR_CLUSTER_PARAMETER_MISMATCH
	static const errorNodeCannotBeClustered = 5898; // ERROR_NODE_CANNOT_BE_CLUSTERED
	static const errorClusterWrongOsVersion = 5899; // ERROR_CLUSTER_WRONG_OS_VERSION
	static const errorClusterCantCreateDupClusterName = 5900; // ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME
	static const errorCluscfgAlreadyCommitted = 5901; // ERROR_CLUSCFG_ALREADY_COMMITTED
	static const errorCluscfgRollbackFailed = 5902; // ERROR_CLUSCFG_ROLLBACK_FAILED
	static const errorCluscfgSystemDiskDriveLetterConflict = 5903; // ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT
	static const errorClusterOldVersion = 5904; // ERROR_CLUSTER_OLD_VERSION
	static const errorClusterMismatchedComputerAcctName = 5905; // ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME
	static const errorClusterNoNetAdapters = 5906; // ERROR_CLUSTER_NO_NET_ADAPTERS
	static const errorClusterPoisoned = 5907; // ERROR_CLUSTER_POISONED
	static const errorClusterGroupMoving = 5908; // ERROR_CLUSTER_GROUP_MOVING
	static const errorClusterResourceTypeBusy = 5909; // ERROR_CLUSTER_RESOURCE_TYPE_BUSY
	static const errorResourceCallTimedOut = 5910; // ERROR_RESOURCE_CALL_TIMED_OUT
	static const errorInvalidClusterIpv6Address = 5911; // ERROR_INVALID_CLUSTER_IPV6_ADDRESS
	static const errorClusterInternalInvalidFunction = 5912; // ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION
	static const errorClusterParameterOutOfBounds = 5913; // ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS
	static const errorClusterPartialSend = 5914; // ERROR_CLUSTER_PARTIAL_SEND
	static const errorClusterRegistryInvalidFunction = 5915; // ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION
	static const errorClusterInvalidStringTermination = 5916; // ERROR_CLUSTER_INVALID_STRING_TERMINATION
	static const errorClusterInvalidStringFormat = 5917; // ERROR_CLUSTER_INVALID_STRING_FORMAT
	static const errorClusterDatabaseTransactionInProgress = 5918; // ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS
	static const errorClusterDatabaseTransactionNotInProgress = 5919; // ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS
	static const errorClusterNullData = 5920; // ERROR_CLUSTER_NULL_DATA
	static const errorClusterPartialRead = 5921; // ERROR_CLUSTER_PARTIAL_READ
	static const errorClusterPartialWrite = 5922; // ERROR_CLUSTER_PARTIAL_WRITE
	static const errorClusterCantDeserializeData = 5923; // ERROR_CLUSTER_CANT_DESERIALIZE_DATA
	static const errorDependentResourcePropertyConflict = 5924; // ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT
	static const errorClusterNoQuorum = 5925; // ERROR_CLUSTER_NO_QUORUM
	static const errorClusterInvalidIpv6Network = 5926; // ERROR_CLUSTER_INVALID_IPV6_NETWORK
	static const errorClusterInvalidIpv6TunnelNetwork = 5927; // ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK
	static const errorQuorumNotAllowedInThisGroup = 5928; // ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP
	static const errorDependencyTreeTooComplex = 5929; // ERROR_DEPENDENCY_TREE_TOO_COMPLEX
	static const errorExceptionInResourceCall = 5930; // ERROR_EXCEPTION_IN_RESOURCE_CALL
	static const errorClusterRhsFailedInitialization = 5931; // ERROR_CLUSTER_RHS_FAILED_INITIALIZATION
	static const errorClusterNotInstalled = 5932; // ERROR_CLUSTER_NOT_INSTALLED
	static const errorClusterResourcesMustBeOnlineOnTheSameNode = 5933; // ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE
	static const errorClusterMaxNodesInCluster = 5934; // ERROR_CLUSTER_MAX_NODES_IN_CLUSTER
	static const errorClusterTooManyNodes = 5935; // ERROR_CLUSTER_TOO_MANY_NODES
	static const errorClusterObjectAlreadyUsed = 5936; // ERROR_CLUSTER_OBJECT_ALREADY_USED
	static const errorNoncoreGroupsFound = 5937; // ERROR_NONCORE_GROUPS_FOUND
	static const errorFileShareResourceConflict = 5938; // ERROR_FILE_SHARE_RESOURCE_CONFLICT
	static const errorClusterEvictInvalidRequest = 5939; // ERROR_CLUSTER_EVICT_INVALID_REQUEST
	static const errorClusterSingletonResource = 5940; // ERROR_CLUSTER_SINGLETON_RESOURCE
	static const errorClusterGroupSingletonResource = 5941; // ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE
	static const errorClusterResourceProviderFailed = 5942; // ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED
	static const errorClusterResourceConfigurationError = 5943; // ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR
	static const errorClusterGroupBusy = 5944; // ERROR_CLUSTER_GROUP_BUSY
	static const errorClusterNotSharedVolume = 5945; // ERROR_CLUSTER_NOT_SHARED_VOLUME
	static const errorClusterInvalidSecurityDescriptor = 5946; // ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR
	static const errorClusterSharedVolumesInUse = 5947; // ERROR_CLUSTER_SHARED_VOLUMES_IN_USE
	static const errorClusterUseSharedVolumesApi = 5948; // ERROR_CLUSTER_USE_SHARED_VOLUMES_API
	static const errorClusterBackupInProgress = 5949; // ERROR_CLUSTER_BACKUP_IN_PROGRESS
	static const errorNonCsvPath = 5950; // ERROR_NON_CSV_PATH
	static const errorCsvVolumeNotLocal = 5951; // ERROR_CSV_VOLUME_NOT_LOCAL
	static const errorClusterWatchdogTerminating = 5952; // ERROR_CLUSTER_WATCHDOG_TERMINATING
	static const errorClusterResourceVetoedMoveIncompatibleNodes = 5953; // ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES
	static const errorClusterInvalidNodeWeight = 5954; // ERROR_CLUSTER_INVALID_NODE_WEIGHT
	static const errorClusterResourceVetoedCall = 5955; // ERROR_CLUSTER_RESOURCE_VETOED_CALL
	static const errorResmonSystemResourcesLacking = 5956; // ERROR_RESMON_SYSTEM_RESOURCES_LACKING
	static const errorClusterResourceVetoedMoveNotEnoughResourcesOnDestination = 5957; // ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION
	static const errorClusterResourceVetoedMoveNotEnoughResourcesOnSource = 5958; // ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE
	static const errorClusterGroupQueued = 5959; // ERROR_CLUSTER_GROUP_QUEUED
	static const errorClusterResourceLockedStatus = 5960; // ERROR_CLUSTER_RESOURCE_LOCKED_STATUS
	static const errorClusterSharedVolumeFailoverNotAllowed = 5961; // ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED
	static const errorClusterNodeDrainInProgress = 5962; // ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS
	static const errorClusterDiskNotConnected = 5963; // ERROR_CLUSTER_DISK_NOT_CONNECTED
	static const errorDiskNotCsvCapable = 5964; // ERROR_DISK_NOT_CSV_CAPABLE
	static const errorResourceNotInAvailableStorage = 5965; // ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE
	static const errorClusterSharedVolumeRedirected = 5966; // ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED
	static const errorClusterSharedVolumeNotRedirected = 5967; // ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED
	static const errorClusterCannotReturnProperties = 5968; // ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES
	static const errorClusterResourceContainsUnsupportedDiffAreaForSharedVolumes = 5969; // ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES
	static const errorClusterResourceIsInMaintenanceMode = 5970; // ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE
	static const errorClusterAffinityConflict = 5971; // ERROR_CLUSTER_AFFINITY_CONFLICT
	static const errorClusterResourceIsReplicaVirtualMachine = 5972; // ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE
	static const errorEncryptionFailed = 6000; // ERROR_ENCRYPTION_FAILED
	static const errorDecryptionFailed = 6001; // ERROR_DECRYPTION_FAILED
	static const errorFileEncrypted = 6002; // ERROR_FILE_ENCRYPTED
	static const errorNoRecoveryPolicy = 6003; // ERROR_NO_RECOVERY_POLICY
	static const errorNoEfs = 6004; // ERROR_NO_EFS
	static const errorWrongEfs = 6005; // ERROR_WRONG_EFS
	static const errorNoUserKeys = 6006; // ERROR_NO_USER_KEYS
	static const errorFileNotEncrypted = 6007; // ERROR_FILE_NOT_ENCRYPTED
	static const errorNotExportFormat = 6008; // ERROR_NOT_EXPORT_FORMAT
	static const errorFileReadOnly = 6009; // ERROR_FILE_READ_ONLY
	static const errorDirEfsDisallowed = 6010; // ERROR_DIR_EFS_DISALLOWED
	static const errorEfsServerNotTrusted = 6011; // ERROR_EFS_SERVER_NOT_TRUSTED
	static const errorBadRecoveryPolicy = 6012; // ERROR_BAD_RECOVERY_POLICY
	static const errorEfsAlgBlobTooBig = 6013; // ERROR_EFS_ALG_BLOB_TOO_BIG
	static const errorVolumeNotSupportEfs = 6014; // ERROR_VOLUME_NOT_SUPPORT_EFS
	static const errorEfsDisabled = 6015; // ERROR_EFS_DISABLED
	static const errorEfsVersionNotSupport = 6016; // ERROR_EFS_VERSION_NOT_SUPPORT
	static const errorCsEncryptionInvalidServerResponse = 6017; // ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE
	static const errorCsEncryptionUnsupportedServer = 6018; // ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER
	static const errorCsEncryptionExistingEncryptedFile = 6019; // ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE
	static const errorCsEncryptionNewEncryptedFile = 6020; // ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE
	static const errorCsEncryptionFileNotCse = 6021; // ERROR_CS_ENCRYPTION_FILE_NOT_CSE
	static const errorEncryptionPolicyDeniesOperation = 6022; // ERROR_ENCRYPTION_POLICY_DENIES_OPERATION
	static const errorNoBrowserServersFound = 6118; // ERROR_NO_BROWSER_SERVERS_FOUND
	static const schedEServiceNotLocalsystem = 6200; // SCHED_E_SERVICE_NOT_LOCALSYSTEM
	static const errorLogSectorInvalid = 6600; // ERROR_LOG_SECTOR_INVALID
	static const errorLogSectorParityInvalid = 6601; // ERROR_LOG_SECTOR_PARITY_INVALID
	static const errorLogSectorRemapped = 6602; // ERROR_LOG_SECTOR_REMAPPED
	static const errorLogBlockIncomplete = 6603; // ERROR_LOG_BLOCK_INCOMPLETE
	static const errorLogInvalidRange = 6604; // ERROR_LOG_INVALID_RANGE
	static const errorLogBlocksExhausted = 6605; // ERROR_LOG_BLOCKS_EXHAUSTED
	static const errorLogReadContextInvalid = 6606; // ERROR_LOG_READ_CONTEXT_INVALID
	static const errorLogRestartInvalid = 6607; // ERROR_LOG_RESTART_INVALID
	static const errorLogBlockVersion = 6608; // ERROR_LOG_BLOCK_VERSION
	static const errorLogBlockInvalid = 6609; // ERROR_LOG_BLOCK_INVALID
	static const errorLogReadModeInvalid = 6610; // ERROR_LOG_READ_MODE_INVALID
	static const errorLogNoRestart = 6611; // ERROR_LOG_NO_RESTART
	static const errorLogMetadataCorrupt = 6612; // ERROR_LOG_METADATA_CORRUPT
	static const errorLogMetadataInvalid = 6613; // ERROR_LOG_METADATA_INVALID
	static const errorLogMetadataInconsistent = 6614; // ERROR_LOG_METADATA_INCONSISTENT
	static const errorLogReservationInvalid = 6615; // ERROR_LOG_RESERVATION_INVALID
	static const errorLogCantDelete = 6616; // ERROR_LOG_CANT_DELETE
	static const errorLogContainerLimitExceeded = 6617; // ERROR_LOG_CONTAINER_LIMIT_EXCEEDED
	static const errorLogStartOfLog = 6618; // ERROR_LOG_START_OF_LOG
	static const errorLogPolicyAlreadyInstalled = 6619; // ERROR_LOG_POLICY_ALREADY_INSTALLED
	static const errorLogPolicyNotInstalled = 6620; // ERROR_LOG_POLICY_NOT_INSTALLED
	static const errorLogPolicyInvalid = 6621; // ERROR_LOG_POLICY_INVALID
	static const errorLogPolicyConflict = 6622; // ERROR_LOG_POLICY_CONFLICT
	static const errorLogPinnedArchiveTail = 6623; // ERROR_LOG_PINNED_ARCHIVE_TAIL
	static const errorLogRecordNonexistent = 6624; // ERROR_LOG_RECORD_NONEXISTENT
	static const errorLogRecordsReservedInvalid = 6625; // ERROR_LOG_RECORDS_RESERVED_INVALID
	static const errorLogSpaceReservedInvalid = 6626; // ERROR_LOG_SPACE_RESERVED_INVALID
	static const errorLogTailInvalid = 6627; // ERROR_LOG_TAIL_INVALID
	static const errorLogFull = 6628; // ERROR_LOG_FULL
	static const errorCouldNotResizeLog = 6629; // ERROR_COULD_NOT_RESIZE_LOG
	static const errorLogMultiplexed = 6630; // ERROR_LOG_MULTIPLEXED
	static const errorLogDedicated = 6631; // ERROR_LOG_DEDICATED
	static const errorLogArchiveNotInProgress = 6632; // ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS
	static const errorLogArchiveInProgress = 6633; // ERROR_LOG_ARCHIVE_IN_PROGRESS
	static const errorLogEphemeral = 6634; // ERROR_LOG_EPHEMERAL
	static const errorLogNotEnoughContainers = 6635; // ERROR_LOG_NOT_ENOUGH_CONTAINERS
	static const errorLogClientAlreadyRegistered = 6636; // ERROR_LOG_CLIENT_ALREADY_REGISTERED
	static const errorLogClientNotRegistered = 6637; // ERROR_LOG_CLIENT_NOT_REGISTERED
	static const errorLogFullHandlerInProgress = 6638; // ERROR_LOG_FULL_HANDLER_IN_PROGRESS
	static const errorLogContainerReadFailed = 6639; // ERROR_LOG_CONTAINER_READ_FAILED
	static const errorLogContainerWriteFailed = 6640; // ERROR_LOG_CONTAINER_WRITE_FAILED
	static const errorLogContainerOpenFailed = 6641; // ERROR_LOG_CONTAINER_OPEN_FAILED
	static const errorLogContainerStateInvalid = 6642; // ERROR_LOG_CONTAINER_STATE_INVALID
	static const errorLogStateInvalid = 6643; // ERROR_LOG_STATE_INVALID
	static const errorLogPinned = 6644; // ERROR_LOG_PINNED
	static const errorLogMetadataFlushFailed = 6645; // ERROR_LOG_METADATA_FLUSH_FAILED
	static const errorLogInconsistentSecurity = 6646; // ERROR_LOG_INCONSISTENT_SECURITY
	static const errorLogAppendedFlushFailed = 6647; // ERROR_LOG_APPENDED_FLUSH_FAILED
	static const errorLogPinnedReservation = 6648; // ERROR_LOG_PINNED_RESERVATION
	static const errorInvalidTransaction = 6700; // ERROR_INVALID_TRANSACTION
	static const errorTransactionNotActive = 6701; // ERROR_TRANSACTION_NOT_ACTIVE
	static const errorTransactionRequestNotValid = 6702; // ERROR_TRANSACTION_REQUEST_NOT_VALID
	static const errorTransactionNotRequested = 6703; // ERROR_TRANSACTION_NOT_REQUESTED
	static const errorTransactionAlreadyAborted = 6704; // ERROR_TRANSACTION_ALREADY_ABORTED
	static const errorTransactionAlreadyCommitted = 6705; // ERROR_TRANSACTION_ALREADY_COMMITTED
	static const errorTmInitializationFailed = 6706; // ERROR_TM_INITIALIZATION_FAILED
	static const errorResourcemanagerReadOnly = 6707; // ERROR_RESOURCEMANAGER_READ_ONLY
	static const errorTransactionNotJoined = 6708; // ERROR_TRANSACTION_NOT_JOINED
	static const errorTransactionSuperiorExists = 6709; // ERROR_TRANSACTION_SUPERIOR_EXISTS
	static const errorCrmProtocolAlreadyExists = 6710; // ERROR_CRM_PROTOCOL_ALREADY_EXISTS
	static const errorTransactionPropagationFailed = 6711; // ERROR_TRANSACTION_PROPAGATION_FAILED
	static const errorCrmProtocolNotFound = 6712; // ERROR_CRM_PROTOCOL_NOT_FOUND
	static const errorTransactionInvalidMarshallBuffer = 6713; // ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER
	static const errorCurrentTransactionNotValid = 6714; // ERROR_CURRENT_TRANSACTION_NOT_VALID
	static const errorTransactionNotFound = 6715; // ERROR_TRANSACTION_NOT_FOUND
	static const errorResourcemanagerNotFound = 6716; // ERROR_RESOURCEMANAGER_NOT_FOUND
	static const errorEnlistmentNotFound = 6717; // ERROR_ENLISTMENT_NOT_FOUND
	static const errorTransactionmanagerNotFound = 6718; // ERROR_TRANSACTIONMANAGER_NOT_FOUND
	static const errorTransactionmanagerNotOnline = 6719; // ERROR_TRANSACTIONMANAGER_NOT_ONLINE
	static const errorTransactionmanagerRecoveryNameCollision = 6720; // ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION
	static const errorTransactionNotRoot = 6721; // ERROR_TRANSACTION_NOT_ROOT
	static const errorTransactionObjectExpired = 6722; // ERROR_TRANSACTION_OBJECT_EXPIRED
	static const errorTransactionResponseNotEnlisted = 6723; // ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED
	static const errorTransactionRecordTooLong = 6724; // ERROR_TRANSACTION_RECORD_TOO_LONG
	static const errorImplicitTransactionNotSupported = 6725; // ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED
	static const errorTransactionIntegrityViolated = 6726; // ERROR_TRANSACTION_INTEGRITY_VIOLATED
	static const errorTransactionmanagerIdentityMismatch = 6727; // ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH
	static const errorRmCannotBeFrozenForSnapshot = 6728; // ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT
	static const errorTransactionMustWritethrough = 6729; // ERROR_TRANSACTION_MUST_WRITETHROUGH
	static const errorTransactionNoSuperior = 6730; // ERROR_TRANSACTION_NO_SUPERIOR
	static const errorHeuristicDamagePossible = 6731; // ERROR_HEURISTIC_DAMAGE_POSSIBLE
	static const errorTransactionalConflict = 6800; // ERROR_TRANSACTIONAL_CONFLICT
	static const errorRmNotActive = 6801; // ERROR_RM_NOT_ACTIVE
	static const errorRmMetadataCorrupt = 6802; // ERROR_RM_METADATA_CORRUPT
	static const errorDirectoryNotRm = 6803; // ERROR_DIRECTORY_NOT_RM
	static const errorTransactionsUnsupportedRemote = 6805; // ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE
	static const errorLogResizeInvalidSize = 6806; // ERROR_LOG_RESIZE_INVALID_SIZE
	static const errorObjectNoLongerExists = 6807; // ERROR_OBJECT_NO_LONGER_EXISTS
	static const errorStreamMiniversionNotFound = 6808; // ERROR_STREAM_MINIVERSION_NOT_FOUND
	static const errorStreamMiniversionNotValid = 6809; // ERROR_STREAM_MINIVERSION_NOT_VALID
	static const errorMiniversionInaccessibleFromSpecifiedTransaction = 6810; // ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION
	static const errorCantOpenMiniversionWithModifyIntent = 6811; // ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT
	static const errorCantCreateMoreStreamMiniversions = 6812; // ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS
	static const errorRemoteFileVersionMismatch = 6814; // ERROR_REMOTE_FILE_VERSION_MISMATCH
	static const errorHandleNoLongerValid = 6815; // ERROR_HANDLE_NO_LONGER_VALID
	static const errorNoTxfMetadata = 6816; // ERROR_NO_TXF_METADATA
	static const errorLogCorruptionDetected = 6817; // ERROR_LOG_CORRUPTION_DETECTED
	static const errorCantRecoverWithHandleOpen = 6818; // ERROR_CANT_RECOVER_WITH_HANDLE_OPEN
	static const errorRmDisconnected = 6819; // ERROR_RM_DISCONNECTED
	static const errorEnlistmentNotSuperior = 6820; // ERROR_ENLISTMENT_NOT_SUPERIOR
	static const errorRecoveryNotNeeded = 6821; // ERROR_RECOVERY_NOT_NEEDED
	static const errorRmAlreadyStarted = 6822; // ERROR_RM_ALREADY_STARTED
	static const errorFileIdentityNotPersistent = 6823; // ERROR_FILE_IDENTITY_NOT_PERSISTENT
	static const errorCantBreakTransactionalDependency = 6824; // ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY
	static const errorCantCrossRmBoundary = 6825; // ERROR_CANT_CROSS_RM_BOUNDARY
	static const errorTxfDirNotEmpty = 6826; // ERROR_TXF_DIR_NOT_EMPTY
	static const errorIndoubtTransactionsExist = 6827; // ERROR_INDOUBT_TRANSACTIONS_EXIST
	static const errorTmVolatile = 6828; // ERROR_TM_VOLATILE
	static const errorRollbackTimerExpired = 6829; // ERROR_ROLLBACK_TIMER_EXPIRED
	static const errorTxfAttributeCorrupt = 6830; // ERROR_TXF_ATTRIBUTE_CORRUPT
	static const errorEfsNotAllowedInTransaction = 6831; // ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION
	static const errorTransactionalOpenNotAllowed = 6832; // ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED
	static const errorLogGrowthFailed = 6833; // ERROR_LOG_GROWTH_FAILED
	static const errorTransactedMappingUnsupportedRemote = 6834; // ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE
	static const errorTxfMetadataAlreadyPresent = 6835; // ERROR_TXF_METADATA_ALREADY_PRESENT
	static const errorTransactionScopeCallbacksNotSet = 6836; // ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET
	static const errorTransactionRequiredPromotion = 6837; // ERROR_TRANSACTION_REQUIRED_PROMOTION
	static const errorCannotExecuteFileInTransaction = 6838; // ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION
	static const errorTransactionsNotFrozen = 6839; // ERROR_TRANSACTIONS_NOT_FROZEN
	static const errorTransactionFreezeInProgress = 6840; // ERROR_TRANSACTION_FREEZE_IN_PROGRESS
	static const errorNotSnapshotVolume = 6841; // ERROR_NOT_SNAPSHOT_VOLUME
	static const errorNoSavepointWithOpenFiles = 6842; // ERROR_NO_SAVEPOINT_WITH_OPEN_FILES
	static const errorDataLostRepair = 6843; // ERROR_DATA_LOST_REPAIR
	static const errorSparseNotAllowedInTransaction = 6844; // ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION
	static const errorTmIdentityMismatch = 6845; // ERROR_TM_IDENTITY_MISMATCH
	static const errorFloatedSection = 6846; // ERROR_FLOATED_SECTION
	static const errorCannotAcceptTransactedWork = 6847; // ERROR_CANNOT_ACCEPT_TRANSACTED_WORK
	static const errorCannotAbortTransactions = 6848; // ERROR_CANNOT_ABORT_TRANSACTIONS
	static const errorBadClusters = 6849; // ERROR_BAD_CLUSTERS
	static const errorCompressionNotAllowedInTransaction = 6850; // ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION
	static const errorVolumeDirty = 6851; // ERROR_VOLUME_DIRTY
	static const errorNoLinkTrackingInTransaction = 6852; // ERROR_NO_LINK_TRACKING_IN_TRANSACTION
	static const errorOperationNotSupportedInTransaction = 6853; // ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION
	static const errorExpiredHandle = 6854; // ERROR_EXPIRED_HANDLE
	static const errorTransactionNotEnlisted = 6855; // ERROR_TRANSACTION_NOT_ENLISTED
	static const errorCtxWinstationNameInvalid = 7001; // ERROR_CTX_WINSTATION_NAME_INVALID
	static const errorCtxInvalidPd = 7002; // ERROR_CTX_INVALID_PD
	static const errorCtxPdNotFound = 7003; // ERROR_CTX_PD_NOT_FOUND
	static const errorCtxWdNotFound = 7004; // ERROR_CTX_WD_NOT_FOUND
	static const errorCtxCannotMakeEventlogEntry = 7005; // ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY
	static const errorCtxServiceNameCollision = 7006; // ERROR_CTX_SERVICE_NAME_COLLISION
	static const errorCtxClosePending = 7007; // ERROR_CTX_CLOSE_PENDING
	static const errorCtxNoOutbuf = 7008; // ERROR_CTX_NO_OUTBUF
	static const errorCtxModemInfNotFound = 7009; // ERROR_CTX_MODEM_INF_NOT_FOUND
	static const errorCtxInvalidModemname = 7010; // ERROR_CTX_INVALID_MODEMNAME
	static const errorCtxModemResponseError = 7011; // ERROR_CTX_MODEM_RESPONSE_ERROR
	static const errorCtxModemResponseTimeout = 7012; // ERROR_CTX_MODEM_RESPONSE_TIMEOUT
	static const errorCtxModemResponseNoCarrier = 7013; // ERROR_CTX_MODEM_RESPONSE_NO_CARRIER
	static const errorCtxModemResponseNoDialtone = 7014; // ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE
	static const errorCtxModemResponseBusy = 7015; // ERROR_CTX_MODEM_RESPONSE_BUSY
	static const errorCtxModemResponseVoice = 7016; // ERROR_CTX_MODEM_RESPONSE_VOICE
	static const errorCtxTdError = 7017; // ERROR_CTX_TD_ERROR
	static const errorCtxWinstationNotFound = 7022; // ERROR_CTX_WINSTATION_NOT_FOUND
	static const errorCtxWinstationAlreadyExists = 7023; // ERROR_CTX_WINSTATION_ALREADY_EXISTS
	static const errorCtxWinstationBusy = 7024; // ERROR_CTX_WINSTATION_BUSY
	static const errorCtxBadVideoMode = 7025; // ERROR_CTX_BAD_VIDEO_MODE
	static const errorCtxGraphicsInvalid = 7035; // ERROR_CTX_GRAPHICS_INVALID
	static const errorCtxLogonDisabled = 7037; // ERROR_CTX_LOGON_DISABLED
	static const errorCtxNotConsole = 7038; // ERROR_CTX_NOT_CONSOLE
	static const errorCtxClientQueryTimeout = 7040; // ERROR_CTX_CLIENT_QUERY_TIMEOUT
	static const errorCtxConsoleDisconnect = 7041; // ERROR_CTX_CONSOLE_DISCONNECT
	static const errorCtxConsoleConnect = 7042; // ERROR_CTX_CONSOLE_CONNECT
	static const errorCtxShadowDenied = 7044; // ERROR_CTX_SHADOW_DENIED
	static const errorCtxWinstationAccessDenied = 7045; // ERROR_CTX_WINSTATION_ACCESS_DENIED
	static const errorCtxInvalidWd = 7049; // ERROR_CTX_INVALID_WD
	static const errorCtxShadowInvalid = 7050; // ERROR_CTX_SHADOW_INVALID
	static const errorCtxShadowDisabled = 7051; // ERROR_CTX_SHADOW_DISABLED
	static const errorCtxClientLicenseInUse = 7052; // ERROR_CTX_CLIENT_LICENSE_IN_USE
	static const errorCtxClientLicenseNotSet = 7053; // ERROR_CTX_CLIENT_LICENSE_NOT_SET
	static const errorCtxLicenseNotAvailable = 7054; // ERROR_CTX_LICENSE_NOT_AVAILABLE
	static const errorCtxLicenseClientInvalid = 7055; // ERROR_CTX_LICENSE_CLIENT_INVALID
	static const errorCtxLicenseExpired = 7056; // ERROR_CTX_LICENSE_EXPIRED
	static const errorCtxShadowNotRunning = 7057; // ERROR_CTX_SHADOW_NOT_RUNNING
	static const errorCtxShadowEndedByModeChange = 7058; // ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE
	static const errorActivationCountExceeded = 7059; // ERROR_ACTIVATION_COUNT_EXCEEDED
	static const errorCtxWinstationsDisabled = 7060; // ERROR_CTX_WINSTATIONS_DISABLED
	static const errorCtxEncryptionLevelRequired = 7061; // ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED
	static const errorCtxSessionInUse = 7062; // ERROR_CTX_SESSION_IN_USE
	static const errorCtxNoForceLogoff = 7063; // ERROR_CTX_NO_FORCE_LOGOFF
	static const errorCtxAccountRestriction = 7064; // ERROR_CTX_ACCOUNT_RESTRICTION
	static const errorRdpProtocolError = 7065; // ERROR_RDP_PROTOCOL_ERROR
	static const errorCtxCdmConnect = 7066; // ERROR_CTX_CDM_CONNECT
	static const errorCtxCdmDisconnect = 7067; // ERROR_CTX_CDM_DISCONNECT
	static const errorCtxSecurityLayerError = 7068; // ERROR_CTX_SECURITY_LAYER_ERROR
	static const errorTsIncompatibleSessions = 7069; // ERROR_TS_INCOMPATIBLE_SESSIONS
	static const errorTsVideoSubsystemError = 7070; // ERROR_TS_VIDEO_SUBSYSTEM_ERROR
	static const frsErrInvalidApiSequence = 8001; // FRS_ERR_INVALID_API_SEQUENCE
	static const frsErrStartingService = 8002; // FRS_ERR_STARTING_SERVICE
	static const frsErrStoppingService = 8003; // FRS_ERR_STOPPING_SERVICE
	static const frsErrInternalApi = 8004; // FRS_ERR_INTERNAL_API
	static const frsErrInternal = 8005; // FRS_ERR_INTERNAL
	static const frsErrServiceComm = 8006; // FRS_ERR_SERVICE_COMM
	static const frsErrInsufficientPriv = 8007; // FRS_ERR_INSUFFICIENT_PRIV
	static const frsErrAuthentication = 8008; // FRS_ERR_AUTHENTICATION
	static const frsErrParentInsufficientPriv = 8009; // FRS_ERR_PARENT_INSUFFICIENT_PRIV
	static const frsErrParentAuthentication = 8010; // FRS_ERR_PARENT_AUTHENTICATION
	static const frsErrChildToParentComm = 8011; // FRS_ERR_CHILD_TO_PARENT_COMM
	static const frsErrParentToChildComm = 8012; // FRS_ERR_PARENT_TO_CHILD_COMM
	static const frsErrSysvolPopulate = 8013; // FRS_ERR_SYSVOL_POPULATE
	static const frsErrSysvolPopulateTimeout = 8014; // FRS_ERR_SYSVOL_POPULATE_TIMEOUT
	static const frsErrSysvolIsBusy = 8015; // FRS_ERR_SYSVOL_IS_BUSY
	static const frsErrSysvolDemote = 8016; // FRS_ERR_SYSVOL_DEMOTE
	static const frsErrInvalidServiceParameter = 8017; // FRS_ERR_INVALID_SERVICE_PARAMETER
	static const errorDsNotInstalled = 8200; // ERROR_DS_NOT_INSTALLED
	static const errorDsMembershipEvaluatedLocally = 8201; // ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY
	static const errorDsNoAttributeOrValue = 8202; // ERROR_DS_NO_ATTRIBUTE_OR_VALUE
	static const errorDsInvalidAttributeSyntax = 8203; // ERROR_DS_INVALID_ATTRIBUTE_SYNTAX
	static const errorDsAttributeTypeUndefined = 8204; // ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED
	static const errorDsAttributeOrValueExists = 8205; // ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS
	static const errorDsBusy = 8206; // ERROR_DS_BUSY
	static const errorDsUnavailable = 8207; // ERROR_DS_UNAVAILABLE
	static const errorDsNoRidsAllocated = 8208; // ERROR_DS_NO_RIDS_ALLOCATED
	static const errorDsNoMoreRids = 8209; // ERROR_DS_NO_MORE_RIDS
	static const errorDsIncorrectRoleOwner = 8210; // ERROR_DS_INCORRECT_ROLE_OWNER
	static const errorDsRidmgrInitError = 8211; // ERROR_DS_RIDMGR_INIT_ERROR
	static const errorDsObjClassViolation = 8212; // ERROR_DS_OBJ_CLASS_VIOLATION
	static const errorDsCantOnNonLeaf = 8213; // ERROR_DS_CANT_ON_NON_LEAF
	static const errorDsCantOnRdn = 8214; // ERROR_DS_CANT_ON_RDN
	static const errorDsCantModObjClass = 8215; // ERROR_DS_CANT_MOD_OBJ_CLASS
	static const errorDsCrossDomMoveError = 8216; // ERROR_DS_CROSS_DOM_MOVE_ERROR
	static const errorDsGcNotAvailable = 8217; // ERROR_DS_GC_NOT_AVAILABLE
	static const errorSharedPolicy = 8218; // ERROR_SHARED_POLICY
	static const errorPolicyObjectNotFound = 8219; // ERROR_POLICY_OBJECT_NOT_FOUND
	static const errorPolicyOnlyInDs = 8220; // ERROR_POLICY_ONLY_IN_DS
	static const errorPromotionActive = 8221; // ERROR_PROMOTION_ACTIVE
	static const errorNoPromotionActive = 8222; // ERROR_NO_PROMOTION_ACTIVE
	static const errorDsOperationsError = 8224; // ERROR_DS_OPERATIONS_ERROR
	static const errorDsProtocolError = 8225; // ERROR_DS_PROTOCOL_ERROR
	static const errorDsTimelimitExceeded = 8226; // ERROR_DS_TIMELIMIT_EXCEEDED
	static const errorDsSizelimitExceeded = 8227; // ERROR_DS_SIZELIMIT_EXCEEDED
	static const errorDsAdminLimitExceeded = 8228; // ERROR_DS_ADMIN_LIMIT_EXCEEDED
	static const errorDsCompareFalse = 8229; // ERROR_DS_COMPARE_FALSE
	static const errorDsCompareTrue = 8230; // ERROR_DS_COMPARE_TRUE
	static const errorDsAuthMethodNotSupported = 8231; // ERROR_DS_AUTH_METHOD_NOT_SUPPORTED
	static const errorDsStrongAuthRequired = 8232; // ERROR_DS_STRONG_AUTH_REQUIRED
	static const errorDsInappropriateAuth = 8233; // ERROR_DS_INAPPROPRIATE_AUTH
	static const errorDsAuthUnknown = 8234; // ERROR_DS_AUTH_UNKNOWN
	static const errorDsReferral = 8235; // ERROR_DS_REFERRAL
	static const errorDsUnavailableCritExtension = 8236; // ERROR_DS_UNAVAILABLE_CRIT_EXTENSION
	static const errorDsConfidentialityRequired = 8237; // ERROR_DS_CONFIDENTIALITY_REQUIRED
	static const errorDsInappropriateMatching = 8238; // ERROR_DS_INAPPROPRIATE_MATCHING
	static const errorDsConstraintViolation = 8239; // ERROR_DS_CONSTRAINT_VIOLATION
	static const errorDsNoSuchObject = 8240; // ERROR_DS_NO_SUCH_OBJECT
	static const errorDsAliasProblem = 8241; // ERROR_DS_ALIAS_PROBLEM
	static const errorDsInvalidDnSyntax = 8242; // ERROR_DS_INVALID_DN_SYNTAX
	static const errorDsIsLeaf = 8243; // ERROR_DS_IS_LEAF
	static const errorDsAliasDerefProblem = 8244; // ERROR_DS_ALIAS_DEREF_PROBLEM
	static const errorDsUnwillingToPerform = 8245; // ERROR_DS_UNWILLING_TO_PERFORM
	static const errorDsLoopDetect = 8246; // ERROR_DS_LOOP_DETECT
	static const errorDsNamingViolation = 8247; // ERROR_DS_NAMING_VIOLATION
	static const errorDsObjectResultsTooLarge = 8248; // ERROR_DS_OBJECT_RESULTS_TOO_LARGE
	static const errorDsAffectsMultipleDsas = 8249; // ERROR_DS_AFFECTS_MULTIPLE_DSAS
	static const errorDsServerDown = 8250; // ERROR_DS_SERVER_DOWN
	static const errorDsLocalError = 8251; // ERROR_DS_LOCAL_ERROR
	static const errorDsEncodingError = 8252; // ERROR_DS_ENCODING_ERROR
	static const errorDsDecodingError = 8253; // ERROR_DS_DECODING_ERROR
	static const errorDsFilterUnknown = 8254; // ERROR_DS_FILTER_UNKNOWN
	static const errorDsParamError = 8255; // ERROR_DS_PARAM_ERROR
	static const errorDsNotSupported = 8256; // ERROR_DS_NOT_SUPPORTED
	static const errorDsNoResultsReturned = 8257; // ERROR_DS_NO_RESULTS_RETURNED
	static const errorDsControlNotFound = 8258; // ERROR_DS_CONTROL_NOT_FOUND
	static const errorDsClientLoop = 8259; // ERROR_DS_CLIENT_LOOP
	static const errorDsReferralLimitExceeded = 8260; // ERROR_DS_REFERRAL_LIMIT_EXCEEDED
	static const errorDsSortControlMissing = 8261; // ERROR_DS_SORT_CONTROL_MISSING
	static const errorDsOffsetRangeError = 8262; // ERROR_DS_OFFSET_RANGE_ERROR
	static const errorDsRidmgrDisabled = 8263; // ERROR_DS_RIDMGR_DISABLED
	static const errorDsRootMustBeNc = 8301; // ERROR_DS_ROOT_MUST_BE_NC
	static const errorDsAddReplicaInhibited = 8302; // ERROR_DS_ADD_REPLICA_INHIBITED
	static const errorDsAttNotDefInSchema = 8303; // ERROR_DS_ATT_NOT_DEF_IN_SCHEMA
	static const errorDsMaxObjSizeExceeded = 8304; // ERROR_DS_MAX_OBJ_SIZE_EXCEEDED
	static const errorDsObjStringNameExists = 8305; // ERROR_DS_OBJ_STRING_NAME_EXISTS
	static const errorDsNoRdnDefinedInSchema = 8306; // ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA
	static const errorDsRdnDoesntMatchSchema = 8307; // ERROR_DS_RDN_DOESNT_MATCH_SCHEMA
	static const errorDsNoRequestedAttsFound = 8308; // ERROR_DS_NO_REQUESTED_ATTS_FOUND
	static const errorDsUserBufferToSmall = 8309; // ERROR_DS_USER_BUFFER_TO_SMALL
	static const errorDsAttIsNotOnObj = 8310; // ERROR_DS_ATT_IS_NOT_ON_OBJ
	static const errorDsIllegalModOperation = 8311; // ERROR_DS_ILLEGAL_MOD_OPERATION
	static const errorDsObjTooLarge = 8312; // ERROR_DS_OBJ_TOO_LARGE
	static const errorDsBadInstanceType = 8313; // ERROR_DS_BAD_INSTANCE_TYPE
	static const errorDsMasterdsaRequired = 8314; // ERROR_DS_MASTERDSA_REQUIRED
	static const errorDsObjectClassRequired = 8315; // ERROR_DS_OBJECT_CLASS_REQUIRED
	static const errorDsMissingRequiredAtt = 8316; // ERROR_DS_MISSING_REQUIRED_ATT
	static const errorDsAttNotDefForClass = 8317; // ERROR_DS_ATT_NOT_DEF_FOR_CLASS
	static const errorDsAttAlreadyExists = 8318; // ERROR_DS_ATT_ALREADY_EXISTS
	static const errorDsCantAddAttValues = 8320; // ERROR_DS_CANT_ADD_ATT_VALUES
	static const errorDsSingleValueConstraint = 8321; // ERROR_DS_SINGLE_VALUE_CONSTRAINT
	static const errorDsRangeConstraint = 8322; // ERROR_DS_RANGE_CONSTRAINT
	static const errorDsAttValAlreadyExists = 8323; // ERROR_DS_ATT_VAL_ALREADY_EXISTS
	static const errorDsCantRemMissingAtt = 8324; // ERROR_DS_CANT_REM_MISSING_ATT
	static const errorDsCantRemMissingAttVal = 8325; // ERROR_DS_CANT_REM_MISSING_ATT_VAL
	static const errorDsRootCantBeSubref = 8326; // ERROR_DS_ROOT_CANT_BE_SUBREF
	static const errorDsNoChaining = 8327; // ERROR_DS_NO_CHAINING
	static const errorDsNoChainedEval = 8328; // ERROR_DS_NO_CHAINED_EVAL
	static const errorDsNoParentObject = 8329; // ERROR_DS_NO_PARENT_OBJECT
	static const errorDsParentIsAnAlias = 8330; // ERROR_DS_PARENT_IS_AN_ALIAS
	static const errorDsCantMixMasterAndReps = 8331; // ERROR_DS_CANT_MIX_MASTER_AND_REPS
	static const errorDsChildrenExist = 8332; // ERROR_DS_CHILDREN_EXIST
	static const errorDsObjNotFound = 8333; // ERROR_DS_OBJ_NOT_FOUND
	static const errorDsAliasedObjMissing = 8334; // ERROR_DS_ALIASED_OBJ_MISSING
	static const errorDsBadNameSyntax = 8335; // ERROR_DS_BAD_NAME_SYNTAX
	static const errorDsAliasPointsToAlias = 8336; // ERROR_DS_ALIAS_POINTS_TO_ALIAS
	static const errorDsCantDerefAlias = 8337; // ERROR_DS_CANT_DEREF_ALIAS
	static const errorDsOutOfScope = 8338; // ERROR_DS_OUT_OF_SCOPE
	static const errorDsObjectBeingRemoved = 8339; // ERROR_DS_OBJECT_BEING_REMOVED
	static const errorDsCantDeleteDsaObj = 8340; // ERROR_DS_CANT_DELETE_DSA_OBJ
	static const errorDsGenericError = 8341; // ERROR_DS_GENERIC_ERROR
	static const errorDsDsaMustBeIntMaster = 8342; // ERROR_DS_DSA_MUST_BE_INT_MASTER
	static const errorDsClassNotDsa = 8343; // ERROR_DS_CLASS_NOT_DSA
	static const errorDsInsuffAccessRights = 8344; // ERROR_DS_INSUFF_ACCESS_RIGHTS
	static const errorDsIllegalSuperior = 8345; // ERROR_DS_ILLEGAL_SUPERIOR
	static const errorDsAttributeOwnedBySam = 8346; // ERROR_DS_ATTRIBUTE_OWNED_BY_SAM
	static const errorDsNameTooManyParts = 8347; // ERROR_DS_NAME_TOO_MANY_PARTS
	static const errorDsNameTooLong = 8348; // ERROR_DS_NAME_TOO_LONG
	static const errorDsNameValueTooLong = 8349; // ERROR_DS_NAME_VALUE_TOO_LONG
	static const errorDsNameUnparseable = 8350; // ERROR_DS_NAME_UNPARSEABLE
	static const errorDsNameTypeUnknown = 8351; // ERROR_DS_NAME_TYPE_UNKNOWN
	static const errorDsNotAnObject = 8352; // ERROR_DS_NOT_AN_OBJECT
	static const errorDsSecDescTooShort = 8353; // ERROR_DS_SEC_DESC_TOO_SHORT
	static const errorDsSecDescInvalid = 8354; // ERROR_DS_SEC_DESC_INVALID
	static const errorDsNoDeletedName = 8355; // ERROR_DS_NO_DELETED_NAME
	static const errorDsSubrefMustHaveParent = 8356; // ERROR_DS_SUBREF_MUST_HAVE_PARENT
	static const errorDsNcnameMustBeNc = 8357; // ERROR_DS_NCNAME_MUST_BE_NC
	static const errorDsCantAddSystemOnly = 8358; // ERROR_DS_CANT_ADD_SYSTEM_ONLY
	static const errorDsClassMustBeConcrete = 8359; // ERROR_DS_CLASS_MUST_BE_CONCRETE
	static const errorDsInvalidDmd = 8360; // ERROR_DS_INVALID_DMD
	static const errorDsObjGuidExists = 8361; // ERROR_DS_OBJ_GUID_EXISTS
	static const errorDsNotOnBacklink = 8362; // ERROR_DS_NOT_ON_BACKLINK
	static const errorDsNoCrossrefForNc = 8363; // ERROR_DS_NO_CROSSREF_FOR_NC
	static const errorDsShuttingDown = 8364; // ERROR_DS_SHUTTING_DOWN
	static const errorDsUnknownOperation = 8365; // ERROR_DS_UNKNOWN_OPERATION
	static const errorDsInvalidRoleOwner = 8366; // ERROR_DS_INVALID_ROLE_OWNER
	static const errorDsCouldntContactFsmo = 8367; // ERROR_DS_COULDNT_CONTACT_FSMO
	static const errorDsCrossNcDnRename = 8368; // ERROR_DS_CROSS_NC_DN_RENAME
	static const errorDsCantModSystemOnly = 8369; // ERROR_DS_CANT_MOD_SYSTEM_ONLY
	static const errorDsReplicatorOnly = 8370; // ERROR_DS_REPLICATOR_ONLY
	static const errorDsObjClassNotDefined = 8371; // ERROR_DS_OBJ_CLASS_NOT_DEFINED
	static const errorDsObjClassNotSubclass = 8372; // ERROR_DS_OBJ_CLASS_NOT_SUBCLASS
	static const errorDsNameReferenceInvalid = 8373; // ERROR_DS_NAME_REFERENCE_INVALID
	static const errorDsCrossRefExists = 8374; // ERROR_DS_CROSS_REF_EXISTS
	static const errorDsCantDelMasterCrossref = 8375; // ERROR_DS_CANT_DEL_MASTER_CROSSREF
	static const errorDsSubtreeNotifyNotNcHead = 8376; // ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD
	static const errorDsNotifyFilterTooComplex = 8377; // ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX
	static const errorDsDupRdn = 8378; // ERROR_DS_DUP_RDN
	static const errorDsDupOid = 8379; // ERROR_DS_DUP_OID
	static const errorDsDupMapiId = 8380; // ERROR_DS_DUP_MAPI_ID
	static const errorDsDupSchemaIdGuid = 8381; // ERROR_DS_DUP_SCHEMA_ID_GUID
	static const errorDsDupLdapDisplayName = 8382; // ERROR_DS_DUP_LDAP_DISPLAY_NAME
	static const errorDsSemanticAttTest = 8383; // ERROR_DS_SEMANTIC_ATT_TEST
	static const errorDsSyntaxMismatch = 8384; // ERROR_DS_SYNTAX_MISMATCH
	static const errorDsExistsInMustHave = 8385; // ERROR_DS_EXISTS_IN_MUST_HAVE
	static const errorDsExistsInMayHave = 8386; // ERROR_DS_EXISTS_IN_MAY_HAVE
	static const errorDsNonexistentMayHave = 8387; // ERROR_DS_NONEXISTENT_MAY_HAVE
	static const errorDsNonexistentMustHave = 8388; // ERROR_DS_NONEXISTENT_MUST_HAVE
	static const errorDsAuxClsTestFail = 8389; // ERROR_DS_AUX_CLS_TEST_FAIL
	static const errorDsNonexistentPossSup = 8390; // ERROR_DS_NONEXISTENT_POSS_SUP
	static const errorDsSubClsTestFail = 8391; // ERROR_DS_SUB_CLS_TEST_FAIL
	static const errorDsBadRdnAttIdSyntax = 8392; // ERROR_DS_BAD_RDN_ATT_ID_SYNTAX
	static const errorDsExistsInAuxCls = 8393; // ERROR_DS_EXISTS_IN_AUX_CLS
	static const errorDsExistsInSubCls = 8394; // ERROR_DS_EXISTS_IN_SUB_CLS
	static const errorDsExistsInPossSup = 8395; // ERROR_DS_EXISTS_IN_POSS_SUP
	static const errorDsRecalcschemaFailed = 8396; // ERROR_DS_RECALCSCHEMA_FAILED
	static const errorDsTreeDeleteNotFinished = 8397; // ERROR_DS_TREE_DELETE_NOT_FINISHED
	static const errorDsCantDelete = 8398; // ERROR_DS_CANT_DELETE
	static const errorDsAttSchemaReqId = 8399; // ERROR_DS_ATT_SCHEMA_REQ_ID
	static const errorDsBadAttSchemaSyntax = 8400; // ERROR_DS_BAD_ATT_SCHEMA_SYNTAX
	static const errorDsCantCacheAtt = 8401; // ERROR_DS_CANT_CACHE_ATT
	static const errorDsCantCacheClass = 8402; // ERROR_DS_CANT_CACHE_CLASS
	static const errorDsCantRemoveAttCache = 8403; // ERROR_DS_CANT_REMOVE_ATT_CACHE
	static const errorDsCantRemoveClassCache = 8404; // ERROR_DS_CANT_REMOVE_CLASS_CACHE
	static const errorDsCantRetrieveDn = 8405; // ERROR_DS_CANT_RETRIEVE_DN
	static const errorDsMissingSupref = 8406; // ERROR_DS_MISSING_SUPREF
	static const errorDsCantRetrieveInstance = 8407; // ERROR_DS_CANT_RETRIEVE_INSTANCE
	static const errorDsCodeInconsistency = 8408; // ERROR_DS_CODE_INCONSISTENCY
	static const errorDsDatabaseError = 8409; // ERROR_DS_DATABASE_ERROR
	static const errorDsGovernsidMissing = 8410; // ERROR_DS_GOVERNSID_MISSING
	static const errorDsMissingExpectedAtt = 8411; // ERROR_DS_MISSING_EXPECTED_ATT
	static const errorDsNcnameMissingCrRef = 8412; // ERROR_DS_NCNAME_MISSING_CR_REF
	static const errorDsSecurityCheckingError = 8413; // ERROR_DS_SECURITY_CHECKING_ERROR
	static const errorDsSchemaNotLoaded = 8414; // ERROR_DS_SCHEMA_NOT_LOADED
	static const errorDsSchemaAllocFailed = 8415; // ERROR_DS_SCHEMA_ALLOC_FAILED
	static const errorDsAttSchemaReqSyntax = 8416; // ERROR_DS_ATT_SCHEMA_REQ_SYNTAX
	static const errorDsGcverifyError = 8417; // ERROR_DS_GCVERIFY_ERROR
	static const errorDsDraSchemaMismatch = 8418; // ERROR_DS_DRA_SCHEMA_MISMATCH
	static const errorDsCantFindDsaObj = 8419; // ERROR_DS_CANT_FIND_DSA_OBJ
	static const errorDsCantFindExpectedNc = 8420; // ERROR_DS_CANT_FIND_EXPECTED_NC
	static const errorDsCantFindNcInCache = 8421; // ERROR_DS_CANT_FIND_NC_IN_CACHE
	static const errorDsCantRetrieveChild = 8422; // ERROR_DS_CANT_RETRIEVE_CHILD
	static const errorDsSecurityIllegalModify = 8423; // ERROR_DS_SECURITY_ILLEGAL_MODIFY
	static const errorDsCantReplaceHiddenRec = 8424; // ERROR_DS_CANT_REPLACE_HIDDEN_REC
	static const errorDsBadHierarchyFile = 8425; // ERROR_DS_BAD_HIERARCHY_FILE
	static const errorDsBuildHierarchyTableFailed = 8426; // ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED
	static const errorDsConfigParamMissing = 8427; // ERROR_DS_CONFIG_PARAM_MISSING
	static const errorDsCountingAbIndicesFailed = 8428; // ERROR_DS_COUNTING_AB_INDICES_FAILED
	static const errorDsHierarchyTableMallocFailed = 8429; // ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED
	static const errorDsInternalFailure = 8430; // ERROR_DS_INTERNAL_FAILURE
	static const errorDsUnknownError = 8431; // ERROR_DS_UNKNOWN_ERROR
	static const errorDsRootRequiresClassTop = 8432; // ERROR_DS_ROOT_REQUIRES_CLASS_TOP
	static const errorDsRefusingFsmoRoles = 8433; // ERROR_DS_REFUSING_FSMO_ROLES
	static const errorDsMissingFsmoSettings = 8434; // ERROR_DS_MISSING_FSMO_SETTINGS
	static const errorDsUnableToSurrenderRoles = 8435; // ERROR_DS_UNABLE_TO_SURRENDER_ROLES
	static const errorDsDraGeneric = 8436; // ERROR_DS_DRA_GENERIC
	static const errorDsDraInvalidParameter = 8437; // ERROR_DS_DRA_INVALID_PARAMETER
	static const errorDsDraBusy = 8438; // ERROR_DS_DRA_BUSY
	static const errorDsDraBadDn = 8439; // ERROR_DS_DRA_BAD_DN
	static const errorDsDraBadNc = 8440; // ERROR_DS_DRA_BAD_NC
	static const errorDsDraDnExists = 8441; // ERROR_DS_DRA_DN_EXISTS
	static const errorDsDraInternalError = 8442; // ERROR_DS_DRA_INTERNAL_ERROR
	static const errorDsDraInconsistentDit = 8443; // ERROR_DS_DRA_INCONSISTENT_DIT
	static const errorDsDraConnectionFailed = 8444; // ERROR_DS_DRA_CONNECTION_FAILED
	static const errorDsDraBadInstanceType = 8445; // ERROR_DS_DRA_BAD_INSTANCE_TYPE
	static const errorDsDraOutOfMem = 8446; // ERROR_DS_DRA_OUT_OF_MEM
	static const errorDsDraMailProblem = 8447; // ERROR_DS_DRA_MAIL_PROBLEM
	static const errorDsDraRefAlreadyExists = 8448; // ERROR_DS_DRA_REF_ALREADY_EXISTS
	static const errorDsDraRefNotFound = 8449; // ERROR_DS_DRA_REF_NOT_FOUND
	static const errorDsDraObjIsRepSource = 8450; // ERROR_DS_DRA_OBJ_IS_REP_SOURCE
	static const errorDsDraDbError = 8451; // ERROR_DS_DRA_DB_ERROR
	static const errorDsDraNoReplica = 8452; // ERROR_DS_DRA_NO_REPLICA
	static const errorDsDraAccessDenied = 8453; // ERROR_DS_DRA_ACCESS_DENIED
	static const errorDsDraNotSupported = 8454; // ERROR_DS_DRA_NOT_SUPPORTED
	static const errorDsDraRpcCancelled = 8455; // ERROR_DS_DRA_RPC_CANCELLED
	static const errorDsDraSourceDisabled = 8456; // ERROR_DS_DRA_SOURCE_DISABLED
	static const errorDsDraSinkDisabled = 8457; // ERROR_DS_DRA_SINK_DISABLED
	static const errorDsDraNameCollision = 8458; // ERROR_DS_DRA_NAME_COLLISION
	static const errorDsDraSourceReinstalled = 8459; // ERROR_DS_DRA_SOURCE_REINSTALLED
	static const errorDsDraMissingParent = 8460; // ERROR_DS_DRA_MISSING_PARENT
	static const errorDsDraPreempted = 8461; // ERROR_DS_DRA_PREEMPTED
	static const errorDsDraAbandonSync = 8462; // ERROR_DS_DRA_ABANDON_SYNC
	static const errorDsDraShutdown = 8463; // ERROR_DS_DRA_SHUTDOWN
	static const errorDsDraIncompatiblePartialSet = 8464; // ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET
	static const errorDsDraSourceIsPartialReplica = 8465; // ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA
	static const errorDsDraExtnConnectionFailed = 8466; // ERROR_DS_DRA_EXTN_CONNECTION_FAILED
	static const errorDsInstallSchemaMismatch = 8467; // ERROR_DS_INSTALL_SCHEMA_MISMATCH
	static const errorDsDupLinkId = 8468; // ERROR_DS_DUP_LINK_ID
	static const errorDsNameErrorResolving = 8469; // ERROR_DS_NAME_ERROR_RESOLVING
	static const errorDsNameErrorNotFound = 8470; // ERROR_DS_NAME_ERROR_NOT_FOUND
	static const errorDsNameErrorNotUnique = 8471; // ERROR_DS_NAME_ERROR_NOT_UNIQUE
	static const errorDsNameErrorNoMapping = 8472; // ERROR_DS_NAME_ERROR_NO_MAPPING
	static const errorDsNameErrorDomainOnly = 8473; // ERROR_DS_NAME_ERROR_DOMAIN_ONLY
	static const errorDsNameErrorNoSyntacticalMapping = 8474; // ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING
	static const errorDsConstructedAttMod = 8475; // ERROR_DS_CONSTRUCTED_ATT_MOD
	static const errorDsWrongOmObjClass = 8476; // ERROR_DS_WRONG_OM_OBJ_CLASS
	static const errorDsDraReplPending = 8477; // ERROR_DS_DRA_REPL_PENDING
	static const errorDsDsRequired = 8478; // ERROR_DS_DS_REQUIRED
	static const errorDsInvalidLdapDisplayName = 8479; // ERROR_DS_INVALID_LDAP_DISPLAY_NAME
	static const errorDsNonBaseSearch = 8480; // ERROR_DS_NON_BASE_SEARCH
	static const errorDsCantRetrieveAtts = 8481; // ERROR_DS_CANT_RETRIEVE_ATTS
	static const errorDsBacklinkWithoutLink = 8482; // ERROR_DS_BACKLINK_WITHOUT_LINK
	static const errorDsEpochMismatch = 8483; // ERROR_DS_EPOCH_MISMATCH
	static const errorDsSrcNameMismatch = 8484; // ERROR_DS_SRC_NAME_MISMATCH
	static const errorDsSrcAndDstNcIdentical = 8485; // ERROR_DS_SRC_AND_DST_NC_IDENTICAL
	static const errorDsDstNcMismatch = 8486; // ERROR_DS_DST_NC_MISMATCH
	static const errorDsNotAuthoritiveForDstNc = 8487; // ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC
	static const errorDsSrcGuidMismatch = 8488; // ERROR_DS_SRC_GUID_MISMATCH
	static const errorDsCantMoveDeletedObject = 8489; // ERROR_DS_CANT_MOVE_DELETED_OBJECT
	static const errorDsPdcOperationInProgress = 8490; // ERROR_DS_PDC_OPERATION_IN_PROGRESS
	static const errorDsCrossDomainCleanupReqd = 8491; // ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD
	static const errorDsIllegalXdomMoveOperation = 8492; // ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION
	static const errorDsCantWithAcctGroupMembershps = 8493; // ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS
	static const errorDsNcMustHaveNcParent = 8494; // ERROR_DS_NC_MUST_HAVE_NC_PARENT
	static const errorDsCrImpossibleToValidate = 8495; // ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE
	static const errorDsDstDomainNotNative = 8496; // ERROR_DS_DST_DOMAIN_NOT_NATIVE
	static const errorDsMissingInfrastructureContainer = 8497; // ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER
	static const errorDsCantMoveAccountGroup = 8498; // ERROR_DS_CANT_MOVE_ACCOUNT_GROUP
	static const errorDsCantMoveResourceGroup = 8499; // ERROR_DS_CANT_MOVE_RESOURCE_GROUP
	static const errorDsInvalidSearchFlag = 8500; // ERROR_DS_INVALID_SEARCH_FLAG
	static const errorDsNoTreeDeleteAboveNc = 8501; // ERROR_DS_NO_TREE_DELETE_ABOVE_NC
	static const errorDsCouldntLockTreeForDelete = 8502; // ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE
	static const errorDsCouldntIdentifyObjectsForTreeDelete = 8503; // ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE
	static const errorDsSamInitFailure = 8504; // ERROR_DS_SAM_INIT_FAILURE
	static const errorDsSensitiveGroupViolation = 8505; // ERROR_DS_SENSITIVE_GROUP_VIOLATION
	static const errorDsCantModPrimarygroupid = 8506; // ERROR_DS_CANT_MOD_PRIMARYGROUPID
	static const errorDsIllegalBaseSchemaMod = 8507; // ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD
	static const errorDsNonsafeSchemaChange = 8508; // ERROR_DS_NONSAFE_SCHEMA_CHANGE
	static const errorDsSchemaUpdateDisallowed = 8509; // ERROR_DS_SCHEMA_UPDATE_DISALLOWED
	static const errorDsCantCreateUnderSchema = 8510; // ERROR_DS_CANT_CREATE_UNDER_SCHEMA
	static const errorDsInstallNoSrcSchVersion = 8511; // ERROR_DS_INSTALL_NO_SRC_SCH_VERSION
	static const errorDsInstallNoSchVersionInInifile = 8512; // ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE
	static const errorDsInvalidGroupType = 8513; // ERROR_DS_INVALID_GROUP_TYPE
	static const errorDsNoNestGlobalgroupInMixeddomain = 8514; // ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN
	static const errorDsNoNestLocalgroupInMixeddomain = 8515; // ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN
	static const errorDsGlobalCantHaveLocalMember = 8516; // ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER
	static const errorDsGlobalCantHaveUniversalMember = 8517; // ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER
	static const errorDsUniversalCantHaveLocalMember = 8518; // ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER
	static const errorDsGlobalCantHaveCrossdomainMember = 8519; // ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER
	static const errorDsLocalCantHaveCrossdomainLocalMember = 8520; // ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER
	static const errorDsHavePrimaryMembers = 8521; // ERROR_DS_HAVE_PRIMARY_MEMBERS
	static const errorDsStringSdConversionFailed = 8522; // ERROR_DS_STRING_SD_CONVERSION_FAILED
	static const errorDsNamingMasterGc = 8523; // ERROR_DS_NAMING_MASTER_GC
	static const errorDsDnsLookupFailure = 8524; // ERROR_DS_DNS_LOOKUP_FAILURE
	static const errorDsCouldntUpdateSpns = 8525; // ERROR_DS_COULDNT_UPDATE_SPNS
	static const errorDsCantRetrieveSd = 8526; // ERROR_DS_CANT_RETRIEVE_SD
	static const errorDsKeyNotUnique = 8527; // ERROR_DS_KEY_NOT_UNIQUE
	static const errorDsWrongLinkedAttSyntax = 8528; // ERROR_DS_WRONG_LINKED_ATT_SYNTAX
	static const errorDsSamNeedBootkeyPassword = 8529; // ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD
	static const errorDsSamNeedBootkeyFloppy = 8530; // ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY
	static const errorDsCantStart = 8531; // ERROR_DS_CANT_START
	static const errorDsInitFailure = 8532; // ERROR_DS_INIT_FAILURE
	static const errorDsNoPktPrivacyOnConnection = 8533; // ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION
	static const errorDsSourceDomainInForest = 8534; // ERROR_DS_SOURCE_DOMAIN_IN_FOREST
	static const errorDsDestinationDomainNotInForest = 8535; // ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST
	static const errorDsDestinationAuditingNotEnabled = 8536; // ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED
	static const errorDsCantFindDcForSrcDomain = 8537; // ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN
	static const errorDsSrcObjNotGroupOrUser = 8538; // ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER
	static const errorDsSrcSidExistsInForest = 8539; // ERROR_DS_SRC_SID_EXISTS_IN_FOREST
	static const errorDsSrcAndDstObjectClassMismatch = 8540; // ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH
	static const errorSamInitFailure = 8541; // ERROR_SAM_INIT_FAILURE
	static const errorDsDraSchemaInfoShip = 8542; // ERROR_DS_DRA_SCHEMA_INFO_SHIP
	static const errorDsDraSchemaConflict = 8543; // ERROR_DS_DRA_SCHEMA_CONFLICT
	static const errorDsDraEarlierSchemaConflict = 8544; // ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT
	static const errorDsDraObjNcMismatch = 8545; // ERROR_DS_DRA_OBJ_NC_MISMATCH
	static const errorDsNcStillHasDsas = 8546; // ERROR_DS_NC_STILL_HAS_DSAS
	static const errorDsGcRequired = 8547; // ERROR_DS_GC_REQUIRED
	static const errorDsLocalMemberOfLocalOnly = 8548; // ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY
	static const errorDsNoFpoInUniversalGroups = 8549; // ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS
	static const errorDsCantAddToGc = 8550; // ERROR_DS_CANT_ADD_TO_GC
	static const errorDsNoCheckpointWithPdc = 8551; // ERROR_DS_NO_CHECKPOINT_WITH_PDC
	static const errorDsSourceAuditingNotEnabled = 8552; // ERROR_DS_SOURCE_AUDITING_NOT_ENABLED
	static const errorDsCantCreateInNondomainNc = 8553; // ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC
	static const errorDsInvalidNameForSpn = 8554; // ERROR_DS_INVALID_NAME_FOR_SPN
	static const errorDsFilterUsesContructedAttrs = 8555; // ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS
	static const errorDsUnicodepwdNotInQuotes = 8556; // ERROR_DS_UNICODEPWD_NOT_IN_QUOTES
	static const errorDsMachineAccountQuotaExceeded = 8557; // ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED
	static const errorDsMustBeRunOnDstDc = 8558; // ERROR_DS_MUST_BE_RUN_ON_DST_DC
	static const errorDsSrcDcMustBeSp4OrGreater = 8559; // ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER
	static const errorDsCantTreeDeleteCriticalObj = 8560; // ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ
	static const errorDsInitFailureConsole = 8561; // ERROR_DS_INIT_FAILURE_CONSOLE
	static const errorDsSamInitFailureConsole = 8562; // ERROR_DS_SAM_INIT_FAILURE_CONSOLE
	static const errorDsForestVersionTooHigh = 8563; // ERROR_DS_FOREST_VERSION_TOO_HIGH
	static const errorDsDomainVersionTooHigh = 8564; // ERROR_DS_DOMAIN_VERSION_TOO_HIGH
	static const errorDsForestVersionTooLow = 8565; // ERROR_DS_FOREST_VERSION_TOO_LOW
	static const errorDsDomainVersionTooLow = 8566; // ERROR_DS_DOMAIN_VERSION_TOO_LOW
	static const errorDsIncompatibleVersion = 8567; // ERROR_DS_INCOMPATIBLE_VERSION
	static const errorDsLowDsaVersion = 8568; // ERROR_DS_LOW_DSA_VERSION
	static const errorDsNoBehaviorVersionInMixeddomain = 8569; // ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN
	static const errorDsNotSupportedSortOrder = 8570; // ERROR_DS_NOT_SUPPORTED_SORT_ORDER
	static const errorDsNameNotUnique = 8571; // ERROR_DS_NAME_NOT_UNIQUE
	static const errorDsMachineAccountCreatedPrent4 = 8572; // ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4
	static const errorDsOutOfVersionStore = 8573; // ERROR_DS_OUT_OF_VERSION_STORE
	static const errorDsIncompatibleControlsUsed = 8574; // ERROR_DS_INCOMPATIBLE_CONTROLS_USED
	static const errorDsNoRefDomain = 8575; // ERROR_DS_NO_REF_DOMAIN
	static const errorDsReservedLinkId = 8576; // ERROR_DS_RESERVED_LINK_ID
	static const errorDsLinkIdNotAvailable = 8577; // ERROR_DS_LINK_ID_NOT_AVAILABLE
	static const errorDsAgCantHaveUniversalMember = 8578; // ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER
	static const errorDsModifydnDisallowedByInstanceType = 8579; // ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE
	static const errorDsNoObjectMoveInSchemaNc = 8580; // ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC
	static const errorDsModifydnDisallowedByFlag = 8581; // ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG
	static const errorDsModifydnWrongGrandparent = 8582; // ERROR_DS_MODIFYDN_WRONG_GRANDPARENT
	static const errorDsNameErrorTrustReferral = 8583; // ERROR_DS_NAME_ERROR_TRUST_REFERRAL
	static const errorNotSupportedOnStandardServer = 8584; // ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER
	static const errorDsCantAccessRemotePartOfAd = 8585; // ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD
	static const errorDsCrImpossibleToValidateV2 = 8586; // ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2
	static const errorDsThreadLimitExceeded = 8587; // ERROR_DS_THREAD_LIMIT_EXCEEDED
	static const errorDsNotClosest = 8588; // ERROR_DS_NOT_CLOSEST
	static const errorDsCantDeriveSpnWithoutServerRef = 8589; // ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF
	static const errorDsSingleUserModeFailed = 8590; // ERROR_DS_SINGLE_USER_MODE_FAILED
	static const errorDsNtdscriptSyntaxError = 8591; // ERROR_DS_NTDSCRIPT_SYNTAX_ERROR
	static const errorDsNtdscriptProcessError = 8592; // ERROR_DS_NTDSCRIPT_PROCESS_ERROR
	static const errorDsDifferentReplEpochs = 8593; // ERROR_DS_DIFFERENT_REPL_EPOCHS
	static const errorDsDrsExtensionsChanged = 8594; // ERROR_DS_DRS_EXTENSIONS_CHANGED
	static const errorDsReplicaSetChangeNotAllowedOnDisabledCr = 8595; // ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR
	static const errorDsNoMsdsIntid = 8596; // ERROR_DS_NO_MSDS_INTID
	static const errorDsDupMsdsIntid = 8597; // ERROR_DS_DUP_MSDS_INTID
	static const errorDsExistsInRdnattid = 8598; // ERROR_DS_EXISTS_IN_RDNATTID
	static const errorDsAuthorizationFailed = 8599; // ERROR_DS_AUTHORIZATION_FAILED
	static const errorDsInvalidScript = 8600; // ERROR_DS_INVALID_SCRIPT
	static const errorDsRemoteCrossrefOpFailed = 8601; // ERROR_DS_REMOTE_CROSSREF_OP_FAILED
	static const errorDsCrossRefBusy = 8602; // ERROR_DS_CROSS_REF_BUSY
	static const errorDsCantDeriveSpnForDeletedDomain = 8603; // ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN
	static const errorDsCantDemoteWithWriteableNc = 8604; // ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC
	static const errorDsDuplicateIdFound = 8605; // ERROR_DS_DUPLICATE_ID_FOUND
	static const errorDsInsufficientAttrToCreateObject = 8606; // ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT
	static const errorDsGroupConversionError = 8607; // ERROR_DS_GROUP_CONVERSION_ERROR
	static const errorDsCantMoveAppBasicGroup = 8608; // ERROR_DS_CANT_MOVE_APP_BASIC_GROUP
	static const errorDsCantMoveAppQueryGroup = 8609; // ERROR_DS_CANT_MOVE_APP_QUERY_GROUP
	static const errorDsRoleNotVerified = 8610; // ERROR_DS_ROLE_NOT_VERIFIED
	static const errorDsWkoContainerCannotBeSpecial = 8611; // ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL
	static const errorDsDomainRenameInProgress = 8612; // ERROR_DS_DOMAIN_RENAME_IN_PROGRESS
	static const errorDsExistingAdChildNc = 8613; // ERROR_DS_EXISTING_AD_CHILD_NC
	static const errorDsReplLifetimeExceeded = 8614; // ERROR_DS_REPL_LIFETIME_EXCEEDED
	static const errorDsDisallowedInSystemContainer = 8615; // ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER
	static const errorDsLdapSendQueueFull = 8616; // ERROR_DS_LDAP_SEND_QUEUE_FULL
	static const errorDsDraOutScheduleWindow = 8617; // ERROR_DS_DRA_OUT_SCHEDULE_WINDOW
	static const errorDsPolicyNotKnown = 8618; // ERROR_DS_POLICY_NOT_KNOWN
	static const errorNoSiteSettingsObject = 8619; // ERROR_NO_SITE_SETTINGS_OBJECT
	static const errorNoSecrets = 8620; // ERROR_NO_SECRETS
	static const errorNoWritableDcFound = 8621; // ERROR_NO_WRITABLE_DC_FOUND
	static const errorDsNoServerObject = 8622; // ERROR_DS_NO_SERVER_OBJECT
	static const errorDsNoNtdsaObject = 8623; // ERROR_DS_NO_NTDSA_OBJECT
	static const errorDsNonAsqSearch = 8624; // ERROR_DS_NON_ASQ_SEARCH
	static const errorDsAuditFailure = 8625; // ERROR_DS_AUDIT_FAILURE
	static const errorDsInvalidSearchFlagSubtree = 8626; // ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE
	static const errorDsInvalidSearchFlagTuple = 8627; // ERROR_DS_INVALID_SEARCH_FLAG_TUPLE
	static const errorDsHierarchyTableTooDeep = 8628; // ERROR_DS_HIERARCHY_TABLE_TOO_DEEP
	static const errorDsDraCorruptUtdVector = 8629; // ERROR_DS_DRA_CORRUPT_UTD_VECTOR
	static const errorDsDraSecretsDenied = 8630; // ERROR_DS_DRA_SECRETS_DENIED
	static const errorDsReservedMapiId = 8631; // ERROR_DS_RESERVED_MAPI_ID
	static const errorDsMapiIdNotAvailable = 8632; // ERROR_DS_MAPI_ID_NOT_AVAILABLE
	static const errorDsDraMissingKrbtgtSecret = 8633; // ERROR_DS_DRA_MISSING_KRBTGT_SECRET
	static const errorDsDomainNameExistsInForest = 8634; // ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST
	static const errorDsFlatNameExistsInForest = 8635; // ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST
	static const errorInvalidUserPrincipalName = 8636; // ERROR_INVALID_USER_PRINCIPAL_NAME
	static const errorDsOidMappedGroupCantHaveMembers = 8637; // ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS
	static const errorDsOidNotFound = 8638; // ERROR_DS_OID_NOT_FOUND
	static const errorDsDraRecycledTarget = 8639; // ERROR_DS_DRA_RECYCLED_TARGET
	static const errorDsDisallowedNcRedirect = 8640; // ERROR_DS_DISALLOWED_NC_REDIRECT
	static const errorDsHighAdldsFfl = 8641; // ERROR_DS_HIGH_ADLDS_FFL
	static const errorDsHighDsaVersion = 8642; // ERROR_DS_HIGH_DSA_VERSION
	static const errorDsLowAdldsFfl = 8643; // ERROR_DS_LOW_ADLDS_FFL
	static const errorDomainSidSameAsLocalWorkstation = 8644; // ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION
	static const errorDsUndeleteSamValidationFailed = 8645; // ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED
	static const errorIncorrectAccountType = 8646; // ERROR_INCORRECT_ACCOUNT_TYPE
	static const dnsErrorRcodeFormatError = 9001; // DNS_ERROR_RCODE_FORMAT_ERROR
	static const dnsErrorRcodeServerFailure = 9002; // DNS_ERROR_RCODE_SERVER_FAILURE
	static const dnsErrorRcodeNameError = 9003; // DNS_ERROR_RCODE_NAME_ERROR
	static const dnsErrorRcodeNotImplemented = 9004; // DNS_ERROR_RCODE_NOT_IMPLEMENTED
	static const dnsErrorRcodeRefused = 9005; // DNS_ERROR_RCODE_REFUSED
	static const dnsErrorRcodeYxdomain = 9006; // DNS_ERROR_RCODE_YXDOMAIN
	static const dnsErrorRcodeYxrrset = 9007; // DNS_ERROR_RCODE_YXRRSET
	static const dnsErrorRcodeNxrrset = 9008; // DNS_ERROR_RCODE_NXRRSET
	static const dnsErrorRcodeNotauth = 9009; // DNS_ERROR_RCODE_NOTAUTH
	static const dnsErrorRcodeNotzone = 9010; // DNS_ERROR_RCODE_NOTZONE
	static const dnsErrorRcodeBadsig = 9016; // DNS_ERROR_RCODE_BADSIG
	static const dnsErrorRcodeBadkey = 9017; // DNS_ERROR_RCODE_BADKEY
	static const dnsErrorRcodeBadtime = 9018; // DNS_ERROR_RCODE_BADTIME
	static const dnsErrorKeymasterRequired = 9101; // DNS_ERROR_KEYMASTER_REQUIRED
	static const dnsErrorNotAllowedOnSignedZone = 9102; // DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE
	static const dnsErrorNsec3IncompatibleWithRsaSha1 = 9103; // DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1
	static const dnsErrorNotEnoughSigningKeyDescriptors = 9104; // DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS
	static const dnsErrorUnsupportedAlgorithm = 9105; // DNS_ERROR_UNSUPPORTED_ALGORITHM
	static const dnsErrorInvalidKeySize = 9106; // DNS_ERROR_INVALID_KEY_SIZE
	static const dnsErrorSigningKeyNotAccessible = 9107; // DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE
	static const dnsErrorKspDoesNotSupportProtection = 9108; // DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION
	static const dnsErrorUnexpectedDataProtectionError = 9109; // DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR
	static const dnsErrorUnexpectedCngError = 9110; // DNS_ERROR_UNEXPECTED_CNG_ERROR
	static const dnsErrorUnknownSigningParameterVersion = 9111; // DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION
	static const dnsErrorKspNotAccessible = 9112; // DNS_ERROR_KSP_NOT_ACCESSIBLE
	static const dnsErrorTooManySkds = 9113; // DNS_ERROR_TOO_MANY_SKDS
	static const dnsErrorInvalidRolloverPeriod = 9114; // DNS_ERROR_INVALID_ROLLOVER_PERIOD
	static const dnsErrorInvalidInitialRolloverOffset = 9115; // DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET
	static const dnsErrorRolloverInProgress = 9116; // DNS_ERROR_ROLLOVER_IN_PROGRESS
	static const dnsErrorStandbyKeyNotPresent = 9117; // DNS_ERROR_STANDBY_KEY_NOT_PRESENT
	static const dnsErrorNotAllowedOnZsk = 9118; // DNS_ERROR_NOT_ALLOWED_ON_ZSK
	static const dnsErrorNotAllowedOnActiveSkd = 9119; // DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD
	static const dnsErrorRolloverAlreadyQueued = 9120; // DNS_ERROR_ROLLOVER_ALREADY_QUEUED
	static const dnsErrorNotAllowedOnUnsignedZone = 9121; // DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE
	static const dnsErrorBadKeymaster = 9122; // DNS_ERROR_BAD_KEYMASTER
	static const dnsErrorInvalidSignatureValidityPeriod = 9123; // DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD
	static const dnsErrorInvalidNsec3IterationCount = 9124; // DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT
	static const dnsErrorDnssecIsDisabled = 9125; // DNS_ERROR_DNSSEC_IS_DISABLED
	static const dnsErrorInvalidXml = 9126; // DNS_ERROR_INVALID_XML
	static const dnsErrorNoValidTrustAnchors = 9127; // DNS_ERROR_NO_VALID_TRUST_ANCHORS
	static const dnsErrorRolloverNotPokeable = 9128; // DNS_ERROR_ROLLOVER_NOT_POKEABLE
	static const dnsErrorNsec3NameCollision = 9129; // DNS_ERROR_NSEC3_NAME_COLLISION
	static const dnsErrorNsecIncompatibleWithNsec3RsaSha1 = 9130; // DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1
	static const dnsInfoNoRecords = 9501; // DNS_INFO_NO_RECORDS
	static const dnsErrorBadPacket = 9502; // DNS_ERROR_BAD_PACKET
	static const dnsErrorNoPacket = 9503; // DNS_ERROR_NO_PACKET
	static const dnsErrorRcode = 9504; // DNS_ERROR_RCODE
	static const dnsErrorUnsecurePacket = 9505; // DNS_ERROR_UNSECURE_PACKET
	static const dnsRequestPending = 9506; // DNS_REQUEST_PENDING
	static const dnsErrorInvalidType = 9551; // DNS_ERROR_INVALID_TYPE
	static const dnsErrorInvalidIpAddress = 9552; // DNS_ERROR_INVALID_IP_ADDRESS
	static const dnsErrorInvalidProperty = 9553; // DNS_ERROR_INVALID_PROPERTY
	static const dnsErrorTryAgainLater = 9554; // DNS_ERROR_TRY_AGAIN_LATER
	static const dnsErrorNotUnique = 9555; // DNS_ERROR_NOT_UNIQUE
	static const dnsErrorNonRfcName = 9556; // DNS_ERROR_NON_RFC_NAME
	static const dnsStatusFqdn = 9557; // DNS_STATUS_FQDN
	static const dnsStatusDottedName = 9558; // DNS_STATUS_DOTTED_NAME
	static const dnsStatusSinglePartName = 9559; // DNS_STATUS_SINGLE_PART_NAME
	static const dnsErrorInvalidNameChar = 9560; // DNS_ERROR_INVALID_NAME_CHAR
	static const dnsErrorNumericName = 9561; // DNS_ERROR_NUMERIC_NAME
	static const dnsErrorNotAllowedOnRootServer = 9562; // DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER
	static const dnsErrorNotAllowedUnderDelegation = 9563; // DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION
	static const dnsErrorCannotFindRootHints = 9564; // DNS_ERROR_CANNOT_FIND_ROOT_HINTS
	static const dnsErrorInconsistentRootHints = 9565; // DNS_ERROR_INCONSISTENT_ROOT_HINTS
	static const dnsErrorDwordValueTooSmall = 9566; // DNS_ERROR_DWORD_VALUE_TOO_SMALL
	static const dnsErrorDwordValueTooLarge = 9567; // DNS_ERROR_DWORD_VALUE_TOO_LARGE
	static const dnsErrorBackgroundLoading = 9568; // DNS_ERROR_BACKGROUND_LOADING
	static const dnsErrorNotAllowedOnRodc = 9569; // DNS_ERROR_NOT_ALLOWED_ON_RODC
	static const dnsErrorNotAllowedUnderDname = 9570; // DNS_ERROR_NOT_ALLOWED_UNDER_DNAME
	static const dnsErrorDelegationRequired = 9571; // DNS_ERROR_DELEGATION_REQUIRED
	static const dnsErrorInvalidPolicyTable = 9572; // DNS_ERROR_INVALID_POLICY_TABLE
	static const dnsErrorZoneDoesNotExist = 9601; // DNS_ERROR_ZONE_DOES_NOT_EXIST
	static const dnsErrorNoZoneInfo = 9602; // DNS_ERROR_NO_ZONE_INFO
	static const dnsErrorInvalidZoneOperation = 9603; // DNS_ERROR_INVALID_ZONE_OPERATION
	static const dnsErrorZoneConfigurationError = 9604; // DNS_ERROR_ZONE_CONFIGURATION_ERROR
	static const dnsErrorZoneHasNoSoaRecord = 9605; // DNS_ERROR_ZONE_HAS_NO_SOA_RECORD
	static const dnsErrorZoneHasNoNsRecords = 9606; // DNS_ERROR_ZONE_HAS_NO_NS_RECORDS
	static const dnsErrorZoneLocked = 9607; // DNS_ERROR_ZONE_LOCKED
	static const dnsErrorZoneCreationFailed = 9608; // DNS_ERROR_ZONE_CREATION_FAILED
	static const dnsErrorZoneAlreadyExists = 9609; // DNS_ERROR_ZONE_ALREADY_EXISTS
	static const dnsErrorAutozoneAlreadyExists = 9610; // DNS_ERROR_AUTOZONE_ALREADY_EXISTS
	static const dnsErrorInvalidZoneType = 9611; // DNS_ERROR_INVALID_ZONE_TYPE
	static const dnsErrorSecondaryRequiresMasterIp = 9612; // DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP
	static const dnsErrorZoneNotSecondary = 9613; // DNS_ERROR_ZONE_NOT_SECONDARY
	static const dnsErrorNeedSecondaryAddresses = 9614; // DNS_ERROR_NEED_SECONDARY_ADDRESSES
	static const dnsErrorWinsInitFailed = 9615; // DNS_ERROR_WINS_INIT_FAILED
	static const dnsErrorNeedWinsServers = 9616; // DNS_ERROR_NEED_WINS_SERVERS
	static const dnsErrorNbstatInitFailed = 9617; // DNS_ERROR_NBSTAT_INIT_FAILED
	static const dnsErrorSoaDeleteInvalid = 9618; // DNS_ERROR_SOA_DELETE_INVALID
	static const dnsErrorForwarderAlreadyExists = 9619; // DNS_ERROR_FORWARDER_ALREADY_EXISTS
	static const dnsErrorZoneRequiresMasterIp = 9620; // DNS_ERROR_ZONE_REQUIRES_MASTER_IP
	static const dnsErrorZoneIsShutdown = 9621; // DNS_ERROR_ZONE_IS_SHUTDOWN
	static const dnsErrorZoneLockedForSigning = 9622; // DNS_ERROR_ZONE_LOCKED_FOR_SIGNING
	static const dnsErrorPrimaryRequiresDatafile = 9651; // DNS_ERROR_PRIMARY_REQUIRES_DATAFILE
	static const dnsErrorInvalidDatafileName = 9652; // DNS_ERROR_INVALID_DATAFILE_NAME
	static const dnsErrorDatafileOpenFailure = 9653; // DNS_ERROR_DATAFILE_OPEN_FAILURE
	static const dnsErrorFileWritebackFailed = 9654; // DNS_ERROR_FILE_WRITEBACK_FAILED
	static const dnsErrorDatafileParsing = 9655; // DNS_ERROR_DATAFILE_PARSING
	static const dnsErrorRecordDoesNotExist = 9701; // DNS_ERROR_RECORD_DOES_NOT_EXIST
	static const dnsErrorRecordFormat = 9702; // DNS_ERROR_RECORD_FORMAT
	static const dnsErrorNodeCreationFailed = 9703; // DNS_ERROR_NODE_CREATION_FAILED
	static const dnsErrorUnknownRecordType = 9704; // DNS_ERROR_UNKNOWN_RECORD_TYPE
	static const dnsErrorRecordTimedOut = 9705; // DNS_ERROR_RECORD_TIMED_OUT
	static const dnsErrorNameNotInZone = 9706; // DNS_ERROR_NAME_NOT_IN_ZONE
	static const dnsErrorCnameLoop = 9707; // DNS_ERROR_CNAME_LOOP
	static const dnsErrorNodeIsCname = 9708; // DNS_ERROR_NODE_IS_CNAME
	static const dnsErrorCnameCollision = 9709; // DNS_ERROR_CNAME_COLLISION
	static const dnsErrorRecordOnlyAtZoneRoot = 9710; // DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT
	static const dnsErrorRecordAlreadyExists = 9711; // DNS_ERROR_RECORD_ALREADY_EXISTS
	static const dnsErrorSecondaryData = 9712; // DNS_ERROR_SECONDARY_DATA
	static const dnsErrorNoCreateCacheData = 9713; // DNS_ERROR_NO_CREATE_CACHE_DATA
	static const dnsErrorNameDoesNotExist = 9714; // DNS_ERROR_NAME_DOES_NOT_EXIST
	static const dnsWarningPtrCreateFailed = 9715; // DNS_WARNING_PTR_CREATE_FAILED
	static const dnsWarningDomainUndeleted = 9716; // DNS_WARNING_DOMAIN_UNDELETED
	static const dnsErrorDsUnavailable = 9717; // DNS_ERROR_DS_UNAVAILABLE
	static const dnsErrorDsZoneAlreadyExists = 9718; // DNS_ERROR_DS_ZONE_ALREADY_EXISTS
	static const dnsErrorNoBootfileIfDsZone = 9719; // DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE
	static const dnsErrorNodeIsDname = 9720; // DNS_ERROR_NODE_IS_DNAME
	static const dnsErrorDnameCollision = 9721; // DNS_ERROR_DNAME_COLLISION
	static const dnsErrorAliasLoop = 9722; // DNS_ERROR_ALIAS_LOOP
	static const dnsInfoAxfrComplete = 9751; // DNS_INFO_AXFR_COMPLETE
	static const dnsErrorAxfr = 9752; // DNS_ERROR_AXFR
	static const dnsInfoAddedLocalWins = 9753; // DNS_INFO_ADDED_LOCAL_WINS
	static const dnsStatusContinueNeeded = 9801; // DNS_STATUS_CONTINUE_NEEDED
	static const dnsErrorNoTcpip = 9851; // DNS_ERROR_NO_TCPIP
	static const dnsErrorNoDnsServers = 9852; // DNS_ERROR_NO_DNS_SERVERS
	static const dnsErrorDpDoesNotExist = 9901; // DNS_ERROR_DP_DOES_NOT_EXIST
	static const dnsErrorDpAlreadyExists = 9902; // DNS_ERROR_DP_ALREADY_EXISTS
	static const dnsErrorDpNotEnlisted = 9903; // DNS_ERROR_DP_NOT_ENLISTED
	static const dnsErrorDpAlreadyEnlisted = 9904; // DNS_ERROR_DP_ALREADY_ENLISTED
	static const dnsErrorDpNotAvailable = 9905; // DNS_ERROR_DP_NOT_AVAILABLE
	static const dnsErrorDpFsmoError = 9906; // DNS_ERROR_DP_FSMO_ERROR
	static const wsaeintr = 10004; // WSAEINTR
	static const wsaebadf = 10009; // WSAEBADF
	static const wsaeacces = 10013; // WSAEACCES
	static const wsaefault = 10014; // WSAEFAULT
	static const wsaeinval = 10022; // WSAEINVAL
	static const wsaemfile = 10024; // WSAEMFILE
	static const wsaewouldblock = 10035; // WSAEWOULDBLOCK
	static const wsaeinprogress = 10036; // WSAEINPROGRESS
	static const wsaealready = 10037; // WSAEALREADY
	static const wsaenotsock = 10038; // WSAENOTSOCK
	static const wsaedestaddrreq = 10039; // WSAEDESTADDRREQ
	static const wsaemsgsize = 10040; // WSAEMSGSIZE
	static const wsaeprototype = 10041; // WSAEPROTOTYPE
	static const wsaenoprotoopt = 10042; // WSAENOPROTOOPT
	static const wsaeprotonosupport = 10043; // WSAEPROTONOSUPPORT
	static const wsaesocktnosupport = 10044; // WSAESOCKTNOSUPPORT
	static const wsaeopnotsupp = 10045; // WSAEOPNOTSUPP
	static const wsaepfnosupport = 10046; // WSAEPFNOSUPPORT
	static const wsaeafnosupport = 10047; // WSAEAFNOSUPPORT
	static const wsaeaddrinuse = 10048; // WSAEADDRINUSE
	static const wsaeaddrnotavail = 10049; // WSAEADDRNOTAVAIL
	static const wsaenetdown = 10050; // WSAENETDOWN
	static const wsaenetunreach = 10051; // WSAENETUNREACH
	static const wsaenetreset = 10052; // WSAENETRESET
	static const wsaeconnaborted = 10053; // WSAECONNABORTED
	static const wsaeconnreset = 10054; // WSAECONNRESET
	static const wsaenobufs = 10055; // WSAENOBUFS
	static const wsaeisconn = 10056; // WSAEISCONN
	static const wsaenotconn = 10057; // WSAENOTCONN
	static const wsaeshutdown = 10058; // WSAESHUTDOWN
	static const wsaetoomanyrefs = 10059; // WSAETOOMANYREFS
	static const wsaetimedout = 10060; // WSAETIMEDOUT
	static const wsaeconnrefused = 10061; // WSAECONNREFUSED
	static const wsaeloop = 10062; // WSAELOOP
	static const wsaenametoolong = 10063; // WSAENAMETOOLONG
	static const wsaehostdown = 10064; // WSAEHOSTDOWN
	static const wsaehostunreach = 10065; // WSAEHOSTUNREACH
	static const wsaenotempty = 10066; // WSAENOTEMPTY
	static const wsaeproclim = 10067; // WSAEPROCLIM
	static const wsaeusers = 10068; // WSAEUSERS
	static const wsaedquot = 10069; // WSAEDQUOT
	static const wsaestale = 10070; // WSAESTALE
	static const wsaeremote = 10071; // WSAEREMOTE
	static const wsasysnotready = 10091; // WSASYSNOTREADY
	static const wsavernotsupported = 10092; // WSAVERNOTSUPPORTED
	static const wsanotinitialised = 10093; // WSANOTINITIALISED
	static const wsaediscon = 10101; // WSAEDISCON
	static const wsaenomore = 10102; // WSAENOMORE
	static const wsaecancelled = 10103; // WSAECANCELLED
	static const wsaeinvalidproctable = 10104; // WSAEINVALIDPROCTABLE
	static const wsaeinvalidprovider = 10105; // WSAEINVALIDPROVIDER
	static const wsaeproviderfailedinit = 10106; // WSAEPROVIDERFAILEDINIT
	static const wsasyscallfailure = 10107; // WSASYSCALLFAILURE
	static const wsaserviceNotFound = 10108; // WSASERVICE_NOT_FOUND
	static const wsatypeNotFound = 10109; // WSATYPE_NOT_FOUND
	static const wsaENoMore = 10110; // WSA_E_NO_MORE
	static const wsaECancelled = 10111; // WSA_E_CANCELLED
	static const wsaerefused = 10112; // WSAEREFUSED
	static const wsahostNotFound = 11001; // WSAHOST_NOT_FOUND
	static const wsatryAgain = 11002; // WSATRY_AGAIN
	static const wsanoRecovery = 11003; // WSANO_RECOVERY
	static const wsanoData = 11004; // WSANO_DATA
	static const wsaQosReceivers = 11005; // WSA_QOS_RECEIVERS
	static const wsaQosSenders = 11006; // WSA_QOS_SENDERS
	static const wsaQosNoSenders = 11007; // WSA_QOS_NO_SENDERS
	static const wsaQosNoReceivers = 11008; // WSA_QOS_NO_RECEIVERS
	static const wsaQosRequestConfirmed = 11009; // WSA_QOS_REQUEST_CONFIRMED
	static const wsaQosAdmissionFailure = 11010; // WSA_QOS_ADMISSION_FAILURE
	static const wsaQosPolicyFailure = 11011; // WSA_QOS_POLICY_FAILURE
	static const wsaQosBadStyle = 11012; // WSA_QOS_BAD_STYLE
	static const wsaQosBadObject = 11013; // WSA_QOS_BAD_OBJECT
	static const wsaQosTrafficCtrlError = 11014; // WSA_QOS_TRAFFIC_CTRL_ERROR
	static const wsaQosGenericError = 11015; // WSA_QOS_GENERIC_ERROR
	static const wsaQosEservicetype = 11016; // WSA_QOS_ESERVICETYPE
	static const wsaQosEflowspec = 11017; // WSA_QOS_EFLOWSPEC
	static const wsaQosEprovspecbuf = 11018; // WSA_QOS_EPROVSPECBUF
	static const wsaQosEfilterstyle = 11019; // WSA_QOS_EFILTERSTYLE
	static const wsaQosEfiltertype = 11020; // WSA_QOS_EFILTERTYPE
	static const wsaQosEfiltercount = 11021; // WSA_QOS_EFILTERCOUNT
	static const wsaQosEobjlength = 11022; // WSA_QOS_EOBJLENGTH
	static const wsaQosEflowcount = 11023; // WSA_QOS_EFLOWCOUNT
	static const wsaQosEunkownpsobj = 11024; // WSA_QOS_EUNKOWNPSOBJ
	static const wsaQosEpolicyobj = 11025; // WSA_QOS_EPOLICYOBJ
	static const wsaQosEflowdesc = 11026; // WSA_QOS_EFLOWDESC
	static const wsaQosEpsflowspec = 11027; // WSA_QOS_EPSFLOWSPEC
	static const wsaQosEpsfilterspec = 11028; // WSA_QOS_EPSFILTERSPEC
	static const wsaQosEsdmodeobj = 11029; // WSA_QOS_ESDMODEOBJ
	static const wsaQosEshaperateobj = 11030; // WSA_QOS_ESHAPERATEOBJ
	static const wsaQosReservedPetype = 11031; // WSA_QOS_RESERVED_PETYPE
	static const wsaSecureHostNotFound = 11032; // WSA_SECURE_HOST_NOT_FOUND
	static const wsaIpsecNamePolicyError = 11033; // WSA_IPSEC_NAME_POLICY_ERROR
	static const errorIpsecQmPolicyExists = 13000; // ERROR_IPSEC_QM_POLICY_EXISTS
	static const errorIpsecQmPolicyNotFound = 13001; // ERROR_IPSEC_QM_POLICY_NOT_FOUND
	static const errorIpsecQmPolicyInUse = 13002; // ERROR_IPSEC_QM_POLICY_IN_USE
	static const errorIpsecMmPolicyExists = 13003; // ERROR_IPSEC_MM_POLICY_EXISTS
	static const errorIpsecMmPolicyNotFound = 13004; // ERROR_IPSEC_MM_POLICY_NOT_FOUND
	static const errorIpsecMmPolicyInUse = 13005; // ERROR_IPSEC_MM_POLICY_IN_USE
	static const errorIpsecMmFilterExists = 13006; // ERROR_IPSEC_MM_FILTER_EXISTS
	static const errorIpsecMmFilterNotFound = 13007; // ERROR_IPSEC_MM_FILTER_NOT_FOUND
	static const errorIpsecTransportFilterExists = 13008; // ERROR_IPSEC_TRANSPORT_FILTER_EXISTS
	static const errorIpsecTransportFilterNotFound = 13009; // ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND
	static const errorIpsecMmAuthExists = 13010; // ERROR_IPSEC_MM_AUTH_EXISTS
	static const errorIpsecMmAuthNotFound = 13011; // ERROR_IPSEC_MM_AUTH_NOT_FOUND
	static const errorIpsecMmAuthInUse = 13012; // ERROR_IPSEC_MM_AUTH_IN_USE
	static const errorIpsecDefaultMmPolicyNotFound = 13013; // ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND
	static const errorIpsecDefaultMmAuthNotFound = 13014; // ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND
	static const errorIpsecDefaultQmPolicyNotFound = 13015; // ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND
	static const errorIpsecTunnelFilterExists = 13016; // ERROR_IPSEC_TUNNEL_FILTER_EXISTS
	static const errorIpsecTunnelFilterNotFound = 13017; // ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND
	static const errorIpsecMmFilterPendingDeletion = 13018; // ERROR_IPSEC_MM_FILTER_PENDING_DELETION
	static const errorIpsecTransportFilterPendingDeletion = 13019; // ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION
	static const errorIpsecTunnelFilterPendingDeletion = 13020; // ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION
	static const errorIpsecMmPolicyPendingDeletion = 13021; // ERROR_IPSEC_MM_POLICY_PENDING_DELETION
	static const errorIpsecMmAuthPendingDeletion = 13022; // ERROR_IPSEC_MM_AUTH_PENDING_DELETION
	static const errorIpsecQmPolicyPendingDeletion = 13023; // ERROR_IPSEC_QM_POLICY_PENDING_DELETION
	static const warningIpsecMmPolicyPruned = 13024; // WARNING_IPSEC_MM_POLICY_PRUNED
	static const warningIpsecQmPolicyPruned = 13025; // WARNING_IPSEC_QM_POLICY_PRUNED
	static const errorIpsecIkeNegStatusBegin = 13800; // ERROR_IPSEC_IKE_NEG_STATUS_BEGIN
	static const errorIpsecIkeAuthFail = 13801; // ERROR_IPSEC_IKE_AUTH_FAIL
	static const errorIpsecIkeAttribFail = 13802; // ERROR_IPSEC_IKE_ATTRIB_FAIL
	static const errorIpsecIkeNegotiationPending = 13803; // ERROR_IPSEC_IKE_NEGOTIATION_PENDING
	static const errorIpsecIkeGeneralProcessingError = 13804; // ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR
	static const errorIpsecIkeTimedOut = 13805; // ERROR_IPSEC_IKE_TIMED_OUT
	static const errorIpsecIkeNoCert = 13806; // ERROR_IPSEC_IKE_NO_CERT
	static const errorIpsecIkeSaDeleted = 13807; // ERROR_IPSEC_IKE_SA_DELETED
	static const errorIpsecIkeSaReaped = 13808; // ERROR_IPSEC_IKE_SA_REAPED
	static const errorIpsecIkeMmAcquireDrop = 13809; // ERROR_IPSEC_IKE_MM_ACQUIRE_DROP
	static const errorIpsecIkeQmAcquireDrop = 13810; // ERROR_IPSEC_IKE_QM_ACQUIRE_DROP
	static const errorIpsecIkeQueueDropMm = 13811; // ERROR_IPSEC_IKE_QUEUE_DROP_MM
	static const errorIpsecIkeQueueDropNoMm = 13812; // ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM
	static const errorIpsecIkeDropNoResponse = 13813; // ERROR_IPSEC_IKE_DROP_NO_RESPONSE
	static const errorIpsecIkeMmDelayDrop = 13814; // ERROR_IPSEC_IKE_MM_DELAY_DROP
	static const errorIpsecIkeQmDelayDrop = 13815; // ERROR_IPSEC_IKE_QM_DELAY_DROP
	static const errorIpsecIkeError = 13816; // ERROR_IPSEC_IKE_ERROR
	static const errorIpsecIkeCrlFailed = 13817; // ERROR_IPSEC_IKE_CRL_FAILED
	static const errorIpsecIkeInvalidKeyUsage = 13818; // ERROR_IPSEC_IKE_INVALID_KEY_USAGE
	static const errorIpsecIkeInvalidCertType = 13819; // ERROR_IPSEC_IKE_INVALID_CERT_TYPE
	static const errorIpsecIkeNoPrivateKey = 13820; // ERROR_IPSEC_IKE_NO_PRIVATE_KEY
	static const errorIpsecIkeSimultaneousRekey = 13821; // ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY
	static const errorIpsecIkeDhFail = 13822; // ERROR_IPSEC_IKE_DH_FAIL
	static const errorIpsecIkeCriticalPayloadNotRecognized = 13823; // ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED
	static const errorIpsecIkeInvalidHeader = 13824; // ERROR_IPSEC_IKE_INVALID_HEADER
	static const errorIpsecIkeNoPolicy = 13825; // ERROR_IPSEC_IKE_NO_POLICY
	static const errorIpsecIkeInvalidSignature = 13826; // ERROR_IPSEC_IKE_INVALID_SIGNATURE
	static const errorIpsecIkeKerberosError = 13827; // ERROR_IPSEC_IKE_KERBEROS_ERROR
	static const errorIpsecIkeNoPublicKey = 13828; // ERROR_IPSEC_IKE_NO_PUBLIC_KEY
	static const errorIpsecIkeProcessErr = 13829; // ERROR_IPSEC_IKE_PROCESS_ERR
	static const errorIpsecIkeProcessErrSa = 13830; // ERROR_IPSEC_IKE_PROCESS_ERR_SA
	static const errorIpsecIkeProcessErrProp = 13831; // ERROR_IPSEC_IKE_PROCESS_ERR_PROP
	static const errorIpsecIkeProcessErrTrans = 13832; // ERROR_IPSEC_IKE_PROCESS_ERR_TRANS
	static const errorIpsecIkeProcessErrKe = 13833; // ERROR_IPSEC_IKE_PROCESS_ERR_KE
	static const errorIpsecIkeProcessErrId = 13834; // ERROR_IPSEC_IKE_PROCESS_ERR_ID
	static const errorIpsecIkeProcessErrCert = 13835; // ERROR_IPSEC_IKE_PROCESS_ERR_CERT
	static const errorIpsecIkeProcessErrCertReq = 13836; // ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ
	static const errorIpsecIkeProcessErrHash = 13837; // ERROR_IPSEC_IKE_PROCESS_ERR_HASH
	static const errorIpsecIkeProcessErrSig = 13838; // ERROR_IPSEC_IKE_PROCESS_ERR_SIG
	static const errorIpsecIkeProcessErrNonce = 13839; // ERROR_IPSEC_IKE_PROCESS_ERR_NONCE
	static const errorIpsecIkeProcessErrNotify = 13840; // ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY
	static const errorIpsecIkeProcessErrDelete = 13841; // ERROR_IPSEC_IKE_PROCESS_ERR_DELETE
	static const errorIpsecIkeProcessErrVendor = 13842; // ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR
	static const errorIpsecIkeInvalidPayload = 13843; // ERROR_IPSEC_IKE_INVALID_PAYLOAD
	static const errorIpsecIkeLoadSoftSa = 13844; // ERROR_IPSEC_IKE_LOAD_SOFT_SA
	static const errorIpsecIkeSoftSaTornDown = 13845; // ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN
	static const errorIpsecIkeInvalidCookie = 13846; // ERROR_IPSEC_IKE_INVALID_COOKIE
	static const errorIpsecIkeNoPeerCert = 13847; // ERROR_IPSEC_IKE_NO_PEER_CERT
	static const errorIpsecIkePeerCrlFailed = 13848; // ERROR_IPSEC_IKE_PEER_CRL_FAILED
	static const errorIpsecIkePolicyChange = 13849; // ERROR_IPSEC_IKE_POLICY_CHANGE
	static const errorIpsecIkeNoMmPolicy = 13850; // ERROR_IPSEC_IKE_NO_MM_POLICY
	static const errorIpsecIkeNotcbpriv = 13851; // ERROR_IPSEC_IKE_NOTCBPRIV
	static const errorIpsecIkeSecloadfail = 13852; // ERROR_IPSEC_IKE_SECLOADFAIL
	static const errorIpsecIkeFailsspinit = 13853; // ERROR_IPSEC_IKE_FAILSSPINIT
	static const errorIpsecIkeFailqueryssp = 13854; // ERROR_IPSEC_IKE_FAILQUERYSSP
	static const errorIpsecIkeSrvacqfail = 13855; // ERROR_IPSEC_IKE_SRVACQFAIL
	static const errorIpsecIkeSrvquerycred = 13856; // ERROR_IPSEC_IKE_SRVQUERYCRED
	static const errorIpsecIkeGetspifail = 13857; // ERROR_IPSEC_IKE_GETSPIFAIL
	static const errorIpsecIkeInvalidFilter = 13858; // ERROR_IPSEC_IKE_INVALID_FILTER
	static const errorIpsecIkeOutOfMemory = 13859; // ERROR_IPSEC_IKE_OUT_OF_MEMORY
	static const errorIpsecIkeAddUpdateKeyFailed = 13860; // ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED
	static const errorIpsecIkeInvalidPolicy = 13861; // ERROR_IPSEC_IKE_INVALID_POLICY
	static const errorIpsecIkeUnknownDoi = 13862; // ERROR_IPSEC_IKE_UNKNOWN_DOI
	static const errorIpsecIkeInvalidSituation = 13863; // ERROR_IPSEC_IKE_INVALID_SITUATION
	static const errorIpsecIkeDhFailure = 13864; // ERROR_IPSEC_IKE_DH_FAILURE
	static const errorIpsecIkeInvalidGroup = 13865; // ERROR_IPSEC_IKE_INVALID_GROUP
	static const errorIpsecIkeEncrypt = 13866; // ERROR_IPSEC_IKE_ENCRYPT
	static const errorIpsecIkeDecrypt = 13867; // ERROR_IPSEC_IKE_DECRYPT
	static const errorIpsecIkePolicyMatch = 13868; // ERROR_IPSEC_IKE_POLICY_MATCH
	static const errorIpsecIkeUnsupportedId = 13869; // ERROR_IPSEC_IKE_UNSUPPORTED_ID
	static const errorIpsecIkeInvalidHash = 13870; // ERROR_IPSEC_IKE_INVALID_HASH
	static const errorIpsecIkeInvalidHashAlg = 13871; // ERROR_IPSEC_IKE_INVALID_HASH_ALG
	static const errorIpsecIkeInvalidHashSize = 13872; // ERROR_IPSEC_IKE_INVALID_HASH_SIZE
	static const errorIpsecIkeInvalidEncryptAlg = 13873; // ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG
	static const errorIpsecIkeInvalidAuthAlg = 13874; // ERROR_IPSEC_IKE_INVALID_AUTH_ALG
	static const errorIpsecIkeInvalidSig = 13875; // ERROR_IPSEC_IKE_INVALID_SIG
	static const errorIpsecIkeLoadFailed = 13876; // ERROR_IPSEC_IKE_LOAD_FAILED
	static const errorIpsecIkeRpcDelete = 13877; // ERROR_IPSEC_IKE_RPC_DELETE
	static const errorIpsecIkeBenignReinit = 13878; // ERROR_IPSEC_IKE_BENIGN_REINIT
	static const errorIpsecIkeInvalidResponderLifetimeNotify = 13879; // ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY
	static const errorIpsecIkeInvalidMajorVersion = 13880; // ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION
	static const errorIpsecIkeInvalidCertKeylen = 13881; // ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN
	static const errorIpsecIkeMmLimit = 13882; // ERROR_IPSEC_IKE_MM_LIMIT
	static const errorIpsecIkeNegotiationDisabled = 13883; // ERROR_IPSEC_IKE_NEGOTIATION_DISABLED
	static const errorIpsecIkeQmLimit = 13884; // ERROR_IPSEC_IKE_QM_LIMIT
	static const errorIpsecIkeMmExpired = 13885; // ERROR_IPSEC_IKE_MM_EXPIRED
	static const errorIpsecIkePeerMmAssumedInvalid = 13886; // ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID
	static const errorIpsecIkeCertChainPolicyMismatch = 13887; // ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH
	static const errorIpsecIkeUnexpectedMessageId = 13888; // ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID
	static const errorIpsecIkeInvalidAuthPayload = 13889; // ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD
	static const errorIpsecIkeDosCookieSent = 13890; // ERROR_IPSEC_IKE_DOS_COOKIE_SENT
	static const errorIpsecIkeShuttingDown = 13891; // ERROR_IPSEC_IKE_SHUTTING_DOWN
	static const errorIpsecIkeCgaAuthFailed = 13892; // ERROR_IPSEC_IKE_CGA_AUTH_FAILED
	static const errorIpsecIkeProcessErrNatoa = 13893; // ERROR_IPSEC_IKE_PROCESS_ERR_NATOA
	static const errorIpsecIkeInvalidMmForQm = 13894; // ERROR_IPSEC_IKE_INVALID_MM_FOR_QM
	static const errorIpsecIkeQmExpired = 13895; // ERROR_IPSEC_IKE_QM_EXPIRED
	static const errorIpsecIkeTooManyFilters = 13896; // ERROR_IPSEC_IKE_TOO_MANY_FILTERS
	static const errorIpsecIkeNegStatusEnd = 13897; // ERROR_IPSEC_IKE_NEG_STATUS_END
	static const errorIpsecIkeKillDummyNapTunnel = 13898; // ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL
	static const errorIpsecIkeInnerIpAssignmentFailure = 13899; // ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE
	static const errorIpsecIkeRequireCpPayloadMissing = 13900; // ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING
	static const errorIpsecKeyModuleImpersonationNegotiationPending = 13901; // ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING
	static const errorIpsecIkeCoexistenceSuppress = 13902; // ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS
	static const errorIpsecIkeRatelimitDrop = 13903; // ERROR_IPSEC_IKE_RATELIMIT_DROP
	static const errorIpsecIkePeerDoesntSupportMobike = 13904; // ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE
	static const errorIpsecIkeAuthorizationFailure = 13905; // ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE
	static const errorIpsecIkeStrongCredAuthorizationFailure = 13906; // ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE
	static const errorIpsecIkeAuthorizationFailureWithOptionalRetry = 13907; // ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY
	static const errorIpsecIkeStrongCredAuthorizationAndCertmapFailure = 13908; // ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE
	static const errorIpsecIkeNegStatusExtendedEnd = 13909; // ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END
	static const errorIpsecBadSpi = 13910; // ERROR_IPSEC_BAD_SPI
	static const errorIpsecSaLifetimeExpired = 13911; // ERROR_IPSEC_SA_LIFETIME_EXPIRED
	static const errorIpsecWrongSa = 13912; // ERROR_IPSEC_WRONG_SA
	static const errorIpsecReplayCheckFailed = 13913; // ERROR_IPSEC_REPLAY_CHECK_FAILED
	static const errorIpsecInvalidPacket = 13914; // ERROR_IPSEC_INVALID_PACKET
	static const errorIpsecIntegrityCheckFailed = 13915; // ERROR_IPSEC_INTEGRITY_CHECK_FAILED
	static const errorIpsecClearTextDrop = 13916; // ERROR_IPSEC_CLEAR_TEXT_DROP
	static const errorIpsecAuthFirewallDrop = 13917; // ERROR_IPSEC_AUTH_FIREWALL_DROP
	static const errorIpsecThrottleDrop = 13918; // ERROR_IPSEC_THROTTLE_DROP
	static const errorIpsecDospBlock = 13925; // ERROR_IPSEC_DOSP_BLOCK
	static const errorIpsecDospReceivedMulticast = 13926; // ERROR_IPSEC_DOSP_RECEIVED_MULTICAST
	static const errorIpsecDospInvalidPacket = 13927; // ERROR_IPSEC_DOSP_INVALID_PACKET
	static const errorIpsecDospStateLookupFailed = 13928; // ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED
	static const errorIpsecDospMaxEntries = 13929; // ERROR_IPSEC_DOSP_MAX_ENTRIES
	static const errorIpsecDospKeymodNotAllowed = 13930; // ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED
	static const errorIpsecDospNotInstalled = 13931; // ERROR_IPSEC_DOSP_NOT_INSTALLED
	static const errorIpsecDospMaxPerIpRatelimitQueues = 13932; // ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES
	static const errorSxsSectionNotFound = 14000; // ERROR_SXS_SECTION_NOT_FOUND
	static const errorSxsCantGenActctx = 14001; // ERROR_SXS_CANT_GEN_ACTCTX
	static const errorSxsInvalidActctxdataFormat = 14002; // ERROR_SXS_INVALID_ACTCTXDATA_FORMAT
	static const errorSxsAssemblyNotFound = 14003; // ERROR_SXS_ASSEMBLY_NOT_FOUND
	static const errorSxsManifestFormatError = 14004; // ERROR_SXS_MANIFEST_FORMAT_ERROR
	static const errorSxsManifestParseError = 14005; // ERROR_SXS_MANIFEST_PARSE_ERROR
	static const errorSxsActivationContextDisabled = 14006; // ERROR_SXS_ACTIVATION_CONTEXT_DISABLED
	static const errorSxsKeyNotFound = 14007; // ERROR_SXS_KEY_NOT_FOUND
	static const errorSxsVersionConflict = 14008; // ERROR_SXS_VERSION_CONFLICT
	static const errorSxsWrongSectionType = 14009; // ERROR_SXS_WRONG_SECTION_TYPE
	static const errorSxsThreadQueriesDisabled = 14010; // ERROR_SXS_THREAD_QUERIES_DISABLED
	static const errorSxsProcessDefaultAlreadySet = 14011; // ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET
	static const errorSxsUnknownEncodingGroup = 14012; // ERROR_SXS_UNKNOWN_ENCODING_GROUP
	static const errorSxsUnknownEncoding = 14013; // ERROR_SXS_UNKNOWN_ENCODING
	static const errorSxsInvalidXmlNamespaceUri = 14014; // ERROR_SXS_INVALID_XML_NAMESPACE_URI
	static const errorSxsRootManifestDependencyNotInstalled = 14015; // ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED
	static const errorSxsLeafManifestDependencyNotInstalled = 14016; // ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED
	static const errorSxsInvalidAssemblyIdentityAttribute = 14017; // ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE
	static const errorSxsManifestMissingRequiredDefaultNamespace = 14018; // ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE
	static const errorSxsManifestInvalidRequiredDefaultNamespace = 14019; // ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE
	static const errorSxsPrivateManifestCrossPathWithReparsePoint = 14020; // ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT
	static const errorSxsDuplicateDllName = 14021; // ERROR_SXS_DUPLICATE_DLL_NAME
	static const errorSxsDuplicateWindowclassName = 14022; // ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME
	static const errorSxsDuplicateClsid = 14023; // ERROR_SXS_DUPLICATE_CLSID
	static const errorSxsDuplicateIid = 14024; // ERROR_SXS_DUPLICATE_IID
	static const errorSxsDuplicateTlbid = 14025; // ERROR_SXS_DUPLICATE_TLBID
	static const errorSxsDuplicateProgid = 14026; // ERROR_SXS_DUPLICATE_PROGID
	static const errorSxsDuplicateAssemblyName = 14027; // ERROR_SXS_DUPLICATE_ASSEMBLY_NAME
	static const errorSxsFileHashMismatch = 14028; // ERROR_SXS_FILE_HASH_MISMATCH
	static const errorSxsPolicyParseError = 14029; // ERROR_SXS_POLICY_PARSE_ERROR
	static const errorSxsXmlEMissingquote = 14030; // ERROR_SXS_XML_E_MISSINGQUOTE
	static const errorSxsXmlECommentsyntax = 14031; // ERROR_SXS_XML_E_COMMENTSYNTAX
	static const errorSxsXmlEBadstartnamechar = 14032; // ERROR_SXS_XML_E_BADSTARTNAMECHAR
	static const errorSxsXmlEBadnamechar = 14033; // ERROR_SXS_XML_E_BADNAMECHAR
	static const errorSxsXmlEBadcharinstring = 14034; // ERROR_SXS_XML_E_BADCHARINSTRING
	static const errorSxsXmlEXmldeclsyntax = 14035; // ERROR_SXS_XML_E_XMLDECLSYNTAX
	static const errorSxsXmlEBadchardata = 14036; // ERROR_SXS_XML_E_BADCHARDATA
	static const errorSxsXmlEMissingwhitespace = 14037; // ERROR_SXS_XML_E_MISSINGWHITESPACE
	static const errorSxsXmlEExpectingtagend = 14038; // ERROR_SXS_XML_E_EXPECTINGTAGEND
	static const errorSxsXmlEMissingsemicolon = 14039; // ERROR_SXS_XML_E_MISSINGSEMICOLON
	static const errorSxsXmlEUnbalancedparen = 14040; // ERROR_SXS_XML_E_UNBALANCEDPAREN
	static const errorSxsXmlEInternalerror = 14041; // ERROR_SXS_XML_E_INTERNALERROR
	static const errorSxsXmlEUnexpectedWhitespace = 14042; // ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE
	static const errorSxsXmlEIncompleteEncoding = 14043; // ERROR_SXS_XML_E_INCOMPLETE_ENCODING
	static const errorSxsXmlEMissingParen = 14044; // ERROR_SXS_XML_E_MISSING_PAREN
	static const errorSxsXmlEExpectingclosequote = 14045; // ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE
	static const errorSxsXmlEMultipleColons = 14046; // ERROR_SXS_XML_E_MULTIPLE_COLONS
	static const errorSxsXmlEInvalidDecimal = 14047; // ERROR_SXS_XML_E_INVALID_DECIMAL
	static const errorSxsXmlEInvalidHexidecimal = 14048; // ERROR_SXS_XML_E_INVALID_HEXIDECIMAL
	static const errorSxsXmlEInvalidUnicode = 14049; // ERROR_SXS_XML_E_INVALID_UNICODE
	static const errorSxsXmlEWhitespaceorquestionmark = 14050; // ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK
	static const errorSxsXmlEUnexpectedendtag = 14051; // ERROR_SXS_XML_E_UNEXPECTEDENDTAG
	static const errorSxsXmlEUnclosedtag = 14052; // ERROR_SXS_XML_E_UNCLOSEDTAG
	static const errorSxsXmlEDuplicateattribute = 14053; // ERROR_SXS_XML_E_DUPLICATEATTRIBUTE
	static const errorSxsXmlEMultipleroots = 14054; // ERROR_SXS_XML_E_MULTIPLEROOTS
	static const errorSxsXmlEInvalidatrootlevel = 14055; // ERROR_SXS_XML_E_INVALIDATROOTLEVEL
	static const errorSxsXmlEBadxmldecl = 14056; // ERROR_SXS_XML_E_BADXMLDECL
	static const errorSxsXmlEMissingroot = 14057; // ERROR_SXS_XML_E_MISSINGROOT
	static const errorSxsXmlEUnexpectedeof = 14058; // ERROR_SXS_XML_E_UNEXPECTEDEOF
	static const errorSxsXmlEBadperefinsubset = 14059; // ERROR_SXS_XML_E_BADPEREFINSUBSET
	static const errorSxsXmlEUnclosedstarttag = 14060; // ERROR_SXS_XML_E_UNCLOSEDSTARTTAG
	static const errorSxsXmlEUnclosedendtag = 14061; // ERROR_SXS_XML_E_UNCLOSEDENDTAG
	static const errorSxsXmlEUnclosedstring = 14062; // ERROR_SXS_XML_E_UNCLOSEDSTRING
	static const errorSxsXmlEUnclosedcomment = 14063; // ERROR_SXS_XML_E_UNCLOSEDCOMMENT
	static const errorSxsXmlEUncloseddecl = 14064; // ERROR_SXS_XML_E_UNCLOSEDDECL
	static const errorSxsXmlEUnclosedcdata = 14065; // ERROR_SXS_XML_E_UNCLOSEDCDATA
	static const errorSxsXmlEReservednamespace = 14066; // ERROR_SXS_XML_E_RESERVEDNAMESPACE
	static const errorSxsXmlEInvalidencoding = 14067; // ERROR_SXS_XML_E_INVALIDENCODING
	static const errorSxsXmlEInvalidswitch = 14068; // ERROR_SXS_XML_E_INVALIDSWITCH
	static const errorSxsXmlEBadxmlcase = 14069; // ERROR_SXS_XML_E_BADXMLCASE
	static const errorSxsXmlEInvalidStandalone = 14070; // ERROR_SXS_XML_E_INVALID_STANDALONE
	static const errorSxsXmlEUnexpectedStandalone = 14071; // ERROR_SXS_XML_E_UNEXPECTED_STANDALONE
	static const errorSxsXmlEInvalidVersion = 14072; // ERROR_SXS_XML_E_INVALID_VERSION
	static const errorSxsXmlEMissingequals = 14073; // ERROR_SXS_XML_E_MISSINGEQUALS
	static const errorSxsProtectionRecoveryFailed = 14074; // ERROR_SXS_PROTECTION_RECOVERY_FAILED
	static const errorSxsProtectionPublicKeyTooShort = 14075; // ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT
	static const errorSxsProtectionCatalogNotValid = 14076; // ERROR_SXS_PROTECTION_CATALOG_NOT_VALID
	static const errorSxsUntranslatableHresult = 14077; // ERROR_SXS_UNTRANSLATABLE_HRESULT
	static const errorSxsProtectionCatalogFileMissing = 14078; // ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING
	static const errorSxsMissingAssemblyIdentityAttribute = 14079; // ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE
	static const errorSxsInvalidAssemblyIdentityAttributeName = 14080; // ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME
	static const errorSxsAssemblyMissing = 14081; // ERROR_SXS_ASSEMBLY_MISSING
	static const errorSxsCorruptActivationStack = 14082; // ERROR_SXS_CORRUPT_ACTIVATION_STACK
	static const errorSxsCorruption = 14083; // ERROR_SXS_CORRUPTION
	static const errorSxsEarlyDeactivation = 14084; // ERROR_SXS_EARLY_DEACTIVATION
	static const errorSxsInvalidDeactivation = 14085; // ERROR_SXS_INVALID_DEACTIVATION
	static const errorSxsMultipleDeactivation = 14086; // ERROR_SXS_MULTIPLE_DEACTIVATION
	static const errorSxsProcessTerminationRequested = 14087; // ERROR_SXS_PROCESS_TERMINATION_REQUESTED
	static const errorSxsReleaseActivationContext = 14088; // ERROR_SXS_RELEASE_ACTIVATION_CONTEXT
	static const errorSxsSystemDefaultActivationContextEmpty = 14089; // ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY
	static const errorSxsInvalidIdentityAttributeValue = 14090; // ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE
	static const errorSxsInvalidIdentityAttributeName = 14091; // ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME
	static const errorSxsIdentityDuplicateAttribute = 14092; // ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE
	static const errorSxsIdentityParseError = 14093; // ERROR_SXS_IDENTITY_PARSE_ERROR
	static const errorMalformedSubstitutionString = 14094; // ERROR_MALFORMED_SUBSTITUTION_STRING
	static const errorSxsIncorrectPublicKeyToken = 14095; // ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN
	static const errorUnmappedSubstitutionString = 14096; // ERROR_UNMAPPED_SUBSTITUTION_STRING
	static const errorSxsAssemblyNotLocked = 14097; // ERROR_SXS_ASSEMBLY_NOT_LOCKED
	static const errorSxsComponentStoreCorrupt = 14098; // ERROR_SXS_COMPONENT_STORE_CORRUPT
	static const errorAdvancedInstallerFailed = 14099; // ERROR_ADVANCED_INSTALLER_FAILED
	static const errorXmlEncodingMismatch = 14100; // ERROR_XML_ENCODING_MISMATCH
	static const errorSxsManifestIdentitySameButContentsDifferent = 14101; // ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT
	static const errorSxsIdentitiesDifferent = 14102; // ERROR_SXS_IDENTITIES_DIFFERENT
	static const errorSxsAssemblyIsNotADeployment = 14103; // ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT
	static const errorSxsFileNotPartOfAssembly = 14104; // ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY
	static const errorSxsManifestTooBig = 14105; // ERROR_SXS_MANIFEST_TOO_BIG
	static const errorSxsSettingNotRegistered = 14106; // ERROR_SXS_SETTING_NOT_REGISTERED
	static const errorSxsTransactionClosureIncomplete = 14107; // ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE
	static const errorSmiPrimitiveInstallerFailed = 14108; // ERROR_SMI_PRIMITIVE_INSTALLER_FAILED
	static const errorGenericCommandFailed = 14109; // ERROR_GENERIC_COMMAND_FAILED
	static const errorSxsFileHashMissing = 14110; // ERROR_SXS_FILE_HASH_MISSING
	static const errorEvtInvalidChannelPath = 15000; // ERROR_EVT_INVALID_CHANNEL_PATH
	static const errorEvtInvalidQuery = 15001; // ERROR_EVT_INVALID_QUERY
	static const errorEvtPublisherMetadataNotFound = 15002; // ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND
	static const errorEvtEventTemplateNotFound = 15003; // ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND
	static const errorEvtInvalidPublisherName = 15004; // ERROR_EVT_INVALID_PUBLISHER_NAME
	static const errorEvtInvalidEventData = 15005; // ERROR_EVT_INVALID_EVENT_DATA
	static const errorEvtChannelNotFound = 15007; // ERROR_EVT_CHANNEL_NOT_FOUND
	static const errorEvtMalformedXmlText = 15008; // ERROR_EVT_MALFORMED_XML_TEXT
	static const errorEvtSubscriptionToDirectChannel = 15009; // ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL
	static const errorEvtConfigurationError = 15010; // ERROR_EVT_CONFIGURATION_ERROR
	static const errorEvtQueryResultStale = 15011; // ERROR_EVT_QUERY_RESULT_STALE
	static const errorEvtQueryResultInvalidPosition = 15012; // ERROR_EVT_QUERY_RESULT_INVALID_POSITION
	static const errorEvtNonValidatingMsxml = 15013; // ERROR_EVT_NON_VALIDATING_MSXML
	static const errorEvtFilterAlreadyscoped = 15014; // ERROR_EVT_FILTER_ALREADYSCOPED
	static const errorEvtFilterNoteltset = 15015; // ERROR_EVT_FILTER_NOTELTSET
	static const errorEvtFilterInvarg = 15016; // ERROR_EVT_FILTER_INVARG
	static const errorEvtFilterInvtest = 15017; // ERROR_EVT_FILTER_INVTEST
	static const errorEvtFilterInvtype = 15018; // ERROR_EVT_FILTER_INVTYPE
	static const errorEvtFilterParseerr = 15019; // ERROR_EVT_FILTER_PARSEERR
	static const errorEvtFilterUnsupportedop = 15020; // ERROR_EVT_FILTER_UNSUPPORTEDOP
	static const errorEvtFilterUnexpectedtoken = 15021; // ERROR_EVT_FILTER_UNEXPECTEDTOKEN
	static const errorEvtInvalidOperationOverEnabledDirectChannel = 15022; // ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL
	static const errorEvtInvalidChannelPropertyValue = 15023; // ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE
	static const errorEvtInvalidPublisherPropertyValue = 15024; // ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE
	static const errorEvtChannelCannotActivate = 15025; // ERROR_EVT_CHANNEL_CANNOT_ACTIVATE
	static const errorEvtFilterTooComplex = 15026; // ERROR_EVT_FILTER_TOO_COMPLEX
	static const errorEvtMessageNotFound = 15027; // ERROR_EVT_MESSAGE_NOT_FOUND
	static const errorEvtMessageIdNotFound = 15028; // ERROR_EVT_MESSAGE_ID_NOT_FOUND
	static const errorEvtUnresolvedValueInsert = 15029; // ERROR_EVT_UNRESOLVED_VALUE_INSERT
	static const errorEvtUnresolvedParameterInsert = 15030; // ERROR_EVT_UNRESOLVED_PARAMETER_INSERT
	static const errorEvtMaxInsertsReached = 15031; // ERROR_EVT_MAX_INSERTS_REACHED
	static const errorEvtEventDefinitionNotFound = 15032; // ERROR_EVT_EVENT_DEFINITION_NOT_FOUND
	static const errorEvtMessageLocaleNotFound = 15033; // ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND
	static const errorEvtVersionTooOld = 15034; // ERROR_EVT_VERSION_TOO_OLD
	static const errorEvtVersionTooNew = 15035; // ERROR_EVT_VERSION_TOO_NEW
	static const errorEvtCannotOpenChannelOfQuery = 15036; // ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY
	static const errorEvtPublisherDisabled = 15037; // ERROR_EVT_PUBLISHER_DISABLED
	static const errorEvtFilterOutOfRange = 15038; // ERROR_EVT_FILTER_OUT_OF_RANGE
	static const errorEcSubscriptionCannotActivate = 15080; // ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE
	static const errorEcLogDisabled = 15081; // ERROR_EC_LOG_DISABLED
	static const errorEcCircularForwarding = 15082; // ERROR_EC_CIRCULAR_FORWARDING
	static const errorEcCredstoreFull = 15083; // ERROR_EC_CREDSTORE_FULL
	static const errorEcCredNotFound = 15084; // ERROR_EC_CRED_NOT_FOUND
	static const errorEcNoActiveChannel = 15085; // ERROR_EC_NO_ACTIVE_CHANNEL
	static const errorMuiFileNotFound = 15100; // ERROR_MUI_FILE_NOT_FOUND
	static const errorMuiInvalidFile = 15101; // ERROR_MUI_INVALID_FILE
	static const errorMuiInvalidRcConfig = 15102; // ERROR_MUI_INVALID_RC_CONFIG
	static const errorMuiInvalidLocaleName = 15103; // ERROR_MUI_INVALID_LOCALE_NAME
	static const errorMuiInvalidUltimatefallbackName = 15104; // ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME
	static const errorMuiFileNotLoaded = 15105; // ERROR_MUI_FILE_NOT_LOADED
	static const errorResourceEnumUserStop = 15106; // ERROR_RESOURCE_ENUM_USER_STOP
	static const errorMuiIntlsettingsUilangNotInstalled = 15107; // ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED
	static const errorMuiIntlsettingsInvalidLocaleName = 15108; // ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME
	static const errorMrmRuntimeNoDefaultOrNeutralResource = 15110; // ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE
	static const errorMrmInvalidPriconfig = 15111; // ERROR_MRM_INVALID_PRICONFIG
	static const errorMrmInvalidFileType = 15112; // ERROR_MRM_INVALID_FILE_TYPE
	static const errorMrmUnknownQualifier = 15113; // ERROR_MRM_UNKNOWN_QUALIFIER
	static const errorMrmInvalidQualifierValue = 15114; // ERROR_MRM_INVALID_QUALIFIER_VALUE
	static const errorMrmNoCandidate = 15115; // ERROR_MRM_NO_CANDIDATE
	static const errorMrmNoMatchOrDefaultCandidate = 15116; // ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE
	static const errorMrmResourceTypeMismatch = 15117; // ERROR_MRM_RESOURCE_TYPE_MISMATCH
	static const errorMrmDuplicateMapName = 15118; // ERROR_MRM_DUPLICATE_MAP_NAME
	static const errorMrmDuplicateEntry = 15119; // ERROR_MRM_DUPLICATE_ENTRY
	static const errorMrmInvalidResourceIdentifier = 15120; // ERROR_MRM_INVALID_RESOURCE_IDENTIFIER
	static const errorMrmFilepathTooLong = 15121; // ERROR_MRM_FILEPATH_TOO_LONG
	static const errorMrmUnsupportedDirectoryType = 15122; // ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE
	static const errorMrmInvalidPriFile = 15126; // ERROR_MRM_INVALID_PRI_FILE
	static const errorMrmNamedResourceNotFound = 15127; // ERROR_MRM_NAMED_RESOURCE_NOT_FOUND
	static const errorMrmMapNotFound = 15135; // ERROR_MRM_MAP_NOT_FOUND
	static const errorMrmUnsupportedProfileType = 15136; // ERROR_MRM_UNSUPPORTED_PROFILE_TYPE
	static const errorMrmInvalidQualifierOperator = 15137; // ERROR_MRM_INVALID_QUALIFIER_OPERATOR
	static const errorMrmIndeterminateQualifierValue = 15138; // ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE
	static const errorMrmAutomergeEnabled = 15139; // ERROR_MRM_AUTOMERGE_ENABLED
	static const errorMrmTooManyResources = 15140; // ERROR_MRM_TOO_MANY_RESOURCES
	static const errorMcaInvalidCapabilitiesString = 15200; // ERROR_MCA_INVALID_CAPABILITIES_STRING
	static const errorMcaInvalidVcpVersion = 15201; // ERROR_MCA_INVALID_VCP_VERSION
	static const errorMcaMonitorViolatesMccsSpecification = 15202; // ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION
	static const errorMcaMccsVersionMismatch = 15203; // ERROR_MCA_MCCS_VERSION_MISMATCH
	static const errorMcaUnsupportedMccsVersion = 15204; // ERROR_MCA_UNSUPPORTED_MCCS_VERSION
	static const errorMcaInternalError = 15205; // ERROR_MCA_INTERNAL_ERROR
	static const errorMcaInvalidTechnologyTypeReturned = 15206; // ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED
	static const errorMcaUnsupportedColorTemperature = 15207; // ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE
	static const errorAmbiguousSystemDevice = 15250; // ERROR_AMBIGUOUS_SYSTEM_DEVICE
	static const errorSystemDeviceNotFound = 15299; // ERROR_SYSTEM_DEVICE_NOT_FOUND
	static const errorHashNotSupported = 15300; // ERROR_HASH_NOT_SUPPORTED
	static const errorHashNotPresent = 15301; // ERROR_HASH_NOT_PRESENT
	static const errorSecondaryIcProviderNotRegistered = 15321; // ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED
	static const errorGpioClientInformationInvalid = 15322; // ERROR_GPIO_CLIENT_INFORMATION_INVALID
	static const errorGpioVersionNotSupported = 15323; // ERROR_GPIO_VERSION_NOT_SUPPORTED
	static const errorGpioInvalidRegistrationPacket = 15324; // ERROR_GPIO_INVALID_REGISTRATION_PACKET
	static const errorGpioOperationDenied = 15325; // ERROR_GPIO_OPERATION_DENIED
	static const errorGpioIncompatibleConnectMode = 15326; // ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE
	static const errorGpioInterruptAlreadyUnmasked = 15327; // ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED
	static const errorCannotSwitchRunlevel = 15400; // ERROR_CANNOT_SWITCH_RUNLEVEL
	static const errorInvalidRunlevelSetting = 15401; // ERROR_INVALID_RUNLEVEL_SETTING
	static const errorRunlevelSwitchTimeout = 15402; // ERROR_RUNLEVEL_SWITCH_TIMEOUT
	static const errorRunlevelSwitchAgentTimeout = 15403; // ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT
	static const errorRunlevelSwitchInProgress = 15404; // ERROR_RUNLEVEL_SWITCH_IN_PROGRESS
	static const errorServicesFailedAutostart = 15405; // ERROR_SERVICES_FAILED_AUTOSTART
	static const errorComTaskStopPending = 15501; // ERROR_COM_TASK_STOP_PENDING
	static const errorInstallOpenPackageFailed = 15600; // ERROR_INSTALL_OPEN_PACKAGE_FAILED
	static const errorInstallPackageNotFound = 15601; // ERROR_INSTALL_PACKAGE_NOT_FOUND
	static const errorInstallInvalidPackage = 15602; // ERROR_INSTALL_INVALID_PACKAGE
	static const errorInstallResolveDependencyFailed = 15603; // ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED
	static const errorInstallOutOfDiskSpace = 15604; // ERROR_INSTALL_OUT_OF_DISK_SPACE
	static const errorInstallNetworkFailure = 15605; // ERROR_INSTALL_NETWORK_FAILURE
	static const errorInstallRegistrationFailure = 15606; // ERROR_INSTALL_REGISTRATION_FAILURE
	static const errorInstallDeregistrationFailure = 15607; // ERROR_INSTALL_DEREGISTRATION_FAILURE
	static const errorInstallCancel = 15608; // ERROR_INSTALL_CANCEL
	static const errorInstallFailed = 15609; // ERROR_INSTALL_FAILED
	static const errorRemoveFailed = 15610; // ERROR_REMOVE_FAILED
	static const errorPackageAlreadyExists = 15611; // ERROR_PACKAGE_ALREADY_EXISTS
	static const errorNeedsRemediation = 15612; // ERROR_NEEDS_REMEDIATION
	static const errorInstallPrerequisiteFailed = 15613; // ERROR_INSTALL_PREREQUISITE_FAILED
	static const errorPackageRepositoryCorrupted = 15614; // ERROR_PACKAGE_REPOSITORY_CORRUPTED
	static const errorInstallPolicyFailure = 15615; // ERROR_INSTALL_POLICY_FAILURE
	static const errorPackageUpdating = 15616; // ERROR_PACKAGE_UPDATING
	static const errorDeploymentBlockedByPolicy = 15617; // ERROR_DEPLOYMENT_BLOCKED_BY_POLICY
	static const errorPackagesInUse = 15618; // ERROR_PACKAGES_IN_USE
	static const errorRecoveryFileCorrupt = 15619; // ERROR_RECOVERY_FILE_CORRUPT
	static const errorInvalidStagedSignature = 15620; // ERROR_INVALID_STAGED_SIGNATURE
	static const errorDeletingExistingApplicationdataStoreFailed = 15621; // ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED
	static const errorInstallPackageDowngrade = 15622; // ERROR_INSTALL_PACKAGE_DOWNGRADE
	static const errorSystemNeedsRemediation = 15623; // ERROR_SYSTEM_NEEDS_REMEDIATION
	static const errorAppxIntegrityFailureClrNgen = 15624; // ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN
	static const errorResiliencyFileCorrupt = 15625; // ERROR_RESILIENCY_FILE_CORRUPT
	static const errorInstallFirewallServiceNotRunning = 15626; // ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING
	static const appmodelErrorNoPackage = 15700; // APPMODEL_ERROR_NO_PACKAGE
	static const appmodelErrorPackageRuntimeCorrupt = 15701; // APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT
	static const appmodelErrorPackageIdentityCorrupt = 15702; // APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT
	static const appmodelErrorNoApplication = 15703; // APPMODEL_ERROR_NO_APPLICATION
	static const errorStateLoadStoreFailed = 15800; // ERROR_STATE_LOAD_STORE_FAILED
	static const errorStateGetVersionFailed = 15801; // ERROR_STATE_GET_VERSION_FAILED
	static const errorStateSetVersionFailed = 15802; // ERROR_STATE_SET_VERSION_FAILED
	static const errorStateStructuredResetFailed = 15803; // ERROR_STATE_STRUCTURED_RESET_FAILED
	static const errorStateOpenContainerFailed = 15804; // ERROR_STATE_OPEN_CONTAINER_FAILED
	static const errorStateCreateContainerFailed = 15805; // ERROR_STATE_CREATE_CONTAINER_FAILED
	static const errorStateDeleteContainerFailed = 15806; // ERROR_STATE_DELETE_CONTAINER_FAILED
	static const errorStateReadSettingFailed = 15807; // ERROR_STATE_READ_SETTING_FAILED
	static const errorStateWriteSettingFailed = 15808; // ERROR_STATE_WRITE_SETTING_FAILED
	static const errorStateDeleteSettingFailed = 15809; // ERROR_STATE_DELETE_SETTING_FAILED
	static const errorStateQuerySettingFailed = 15810; // ERROR_STATE_QUERY_SETTING_FAILED
	static const errorStateReadCompositeSettingFailed = 15811; // ERROR_STATE_READ_COMPOSITE_SETTING_FAILED
	static const errorStateWriteCompositeSettingFailed = 15812; // ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED
	static const errorStateEnumerateContainerFailed = 15813; // ERROR_STATE_ENUMERATE_CONTAINER_FAILED
	static const errorStateEnumerateSettingsFailed = 15814; // ERROR_STATE_ENUMERATE_SETTINGS_FAILED
	static const errorStateCompositeSettingValueSizeLimitExceeded = 15815; // ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED
	static const errorStateSettingValueSizeLimitExceeded = 15816; // ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED
	static const errorStateSettingNameSizeLimitExceeded = 15817; // ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED
	static const errorStateContainerNameSizeLimitExceeded = 15818; // ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED
	static const errorApiUnavailable = 15841; // ERROR_API_UNAVAILABLE
}
